19:24:33 WARNING  is when this event was logged.
19:24:33 INFO     DROP SEQUENCE IF EXISTS serial;
CREATE SEQUENCE serial;
19:24:33 INFO     DROP SEQUENCE IF EXISTS plants;
CREATE SEQUENCE plants;
19:24:33 INFO     DROP TABLE IF EXISTS opt_plants CASCADE;
CREATE TABLE opt_plants (id_plant integer not null, id_target integer, plant_capacity double precision, rank integer, length_manure_avg double precision, length_crop_avg double precision, manure_required double precision, manure_available double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_required double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, ratio_manure double precision, ratio_crop double precision);
19:24:33 INFO     DROP TABLE IF EXISTS opt_residual CASCADE;
CREATE TABLE opt_residual (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
19:24:33 INFO     DROP TABLE IF EXISTS opt_allocation CASCADE;
CREATE TABLE opt_allocation (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
19:24:33 INFO     ALTER TABLE opt_plants ADD PRIMARY KEY (id_plant);
19:24:33 INFO     ALTER TABLE opt_residual ADD PRIMARY KEY (id_residual);
19:24:33 INFO     ALTER TABLE opt_residual ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
19:24:33 INFO     ALTER TABLE opt_allocation ADD PRIMARY KEY (id_residual);
19:24:33 INFO     ALTER TABLE opt_allocation ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
19:24:33 INFO     SELECT AddGeometryColumn ('public', 'opt_plants','geom', 3035, 'POINT', 2);
19:24:33 INFO     
            SELECT  id_target
            FROM plants_costs_aggregated_500kw
            WHERE rank = 3
            ORDER BY cost_total ASC
            LIMIT 1
                ;
            
19:24:33 DEBUG    SELECTED PLANT = 1
19:24:33 INFO     
    INSERT INTO opt_residual AS b (
        id_residual,
        id_target,
        id_building,
        farm_used,
        length,
        rank,
        manure_available,
        crop_available,
        methane_from_manure,
        methane_from_crop,
        methane_total_produced
    )
    SELECT
        nextval('serial'),
        a.id_target,
        a.id_building,
        0,
        a.length,
        a.rank,
        CASE
            WHEN a.length > 10000 THEN 0
            ELSE a.manure
        END AS manure,
        a.crop_production,
        a.manure * 14.4,
        a.crop_production * 125.4,
        a.manure * 14.4 +  a.crop_production * 125.4
    FROM plants_costs_500kw AS a
    ;
    
19:24:34 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:34 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:34 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:34 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:34 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1
        AND farm_used > 0
        ;
    
19:24:34 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:34 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:35 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:35 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:35 ERROR    

                methane demand:     1000000
                methane produced:   1148137
                manure_available:   13015
                crop_available:     7661

                
19:24:35 DEBUG    found plant: id_target = 3
19:24:35 DEBUG    plant capacity: 500 	 iteration: 1 
	 rank: 3 	 current plant: 113
19:24:35 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:35 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:35 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:35 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:36 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 3
        AND farm_used > 0
        ;
    
19:24:36 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:36 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:36 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:36 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:36 ERROR    

                methane demand:     1000000
                methane produced:   1135336
                manure_available:   12521
                crop_available:     7615

                
19:24:36 DEBUG    found plant: id_target = 8
19:24:36 DEBUG    plant capacity: 500 	 iteration: 2 
	 rank: 3 	 current plant: 113
19:24:36 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:37 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:37 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:37 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:37 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 8
        AND farm_used > 0
        ;
    
19:24:37 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:37 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:38 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:38 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:38 ERROR    

                methane demand:     1000000
                methane produced:   1174357
                manure_available:   14328
                crop_available:     7719

                
19:24:38 DEBUG    found plant: id_target = 18
19:24:38 DEBUG    plant capacity: 500 	 iteration: 3 
	 rank: 3 	 current plant: 113
19:24:38 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:38 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:38 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:38 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:38 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 18
        AND farm_used > 0
        ;
    
19:24:38 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:38 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:39 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:39 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:39 ERROR    no more plants for the rank 3
19:24:39 DEBUG    plant capacity: 500 	 iteration: 4 
	 rank: 2 	 current plant: 113
19:24:39 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:39 ERROR    

                methane demand:     1000000
                methane produced:   1010956
                manure_available:   3423
                crop_available:     7668

                
19:24:39 DEBUG    found plant: id_target = 128
19:24:39 DEBUG    plant capacity: 500 	 iteration: 5 
	 rank: 2 	 current plant: 113
19:24:39 INFO     
        WITH
        current_plant AS (
            SELECT 128 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:39 INFO     
        WITH
        current_plant AS (
            SELECT 128 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:39 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:40 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:40 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 128
        AND farm_used > 0
        ;
    
19:24:40 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:40 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:40 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:40 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:40 ERROR    

                methane demand:     1000000
                methane produced:   1027753
                manure_available:   4898
                crop_available:     7633

                
19:24:40 DEBUG    found plant: id_target = 86
19:24:40 DEBUG    plant capacity: 500 	 iteration: 6 
	 rank: 2 	 current plant: 113
19:24:40 INFO     
        WITH
        current_plant AS (
            SELECT 86 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:41 INFO     
        WITH
        current_plant AS (
            SELECT 86 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:41 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:41 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:41 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 86
        AND farm_used > 0
        ;
    
19:24:41 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:41 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:42 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:42 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:42 ERROR    

                methane demand:     1000000
                methane produced:   1118457
                manure_available:   11183
                crop_available:     7634

                
19:24:42 DEBUG    found plant: id_target = 263
19:24:42 DEBUG    plant capacity: 500 	 iteration: 7 
	 rank: 2 	 current plant: 113
19:24:42 INFO     
        WITH
        current_plant AS (
            SELECT 263 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:42 INFO     
        WITH
        current_plant AS (
            SELECT 263 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:42 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:42 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:42 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 263
        AND farm_used > 0
        ;
    
19:24:42 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:42 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:43 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:43 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:43 ERROR    

                methane demand:     1000000
                methane produced:   1068789
                manure_available:   6456
                crop_available:     7781

                
19:24:43 DEBUG    found plant: id_target = 547
19:24:43 DEBUG    plant capacity: 500 	 iteration: 8 
	 rank: 2 	 current plant: 113
19:24:43 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:43 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:43 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:43 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:44 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 547
        AND farm_used > 0
        ;
    
19:24:44 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:44 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:44 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:44 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:44 ERROR    

                methane demand:     1000000
                methane produced:   1096656
                manure_available:   9810
                crop_available:     7618

                
19:24:44 DEBUG    found plant: id_target = 669
19:24:44 DEBUG    plant capacity: 500 	 iteration: 9 
	 rank: 2 	 current plant: 113
19:24:44 INFO     
        WITH
        current_plant AS (
            SELECT 669 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:44 INFO     
        WITH
        current_plant AS (
            SELECT 669 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:45 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:45 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:45 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 669
        AND farm_used > 0
        ;
    
19:24:45 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:45 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:46 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:46 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:46 ERROR    

                methane demand:     1000000
                methane produced:   1125067
                manure_available:   11872
                crop_available:     7608

                
19:24:46 DEBUG    found plant: id_target = 800
19:24:46 DEBUG    plant capacity: 500 	 iteration: 10 
	 rank: 2 	 current plant: 113
19:24:46 INFO     
        WITH
        current_plant AS (
            SELECT 800 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:46 INFO     
        WITH
        current_plant AS (
            SELECT 800 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:46 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:46 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:46 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 800
        AND farm_used > 0
        ;
    
19:24:46 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:46 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:47 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:47 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:47 ERROR    

                methane demand:     1000000
                methane produced:   1153618
                manure_available:   13624
                crop_available:     7634

                
19:24:47 DEBUG    found plant: id_target = 184
19:24:47 DEBUG    plant capacity: 500 	 iteration: 11 
	 rank: 2 	 current plant: 113
19:24:47 INFO     
        WITH
        current_plant AS (
            SELECT 184 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:47 INFO     
        WITH
        current_plant AS (
            SELECT 184 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:47 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:47 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:48 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 184
        AND farm_used > 0
        ;
    
19:24:48 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:48 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:48 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:48 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:48 ERROR    

                methane demand:     1000000
                methane produced:   1179689
                manure_available:   14628
                crop_available:     7727

                
19:24:48 DEBUG    found plant: id_target = 388
19:24:48 DEBUG    plant capacity: 500 	 iteration: 12 
	 rank: 2 	 current plant: 113
19:24:48 INFO     
        WITH
        current_plant AS (
            SELECT 388 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:48 INFO     
        WITH
        current_plant AS (
            SELECT 388 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:48 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:49 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:49 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 388
        AND farm_used > 0
        ;
    
19:24:49 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:49 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:49 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:49 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:49 ERROR    

                methane demand:     1000000
                methane produced:   1137941
                manure_available:   12714
                crop_available:     7614

                
19:24:49 DEBUG    found plant: id_target = 841
19:24:49 DEBUG    plant capacity: 500 	 iteration: 13 
	 rank: 2 	 current plant: 113
19:24:49 INFO     
        WITH
        current_plant AS (
            SELECT 841 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:50 INFO     
        WITH
        current_plant AS (
            SELECT 841 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:50 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:50 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:50 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 841
        AND farm_used > 0
        ;
    
19:24:50 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:50 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:51 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:51 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:51 ERROR    

                methane demand:     1000000
                methane produced:   1191325
                manure_available:   16087
                crop_available:     7652

                
19:24:51 DEBUG    found plant: id_target = 600
19:24:51 DEBUG    plant capacity: 500 	 iteration: 14 
	 rank: 2 	 current plant: 113
19:24:51 INFO     
        WITH
        current_plant AS (
            SELECT 600 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:51 INFO     
        WITH
        current_plant AS (
            SELECT 600 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:51 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:51 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:51 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 600
        AND farm_used > 0
        ;
    
19:24:51 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:51 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:52 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:52 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:52 ERROR    

                methane demand:     1000000
                methane produced:   1231662
                manure_available:   17831
                crop_available:     7774

                
19:24:52 DEBUG    found plant: id_target = 772
19:24:52 DEBUG    plant capacity: 500 	 iteration: 15 
	 rank: 2 	 current plant: 113
19:24:52 INFO     
        WITH
        current_plant AS (
            SELECT 772 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:52 INFO     
        WITH
        current_plant AS (
            SELECT 772 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:52 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:52 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:52 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 772
        AND farm_used > 0
        ;
    
19:24:52 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:53 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:53 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:53 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:53 ERROR    

                methane demand:     1000000
                methane produced:   1084287
                manure_available:   7421
                crop_available:     7794

                
19:24:53 DEBUG    found plant: id_target = 520
19:24:53 DEBUG    plant capacity: 500 	 iteration: 16 
	 rank: 2 	 current plant: 113
19:24:53 INFO     
        WITH
        current_plant AS (
            SELECT 520 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:53 INFO     
        WITH
        current_plant AS (
            SELECT 520 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:53 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:54 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:54 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 520
        AND farm_used > 0
        ;
    
19:24:54 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:54 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:54 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:54 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:54 ERROR    

                methane demand:     1000000
                methane produced:   1209465
                manure_available:   17388
                crop_available:     7648

                
19:24:54 DEBUG    found plant: id_target = 102
19:24:54 DEBUG    plant capacity: 500 	 iteration: 17 
	 rank: 2 	 current plant: 113
19:24:54 INFO     
        WITH
        current_plant AS (
            SELECT 102 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:54 INFO     
        WITH
        current_plant AS (
            SELECT 102 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:55 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:55 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:55 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 102
        AND farm_used > 0
        ;
    
19:24:55 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:55 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:55 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:55 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:56 ERROR    

                methane demand:     1000000
                methane produced:   1257308
                manure_available:   20629
                crop_available:     7657

                
19:24:56 DEBUG    found plant: id_target = 620
19:24:56 DEBUG    plant capacity: 500 	 iteration: 18 
	 rank: 2 	 current plant: 113
19:24:56 INFO     
        WITH
        current_plant AS (
            SELECT 620 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:56 INFO     
        WITH
        current_plant AS (
            SELECT 620 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:56 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:56 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:56 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 620
        AND farm_used > 0
        ;
    
19:24:56 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:56 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:57 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:57 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:57 ERROR    

                methane demand:     1000000
                methane produced:   1274089
                manure_available:   21987
                crop_available:     7635

                
19:24:57 DEBUG    found plant: id_target = 419
19:24:57 DEBUG    plant capacity: 500 	 iteration: 19 
	 rank: 2 	 current plant: 113
19:24:57 INFO     
        WITH
        current_plant AS (
            SELECT 419 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:57 INFO     
        WITH
        current_plant AS (
            SELECT 419 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:57 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:57 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:57 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 419
        AND farm_used > 0
        ;
    
19:24:57 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:57 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:58 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:58 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:58 ERROR    

                methane demand:     1000000
                methane produced:   1255726
                manure_available:   20680
                crop_available:     7638

                
19:24:58 DEBUG    found plant: id_target = 396
19:24:58 DEBUG    plant capacity: 500 	 iteration: 20 
	 rank: 2 	 current plant: 113
19:24:58 INFO     
        WITH
        current_plant AS (
            SELECT 396 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:58 INFO     
        WITH
        current_plant AS (
            SELECT 396 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:58 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:58 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:58 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 396
        AND farm_used > 0
        ;
    
19:24:58 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:24:58 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:24:59 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:24:59 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:59 ERROR    no more plants for the rank 2
19:24:59 DEBUG    plant capacity: 500 	 iteration: 21 
	 rank: 1 	 current plant: 113
19:24:59 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:24:59 ERROR    

                methane demand:     1000000
                methane produced:   1079921
                manure_available:   8747
                crop_available:     7607

                
19:24:59 DEBUG    found plant: id_target = 935
19:24:59 DEBUG    plant capacity: 500 	 iteration: 22 
	 rank: 1 	 current plant: 113
19:24:59 INFO     
        WITH
        current_plant AS (
            SELECT 935 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:24:59 INFO     
        WITH
        current_plant AS (
            SELECT 935 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:24:59 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:24:59 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:24:59 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 935
        AND farm_used > 0
        ;
    
19:24:59 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:00 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:00 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:00 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:00 ERROR    no more plants for the rank 1
19:25:00 DEBUG    plant capacity: 500 	 iteration: 23 
	 rank: 0 	 current plant: 113
19:25:00 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:00 ERROR    no more plants for the rank 3
19:25:00 DEBUG    plant capacity: 250 	 iteration: 1 
	 rank: 2 	 current plant: 113
19:25:00 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:00 ERROR    

                methane demand:     526316
                methane produced:   675241
                manure_available:   7788
                crop_available:     4490

                
19:25:00 DEBUG    found plant: id_target = 581
19:25:00 DEBUG    plant capacity: 250 	 iteration: 2 
	 rank: 2 	 current plant: 113
19:25:00 INFO     
        WITH
        current_plant AS (
            SELECT 581 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:00 INFO     
        WITH
        current_plant AS (
            SELECT 581 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:00 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:00 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:01 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 581
        AND farm_used > 0
        ;
    
19:25:01 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:01 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:01 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:01 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:01 ERROR    

                methane demand:     526316
                methane produced:   663662
                manure_available:   8134
                crop_available:     4358

                
19:25:01 DEBUG    found plant: id_target = 856
19:25:01 DEBUG    plant capacity: 250 	 iteration: 3 
	 rank: 2 	 current plant: 113
19:25:01 INFO     
        WITH
        current_plant AS (
            SELECT 856 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:01 INFO     
        WITH
        current_plant AS (
            SELECT 856 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:01 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:01 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:02 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 856
        AND farm_used > 0
        ;
    
19:25:02 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:02 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:02 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:02 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:02 ERROR    

                methane demand:     526316
                methane produced:   852483
                manure_available:   11458
                crop_available:     5482

                
19:25:02 DEBUG    found plant: id_target = 316
19:25:02 DEBUG    plant capacity: 250 	 iteration: 4 
	 rank: 2 	 current plant: 113
19:25:02 INFO     
        WITH
        current_plant AS (
            SELECT 316 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:02 INFO     
        WITH
        current_plant AS (
            SELECT 316 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:02 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:03 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:03 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 316
        AND farm_used > 0
        ;
    
19:25:03 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:03 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:03 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:03 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:03 ERROR    

                methane demand:     526316
                methane produced:   673368
                manure_available:   11538
                crop_available:     4044

                
19:25:03 DEBUG    found plant: id_target = 820
19:25:03 DEBUG    plant capacity: 250 	 iteration: 5 
	 rank: 2 	 current plant: 113
19:25:03 INFO     
        WITH
        current_plant AS (
            SELECT 820 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:03 INFO     
        WITH
        current_plant AS (
            SELECT 820 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:03 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:04 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:04 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 820
        AND farm_used > 0
        ;
    
19:25:04 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:04 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:04 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:04 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:04 ERROR    

                methane demand:     526316
                methane produced:   705193
                manure_available:   11612
                crop_available:     4290

                
19:25:04 DEBUG    found plant: id_target = 175
19:25:04 DEBUG    plant capacity: 250 	 iteration: 6 
	 rank: 2 	 current plant: 113
19:25:04 INFO     
        WITH
        current_plant AS (
            SELECT 175 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:04 INFO     
        WITH
        current_plant AS (
            SELECT 175 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:05 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:05 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:05 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 175
        AND farm_used > 0
        ;
    
19:25:05 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:05 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:05 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:05 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:05 ERROR    

                methane demand:     526316
                methane produced:   693894
                manure_available:   10268
                crop_available:     4354

                
19:25:05 DEBUG    found plant: id_target = 290
19:25:05 DEBUG    plant capacity: 250 	 iteration: 7 
	 rank: 2 	 current plant: 113
19:25:05 INFO     
        WITH
        current_plant AS (
            SELECT 290 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:05 INFO     
        WITH
        current_plant AS (
            SELECT 290 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:06 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:06 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:06 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 290
        AND farm_used > 0
        ;
    
19:25:06 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:06 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:06 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:06 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:06 ERROR    

                methane demand:     526316
                methane produced:   797499
                manure_available:   18839
                crop_available:     4196

                
19:25:06 DEBUG    found plant: id_target = 201
19:25:06 DEBUG    plant capacity: 250 	 iteration: 8 
	 rank: 2 	 current plant: 113
19:25:06 INFO     
        WITH
        current_plant AS (
            SELECT 201 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:06 INFO     
        WITH
        current_plant AS (
            SELECT 201 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:07 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:07 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:07 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 201
        AND farm_used > 0
        ;
    
19:25:07 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:07 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:07 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:07 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:07 ERROR    

                methane demand:     526316
                methane produced:   817043
                manure_available:   20595
                crop_available:     4150

                
19:25:07 DEBUG    found plant: id_target = 378
19:25:07 DEBUG    plant capacity: 250 	 iteration: 9 
	 rank: 2 	 current plant: 113
19:25:07 INFO     
        WITH
        current_plant AS (
            SELECT 378 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:08 INFO     
        WITH
        current_plant AS (
            SELECT 378 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:08 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:08 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:08 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 378
        AND farm_used > 0
        ;
    
19:25:08 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:08 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:08 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:08 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:08 ERROR    

                methane demand:     526316
                methane produced:   918862
                manure_available:   26948
                crop_available:     4232

                
19:25:08 DEBUG    found plant: id_target = 228
19:25:08 DEBUG    plant capacity: 250 	 iteration: 10 
	 rank: 2 	 current plant: 113
19:25:08 INFO     
        WITH
        current_plant AS (
            SELECT 228 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:09 INFO     
        WITH
        current_plant AS (
            SELECT 228 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:09 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:09 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:09 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 228
        AND farm_used > 0
        ;
    
19:25:09 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:09 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:09 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:09 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:09 ERROR    no more plants for the rank 2
19:25:09 DEBUG    plant capacity: 250 	 iteration: 11 
	 rank: 1 	 current plant: 113
19:25:09 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:09 ERROR    

                methane demand:     526316
                methane produced:   625198
                manure_available:   4078
                crop_available:     4517

                
19:25:09 DEBUG    found plant: id_target = 948
19:25:09 DEBUG    plant capacity: 250 	 iteration: 12 
	 rank: 1 	 current plant: 113
19:25:09 INFO     
        WITH
        current_plant AS (
            SELECT 948 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:09 INFO     
        WITH
        current_plant AS (
            SELECT 948 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:10 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:10 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:10 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 948
        AND farm_used > 0
        ;
    
19:25:10 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:10 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:10 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:10 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:10 ERROR    

                methane demand:     526316
                methane produced:   641956
                manure_available:   5753
                crop_available:     4458

                
19:25:10 DEBUG    found plant: id_target = 1174
19:25:10 DEBUG    plant capacity: 250 	 iteration: 13 
	 rank: 1 	 current plant: 113
19:25:10 INFO     
        WITH
        current_plant AS (
            SELECT 1174 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:10 INFO     
        WITH
        current_plant AS (
            SELECT 1174 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:11 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:11 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:11 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1174
        AND farm_used > 0
        ;
    
19:25:11 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:11 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:11 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:11 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:11 ERROR    

                methane demand:     526316
                methane produced:   670096
                manure_available:   7762
                crop_available:     4452

                
19:25:11 DEBUG    found plant: id_target = 1215
19:25:11 DEBUG    plant capacity: 250 	 iteration: 14 
	 rank: 1 	 current plant: 113
19:25:11 INFO     
        WITH
        current_plant AS (
            SELECT 1215 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:11 INFO     
        WITH
        current_plant AS (
            SELECT 1215 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:11 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:12 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:12 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1215
        AND farm_used > 0
        ;
    
19:25:12 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:12 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:12 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:12 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:12 ERROR    

                methane demand:     526316
                methane produced:   674129
                manure_available:   9832
                crop_available:     4246

                
19:25:12 DEBUG    found plant: id_target = 1526
19:25:12 DEBUG    plant capacity: 250 	 iteration: 15 
	 rank: 1 	 current plant: 113
19:25:12 INFO     
        WITH
        current_plant AS (
            SELECT 1526 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:12 INFO     
        WITH
        current_plant AS (
            SELECT 1526 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:12 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:12 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:13 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1526
        AND farm_used > 0
        ;
    
19:25:13 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:13 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:13 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:13 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:13 ERROR    

                methane demand:     526316
                methane produced:   789828
                manure_available:   16005
                crop_available:     4460

                
19:25:13 DEBUG    found plant: id_target = 1202
19:25:13 DEBUG    plant capacity: 250 	 iteration: 16 
	 rank: 1 	 current plant: 113
19:25:13 INFO     
        WITH
        current_plant AS (
            SELECT 1202 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:13 INFO     
        WITH
        current_plant AS (
            SELECT 1202 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:13 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:13 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:14 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1202
        AND farm_used > 0
        ;
    
19:25:14 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:14 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:14 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:14 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:14 ERROR    no more plants for the rank 1
19:25:14 DEBUG    plant capacity: 250 	 iteration: 17 
	 rank: 0 	 current plant: 113
19:25:14 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:14 ERROR    no more plants for the rank 3
19:25:14 DEBUG    plant capacity: 100 	 iteration: 1 
	 rank: 2 	 current plant: 113
19:25:14 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:14 ERROR    

                methane demand:     216216
                methane produced:   272170
                manure_available:   1550
                crop_available:     1992

                
19:25:14 DEBUG    found plant: id_target = 538
19:25:14 DEBUG    plant capacity: 100 	 iteration: 2 
	 rank: 2 	 current plant: 113
19:25:14 INFO     
        WITH
        current_plant AS (
            SELECT 538 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:14 INFO     
        WITH
        current_plant AS (
            SELECT 538 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:14 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:14 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:14 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 538
        AND farm_used > 0
        ;
    
19:25:15 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:15 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:15 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:15 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:15 ERROR    

                methane demand:     216216
                methane produced:   297558
                manure_available:   3288
                crop_available:     1995

                
19:25:15 DEBUG    found plant: id_target = 541
19:25:15 DEBUG    plant capacity: 100 	 iteration: 3 
	 rank: 2 	 current plant: 113
19:25:15 INFO     
        WITH
        current_plant AS (
            SELECT 541 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:15 INFO     
        WITH
        current_plant AS (
            SELECT 541 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:15 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:15 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:15 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 541
        AND farm_used > 0
        ;
    
19:25:15 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:16 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:16 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:16 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:16 ERROR    

                methane demand:     216216
                methane produced:   354756
                manure_available:   6735
                crop_available:     2055

                
19:25:16 DEBUG    found plant: id_target = 79
19:25:16 DEBUG    plant capacity: 100 	 iteration: 4 
	 rank: 2 	 current plant: 113
19:25:16 INFO     
        WITH
        current_plant AS (
            SELECT 79 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:16 INFO     
        WITH
        current_plant AS (
            SELECT 79 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:16 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:16 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:16 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 79
        AND farm_used > 0
        ;
    
19:25:16 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:16 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:17 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:17 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:17 ERROR    

                methane demand:     216216
                methane produced:   331684
                manure_available:   8332
                crop_available:     1688

                
19:25:17 DEBUG    found plant: id_target = 157
19:25:17 DEBUG    plant capacity: 100 	 iteration: 5 
	 rank: 2 	 current plant: 113
19:25:17 INFO     
        WITH
        current_plant AS (
            SELECT 157 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:17 INFO     
        WITH
        current_plant AS (
            SELECT 157 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:17 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:17 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:17 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 157
        AND farm_used > 0
        ;
    
19:25:17 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:17 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:18 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:18 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:18 ERROR    

                methane demand:     216216
                methane produced:   332640
                manure_available:   8011
                crop_available:     1732

                
19:25:18 DEBUG    found plant: id_target = 607
19:25:18 DEBUG    plant capacity: 100 	 iteration: 6 
	 rank: 2 	 current plant: 113
19:25:18 INFO     
        WITH
        current_plant AS (
            SELECT 607 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:18 INFO     
        WITH
        current_plant AS (
            SELECT 607 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:18 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:18 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:18 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 607
        AND farm_used > 0
        ;
    
19:25:18 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:18 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:19 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:19 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:19 ERROR    

                methane demand:     216216
                methane produced:   352880
                manure_available:   8400
                crop_available:     1849

                
19:25:19 DEBUG    found plant: id_target = 701
19:25:19 DEBUG    plant capacity: 100 	 iteration: 7 
	 rank: 2 	 current plant: 113
19:25:19 INFO     
        WITH
        current_plant AS (
            SELECT 701 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:19 INFO     
        WITH
        current_plant AS (
            SELECT 701 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:19 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:19 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:19 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 701
        AND farm_used > 0
        ;
    
19:25:19 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:19 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:19 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:20 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:20 ERROR    

                methane demand:     216216
                methane produced:   387996
                manure_available:   10035
                crop_available:     1941

                
19:25:20 DEBUG    found plant: id_target = 838
19:25:20 DEBUG    plant capacity: 100 	 iteration: 8 
	 rank: 2 	 current plant: 113
19:25:20 INFO     
        WITH
        current_plant AS (
            SELECT 838 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:20 INFO     
        WITH
        current_plant AS (
            SELECT 838 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:20 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:20 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:20 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 838
        AND farm_used > 0
        ;
    
19:25:20 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:20 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:20 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:20 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:20 ERROR    

                methane demand:     216216
                methane produced:   420702
                manure_available:   14605
                crop_available:     1677

                
19:25:20 DEBUG    found plant: id_target = 339
19:25:20 DEBUG    plant capacity: 100 	 iteration: 9 
	 rank: 2 	 current plant: 113
19:25:20 INFO     
        WITH
        current_plant AS (
            SELECT 339 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:21 INFO     
        WITH
        current_plant AS (
            SELECT 339 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:21 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:21 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:21 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 339
        AND farm_used > 0
        ;
    
19:25:21 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:21 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:21 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:21 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:21 ERROR    

                methane demand:     216216
                methane produced:   394307
                manure_available:   11041
                crop_available:     1876

                
19:25:21 DEBUG    found plant: id_target = 853
19:25:21 DEBUG    plant capacity: 100 	 iteration: 10 
	 rank: 2 	 current plant: 113
19:25:21 INFO     
        WITH
        current_plant AS (
            SELECT 853 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:21 INFO     
        WITH
        current_plant AS (
            SELECT 853 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:22 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:22 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:22 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 853
        AND farm_used > 0
        ;
    
19:25:22 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:22 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:22 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:22 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:22 ERROR    

                methane demand:     216216
                methane produced:   387363
                manure_available:   11379
                crop_available:     1782

                
19:25:22 DEBUG    found plant: id_target = 808
19:25:22 DEBUG    plant capacity: 100 	 iteration: 11 
	 rank: 2 	 current plant: 113
19:25:22 INFO     
        WITH
        current_plant AS (
            SELECT 808 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:22 INFO     
        WITH
        current_plant AS (
            SELECT 808 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:22 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:23 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:23 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 808
        AND farm_used > 0
        ;
    
19:25:23 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:23 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:23 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:23 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:23 ERROR    

                methane demand:     216216
                methane produced:   379107
                manure_available:   11911
                crop_available:     1655

                
19:25:23 DEBUG    found plant: id_target = 446
19:25:23 DEBUG    plant capacity: 100 	 iteration: 12 
	 rank: 2 	 current plant: 113
19:25:23 INFO     
        WITH
        current_plant AS (
            SELECT 446 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:23 INFO     
        WITH
        current_plant AS (
            SELECT 446 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:23 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:24 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:24 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 446
        AND farm_used > 0
        ;
    
19:25:24 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:24 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:24 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:24 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:24 ERROR    no more plants for the rank 2
19:25:24 DEBUG    plant capacity: 100 	 iteration: 13 
	 rank: 1 	 current plant: 113
19:25:24 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:24 ERROR    

                methane demand:     216216
                methane produced:   294569
                manure_available:   4156
                crop_available:     1871

                
19:25:24 DEBUG    found plant: id_target = 1446
19:25:24 DEBUG    plant capacity: 100 	 iteration: 14 
	 rank: 1 	 current plant: 113
19:25:24 INFO     
        WITH
        current_plant AS (
            SELECT 1446 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:24 INFO     
        WITH
        current_plant AS (
            SELECT 1446 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:24 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:25 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1446
        AND farm_used > 0
        ;
    
19:25:25 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:25 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:25 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:25 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:25 ERROR    

                methane demand:     216216
                methane produced:   294869
                manure_available:   6160
                crop_available:     1643

                
19:25:25 DEBUG    found plant: id_target = 1723
19:25:25 DEBUG    plant capacity: 100 	 iteration: 15 
	 rank: 1 	 current plant: 113
19:25:25 INFO     
        WITH
        current_plant AS (
            SELECT 1723 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:25 INFO     
        WITH
        current_plant AS (
            SELECT 1723 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:25 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:25 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:25 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1723
        AND farm_used > 0
        ;
    
19:25:25 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:26 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:26 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:26 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:26 ERROR    

                methane demand:     216216
                methane produced:   494791
                manure_available:   15200
                crop_available:     2200

                
19:25:26 DEBUG    found plant: id_target = 1583
19:25:26 DEBUG    plant capacity: 100 	 iteration: 16 
	 rank: 1 	 current plant: 113
19:25:26 INFO     
        WITH
        current_plant AS (
            SELECT 1583 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:26 INFO     
        WITH
        current_plant AS (
            SELECT 1583 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:26 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:26 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1583
        AND farm_used > 0
        ;
    
19:25:26 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:26 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:27 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:27 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:27 ERROR    

                methane demand:     216216
                methane produced:   369842
                manure_available:   9262
                crop_available:     1885

                
19:25:27 DEBUG    found plant: id_target = 944
19:25:27 DEBUG    plant capacity: 100 	 iteration: 17 
	 rank: 1 	 current plant: 113
19:25:27 INFO     
        WITH
        current_plant AS (
            SELECT 944 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:27 INFO     
        WITH
        current_plant AS (
            SELECT 944 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:27 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:27 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 944
        AND farm_used > 0
        ;
    
19:25:27 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:27 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:28 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:28 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:28 ERROR    

                methane demand:     216216
                methane produced:   510252
                manure_available:   20057
                crop_available:     1765

                
19:25:28 DEBUG    found plant: id_target = 1048
19:25:28 DEBUG    plant capacity: 100 	 iteration: 18 
	 rank: 1 	 current plant: 113
19:25:28 INFO     
        WITH
        current_plant AS (
            SELECT 1048 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
19:25:28 INFO     
        WITH
        current_plant AS (
            SELECT 1048 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
19:25:28 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
19:25:28 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
19:25:28 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1048
        AND farm_used > 0
        ;
    
19:25:28 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
19:25:28 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
19:25:28 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
19:25:28 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
19:25:29 ERROR    no more plants for the rank 1
19:25:29 DEBUG    plant capacity: 100 	 iteration: 19 
	 rank: 0 	 current plant: 113
19:25:29 INFO     
        DROP TABLE IF EXISTS opt_plants_all CASCADE;
CREATE TABLE opt_plants_all AS
        SELECT *
        FROM opt_plants
        ;
    
19:25:29 INFO     
        DROP TABLE IF EXISTS opt_allocation_all CASCADE;
CREATE TABLE opt_allocation_all AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM opt_allocation AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
19:25:29 INFO     
            INSERT INTO opt_allocation_all (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
19:25:29 INFO     
            INSERT INTO opt_allocation_all (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
19:25:29 INFO     
            INSERT INTO opt_allocation_all (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
19:25:29 INFO     
            INSERT INTO opt_allocation_all (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
19:25:30 INFO     
            INSERT INTO opt_allocation_all (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
