16:43:49 WARNING  is when this event was logged.
16:43:49 INFO     DROP TABLE IF EXISTS optimal_resources_allocated_all;
CREATE TABLE optimal_resources_allocated_all (
        id_order SERIAL PRIMARY KEY,
        id_target integer,
        id_building integer,
        plant_capacity integer,
        length double precision,
        rank integer,
        manure_available double precision,
        manure_required numeric,
        manure_used double precision,
        manure_residual double precision,
        manure_methane_produced double precision,
        manure_methane_residual double precision,
        crop_available double precision,
        crop_additional double precision,
        crop_required double precision,
        crop_used double precision,
        methane_from_manure double precision,
        methane_from_crop double precision,
        methane_total_produced double precision,
        cost_harvest double precision,
        cost_ensiling double precision,
        cost_manure double precision,
        cost_total double precision,
        only_manure integer,
        ratio_manure double precision,
        ratio_crop double precision
);
16:43:49 INFO     DROP TABLE IF EXISTS optimal_resources_residual_all;
CREATE TABLE optimal_resources_residual_all (
        id_order SERIAL PRIMARY KEY,
        id_target integer,
        id_building integer,
        plant_capacity integer,
        length double precision,
        rank integer,
        manure_available double precision,
        manure_required numeric,
        manure_used double precision,
        manure_residual double precision,
        manure_methane_produced double precision,
        manure_methane_residual double precision,
        crop_available double precision,
        crop_additional double precision,
        crop_required double precision,
        crop_used double precision,
        methane_from_manure double precision,
        methane_from_crop double precision,
        methane_total_produced double precision,
        cost_harvest double precision,
        cost_ensiling double precision,
        cost_manure double precision,
        cost_total double precision,
        only_manure integer,
        ratio_manure double precision,
        ratio_crop double precision
);
16:43:49 INFO     DROP TABLE IF EXISTS optimal_plant_links_all;
CREATE TABLE optimal_plant_links_all (
        id_order SERIAL PRIMARY KEY,
        id_target integer,
        id_building integer,
        plant_capacity integer,
        length double precision,
        rank integer,
        manure_available double precision,
        manure_required numeric,
        manure_used double precision,
        manure_residual double precision,
        manure_methane_produced double precision,
        manure_methane_residual double precision,
        crop_available double precision,
        crop_additional double precision,
        crop_required double precision,
        crop_used double precision,
        methane_from_manure double precision,
        methane_from_crop double precision,
        methane_total_produced double precision,
        cost_harvest double precision,
        cost_ensiling double precision,
        cost_manure double precision,
        cost_total double precision,
        only_manure integer,
        ratio_manure double precision,
        ratio_crop double precision
);
16:43:49 INFO     DROP TABLE IF EXISTS optimal_resources_residual_aggr_all;
CREATE TABLE optimal_resources_residual_aggr_all (
        id_order SERIAL PRIMARY KEY,
        id_target integer,
        id_building integer,
        plant_capacity integer,
        length double precision,
        rank integer,
        manure_available double precision,
        manure_required numeric,
        manure_used double precision,
        manure_residual double precision,
        manure_methane_produced double precision,
        manure_methane_residual double precision,
        crop_available double precision,
        crop_additional double precision,
        crop_required double precision,
        crop_used double precision,
        methane_from_manure double precision,
        methane_from_crop double precision,
        methane_total_produced double precision,
        cost_harvest double precision,
        cost_ensiling double precision,
        cost_manure double precision,
        cost_total double precision,
        only_manure integer,
        ratio_manure double precision,
        ratio_crop double precision
);
16:43:49 INFO     DROP TABLE IF EXISTS optimal_plant_location_all;
CREATE TABLE optimal_plant_location_all (
        id_order SERIAL PRIMARY KEY,
        id_target integer,
        id_building integer,
        plant_capacity integer,
        length double precision,
        rank integer,
        manure_available double precision,
        manure_required numeric,
        manure_used double precision,
        manure_residual double precision,
        manure_methane_produced double precision,
        manure_methane_residual double precision,
        crop_available double precision,
        crop_additional double precision,
        crop_required double precision,
        crop_used double precision,
        methane_from_manure double precision,
        methane_from_crop double precision,
        methane_total_produced double precision,
        cost_harvest double precision,
        cost_ensiling double precision,
        cost_manure double precision,
        cost_total double precision,
        only_manure integer,
        ratio_manure double precision,
        ratio_crop double precision
);
16:43:49 INFO     SELECT AddGeometryColumn ('public', 'optimal_plant_location_all','geom', 3035, 'POINT', 2);
16:43:49 INFO     SELECT AddGeometryColumn ('public', 'optimal_resources_residual_aggr_all','geom', 3035, 'POINT', 2);
16:43:49 INFO     
    INSERT INTO optimal_resources_residual_all AS b (
        id_target,
        id_building,
        length,
        rank,
        manure_available,
        crop_available,
        cost_harvest,
        cost_ensiling,
        cost_manure,
        cost_total,
        only_manure
    )
    SELECT
        a.id_target,
        a.id_building,
        a.length,
        a.rank,
        a.manure,
        a.crop_production,
        a.cost_harvest,
        a.cost_ensiling,
        a.cost_manure,
        a.cost_total,
        0
    FROM plants_costs_500kw AS a
    ;
    
16:43:50 INFO     
        UPDATE optimal_resources_residual_all
        SET manure_available = 0
        WHERE length > 10000
        ;
    
16:43:50 INFO     
        ALTER TABLE optimal_resources_residual_aggr_all
        ADD CONSTRAINT id_target
        UNIQUE (id_target)
        ;
    
16:43:50 ERROR    
        ALTER TABLE optimal_resources_residual_aggr_all
        ADD CONSTRAINT id_target
        UNIQUE (id_target)
        ;
    
16:43:50 INFO     
        INSERT INTO optimal_resources_residual_aggr_all (id_target)
        SELECT DISTINCT (id_target)
        FROM plants_costs_500kw
        ;
    
16:43:50 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:51 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        AND id_target = 113
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:51 INFO     found plant 
16:43:51 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        AND id_target = 113
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:51 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:51 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:51 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:51 DEBUG    plant capacity: 500 	 iteration: 1 	 rank: 3
16:43:51 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:51 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:51 INFO     found plant 
16:43:51 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:51 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:51 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:51 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:52 DEBUG    plant capacity: 500 	 iteration: 2 	 rank: 3
16:43:52 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:52 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:52 INFO     found plant 
16:43:52 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:52 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:52 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:52 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:52 DEBUG    plant capacity: 500 	 iteration: 3 	 rank: 3
16:43:52 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:52 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:52 INFO     found plant 
16:43:52 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:52 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:53 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:53 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:53 DEBUG    plant capacity: 500 	 iteration: 4 	 rank: 3
16:43:53 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:53 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:53 ERROR    no more plants for the rank 3
16:43:53 DEBUG    plant capacity: 500 	 iteration: 5 	 rank: 2
16:43:53 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:53 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:53 INFO     found plant 
16:43:53 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:53 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:53 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:53 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:54 DEBUG    plant capacity: 500 	 iteration: 6 	 rank: 2
16:43:54 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:54 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:54 INFO     found plant 
16:43:54 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:54 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:54 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:54 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:54 DEBUG    plant capacity: 500 	 iteration: 7 	 rank: 2
16:43:54 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:54 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:54 INFO     found plant 
16:43:54 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:54 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:55 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:55 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:55 DEBUG    plant capacity: 500 	 iteration: 8 	 rank: 2
16:43:55 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:55 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:55 INFO     found plant 
16:43:55 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:55 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:55 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:55 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:55 DEBUG    plant capacity: 500 	 iteration: 9 	 rank: 2
16:43:55 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:56 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:56 INFO     found plant 
16:43:56 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:56 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:56 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:56 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:56 DEBUG    plant capacity: 500 	 iteration: 10 	 rank: 2
16:43:56 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:56 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:56 INFO     found plant 
16:43:56 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:56 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:56 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:56 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:57 DEBUG    plant capacity: 500 	 iteration: 11 	 rank: 2
16:43:57 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:57 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:57 INFO     found plant 
16:43:57 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:57 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:57 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:57 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:57 DEBUG    plant capacity: 500 	 iteration: 12 	 rank: 2
16:43:57 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:57 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:57 INFO     found plant 
16:43:57 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:57 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:58 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:58 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:58 DEBUG    plant capacity: 500 	 iteration: 13 	 rank: 2
16:43:58 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:58 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:58 INFO     found plant 
16:43:58 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:58 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:58 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:58 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:59 DEBUG    plant capacity: 500 	 iteration: 14 	 rank: 2
16:43:59 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:59 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:59 INFO     found plant 
16:43:59 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:59 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:43:59 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:43:59 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:43:59 DEBUG    plant capacity: 500 	 iteration: 15 	 rank: 2
16:43:59 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:43:59 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:43:59 INFO     found plant 
16:43:59 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:43:59 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:00 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:00 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:00 DEBUG    plant capacity: 500 	 iteration: 16 	 rank: 2
16:44:00 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:00 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:00 INFO     found plant 
16:44:00 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:00 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:00 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:00 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:01 DEBUG    plant capacity: 500 	 iteration: 17 	 rank: 2
16:44:01 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:01 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:01 INFO     found plant 
16:44:01 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:01 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:01 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:01 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:01 DEBUG    plant capacity: 500 	 iteration: 18 	 rank: 2
16:44:01 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:01 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:01 ERROR    no more plants for the rank 2
16:44:01 DEBUG    plant capacity: 500 	 iteration: 19 	 rank: 1
16:44:01 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:02 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:02 INFO     found plant 
16:44:02 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:02 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:02 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:02 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:02 DEBUG    plant capacity: 500 	 iteration: 20 	 rank: 1
16:44:02 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:02 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:02 INFO     found plant 
16:44:02 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:02 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:02 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:02 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:03 DEBUG    plant capacity: 500 	 iteration: 21 	 rank: 1
16:44:03 INFO     
        WITH
        parameters AS (
            SELECT
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:03 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                500,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 1000000
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:03 ERROR    no more plants for the rank 1
16:44:03 ERROR    __________CHANGED PLANT CAPACITY HERE_________
16:44:03 DEBUG    plant capacity: 500 	 iteration: 22 	 rank: 0
16:44:03 INFO     
        DROP TABLE IF EXISTS optimal_plant_map_all;
CREATE TABLE optimal_plant_map_all AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM optimal_plant_links_all AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
16:44:04 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:04 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:05 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:07 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_2000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:07 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:07 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        AND id_target = 113
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:07 ERROR    no more plants for the rank 3
16:44:07 DEBUG    plant capacity: 250 	 iteration: 1 	 rank: 2
16:44:07 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:08 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:08 INFO     found plant 
16:44:08 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:08 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:08 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:08 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:08 DEBUG    plant capacity: 250 	 iteration: 2 	 rank: 2
16:44:08 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:08 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:08 INFO     found plant 
16:44:08 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:08 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:08 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:08 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:09 DEBUG    plant capacity: 250 	 iteration: 3 	 rank: 2
16:44:09 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:09 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:09 INFO     found plant 
16:44:09 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:09 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:09 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:09 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:09 DEBUG    plant capacity: 250 	 iteration: 4 	 rank: 2
16:44:09 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:10 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:10 INFO     found plant 
16:44:10 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:10 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:10 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:10 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:10 DEBUG    plant capacity: 250 	 iteration: 5 	 rank: 2
16:44:10 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:10 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:10 INFO     found plant 
16:44:10 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:10 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:10 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:10 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:11 DEBUG    plant capacity: 250 	 iteration: 6 	 rank: 2
16:44:11 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:11 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:11 INFO     found plant 
16:44:11 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:11 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:11 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:11 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:11 DEBUG    plant capacity: 250 	 iteration: 7 	 rank: 2
16:44:11 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:11 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:11 INFO     found plant 
16:44:11 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:11 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:12 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:12 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:12 DEBUG    plant capacity: 250 	 iteration: 8 	 rank: 2
16:44:12 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:12 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:12 INFO     found plant 
16:44:12 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:12 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:12 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:12 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:13 DEBUG    plant capacity: 250 	 iteration: 9 	 rank: 2
16:44:13 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:13 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:13 INFO     found plant 
16:44:13 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:13 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:13 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:13 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:13 DEBUG    plant capacity: 250 	 iteration: 10 	 rank: 2
16:44:13 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:13 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:13 INFO     found plant 
16:44:13 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:13 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:14 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:14 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:14 DEBUG    plant capacity: 250 	 iteration: 11 	 rank: 2
16:44:14 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:14 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:14 INFO     found plant 
16:44:14 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:14 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:14 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:14 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:15 DEBUG    plant capacity: 250 	 iteration: 12 	 rank: 2
16:44:15 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:15 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:15 INFO     found plant 
16:44:15 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:15 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:15 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:15 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:15 DEBUG    plant capacity: 250 	 iteration: 13 	 rank: 2
16:44:15 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:15 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:15 INFO     found plant 
16:44:15 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:15 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:15 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:16 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:16 DEBUG    plant capacity: 250 	 iteration: 14 	 rank: 2
16:44:16 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:16 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:16 ERROR    no more plants for the rank 2
16:44:16 DEBUG    plant capacity: 250 	 iteration: 15 	 rank: 1
16:44:16 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:16 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:16 INFO     found plant 
16:44:16 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:16 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:16 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:16 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:17 DEBUG    plant capacity: 250 	 iteration: 16 	 rank: 1
16:44:17 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:17 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:17 INFO     found plant 
16:44:17 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:17 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:17 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:17 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:17 DEBUG    plant capacity: 250 	 iteration: 17 	 rank: 1
16:44:17 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:17 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:17 INFO     found plant 
16:44:17 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:17 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:17 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:18 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:18 DEBUG    plant capacity: 250 	 iteration: 18 	 rank: 1
16:44:18 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:18 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:18 INFO     found plant 
16:44:18 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:18 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:18 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:18 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:18 DEBUG    plant capacity: 250 	 iteration: 19 	 rank: 1
16:44:18 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:18 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:18 INFO     found plant 
16:44:18 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:18 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:19 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:19 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:19 DEBUG    plant capacity: 250 	 iteration: 20 	 rank: 1
16:44:19 INFO     
        WITH
        parameters AS (
            SELECT
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:19 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                250,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 526316
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:19 ERROR    no more plants for the rank 1
16:44:19 ERROR    __________CHANGED PLANT CAPACITY HERE_________
16:44:19 DEBUG    plant capacity: 250 	 iteration: 21 	 rank: 0
16:44:19 INFO     
        DROP TABLE IF EXISTS optimal_plant_map_all;
CREATE TABLE optimal_plant_map_all AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM optimal_plant_links_all AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
16:44:20 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:20 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:21 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:23 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_2000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:23 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:23 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        AND id_target = 113
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:23 ERROR    no more plants for the rank 3
16:44:23 DEBUG    plant capacity: 100 	 iteration: 1 	 rank: 2
16:44:23 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:24 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:24 INFO     found plant 
16:44:24 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:24 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:24 DEBUG    plant capacity: 100 	 iteration: 2 	 rank: 2
16:44:24 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:24 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:24 INFO     found plant 
16:44:24 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:24 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:25 DEBUG    plant capacity: 100 	 iteration: 3 	 rank: 2
16:44:25 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:25 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:25 INFO     found plant 
16:44:25 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:25 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:25 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:25 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:25 DEBUG    plant capacity: 100 	 iteration: 4 	 rank: 2
16:44:25 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:25 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:25 INFO     found plant 
16:44:25 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:25 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:26 DEBUG    plant capacity: 100 	 iteration: 5 	 rank: 2
16:44:26 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:26 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:26 INFO     found plant 
16:44:26 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:26 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:26 DEBUG    plant capacity: 100 	 iteration: 6 	 rank: 2
16:44:26 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:27 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:27 INFO     found plant 
16:44:27 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:27 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:27 DEBUG    plant capacity: 100 	 iteration: 7 	 rank: 2
16:44:27 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:27 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:27 INFO     found plant 
16:44:27 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:27 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:28 DEBUG    plant capacity: 100 	 iteration: 8 	 rank: 2
16:44:28 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:28 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:28 INFO     found plant 
16:44:28 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:28 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:28 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:28 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:28 DEBUG    plant capacity: 100 	 iteration: 9 	 rank: 2
16:44:28 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:28 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:28 INFO     found plant 
16:44:28 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:28 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:29 DEBUG    plant capacity: 100 	 iteration: 10 	 rank: 2
16:44:29 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:29 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:29 INFO     found plant 
16:44:29 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:29 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:30 DEBUG    plant capacity: 100 	 iteration: 11 	 rank: 2
16:44:30 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:30 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:30 ERROR    no more plants for the rank 2
16:44:30 DEBUG    plant capacity: 100 	 iteration: 12 	 rank: 1
16:44:30 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:30 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:30 INFO     found plant 
16:44:30 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:30 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:30 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:30 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:30 DEBUG    plant capacity: 100 	 iteration: 13 	 rank: 1
16:44:30 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:31 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:31 INFO     found plant 
16:44:31 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:31 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:31 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:31 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:31 DEBUG    plant capacity: 100 	 iteration: 14 	 rank: 1
16:44:31 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:31 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:31 INFO     found plant 
16:44:31 INFO     
            INSERT INTO optimal_plant_location_all (
                
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                plant_capacity,
                ratio_manure,
                ratio_crop)
    		
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
                ;
        
16:44:31 INFO     
        WITH
        last_record AS (
            SELECT id_target, manure_used, crop_used
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT a.id_target, a.manure_available, a.length, b.manure_used,
                SUM (a.manure_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f
            WHERE manure_aggregated  <= manure_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure AS (
            SELECT f.id_target,  f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS manure_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 10000)
                ) AS f, manure_columns AS g
            WHERE f.id_target = g.id_target AND f.manure_available > 0 AND f.manure_row <= g.manure_row_1 + 1-- grab the next value of the sequence
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT a.id_target, a.crop_available, a.length, b.crop_used,
                SUM (a.crop_available) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row_1
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f
            WHERE crop_aggregated  <= crop_used
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT f.id_target, f.id_building, f.length, f.rank, f.manure_available, f.crop_available, 0 AS only_manure
            FROM (
                SELECT a.*,
                row_number () OVER (ORDER BY a.id_target, a.length ASC) AS crop_row
                FROM optimal_resources_residual_all AS a, last_record AS b
                WHERE a.id_target = b.id_target and (a.length < 50000)
                ) AS f, crop_columns AS g
            WHERE f.id_target = g.id_target AND f.crop_available > 0 AND f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_target, (a.id_building), a.length, a.rank, a.manure_available AS manure_used, a.crop_available AS crop_used, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
            SELECT
                b.id_target, b.id_building, b.length, b.rank,
                a.manure_available AS manure_used, b.crop_available AS crop_used,
                 b.only_manure
            FROM crop AS b
            LEFT JOIN manure AS a ON a.id_target = b.id_target AND a.id_building = b.id_building
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),

        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_resources_residual_all AS a, join_farms AS b
            WHERE  a.id_target = b.id_target and a.id_building = b.id_building
        )
        INSERT INTO optimal_plant_links_all (
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    )
        SELECT  
            id_target, id_building, length,
            manure_used, crop_used,
            cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure
    
        FROM cost_total

            ;
    
16:44:31 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        )
        INSERT INTO optimal_resources_allocated_all
        SELECT a.*
        FROM optimal_resources_residual_all AS a, optimal_plant_links_all AS b, current_plant AS c
        WHERE a.id_building = b.id_building AND b.id_target = c.id_target AND a.id_target = c.id_target
        ;
    
16:44:31 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_all
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_resources_residual_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_all AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length, b.manure_used,
                a.manure_available - b.manure_used AS  manure_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length, b.crop_used,
                a.crop_available - b.crop_used AS  crop_available
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (COALESCE(c.crop_used,0) * 5) AS cost_harvest,
                (COALESCE(c.crop_used,0) * 1 * c.length / 1000) AS cost_ensiling,
                (COALESCE(c.manure_used,0) * (2 + (0.5  * (c.length / 1000))) ) AS cost_manure
            FROM manure AS a, crop AS b, links AS c
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure_available, a.manure_used, b.crop_available, b.crop_used, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_resources_residual_all AS a
        SET
            manure_available = b.manure_available,
            manure_used = b.manure_used,
            crop_available = b.crop_available,
            crop_used = b.crop_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
16:44:32 DEBUG    plant capacity: 100 	 iteration: 15 	 rank: 1
16:44:32 INFO     
        WITH
        parameters AS (
            SELECT
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
        ),
        available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available
            FROM optimal_resources_residual_all
            GROUP BY id_target
            ORDER BY id_target
        ),
        required AS (
            SELECT a.id_target, a.manure_available, b.manure_required,
    		    CASE
        			WHEN a.manure_available > b.manure_required THEN b.manure_required
        			ELSE a.manure_available
                END AS manure_used,
                a.manure_available - b.manure_required AS manure_residual,
                a.crop_available,
                b.crop_required,
                a.crop_available - b.crop_required AS crop_demand
            FROM available AS a, parameters AS b
        ),
        manure_methane AS (
            SELECT id_target, manure_available, manure_required, manure_used, manure_residual,
                manure_used * 14.4 AS manure_methane_produced,
                CASE
        			WHEN manure_residual < 0 THEN (manure_available * 14.4 - manure_required * 14.4) * -1
        			ELSE 0
                END AS manure_methane_residual
            FROM required
        ),
        crop_methane_missing AS (
            SELECT a.id_target, b.crop_available, b.crop_required,
        		a.manure_methane_residual * 14.4 AS methane_lacking_from_manure,
        		a.manure_methane_residual / 125.4 AS crop_additional
            FROM manure_methane AS a, required AS b
            WHERE a.id_target = b.id_target
        ),
        crop_methane AS (
            SELECT a.*,
        		b.crop_available, b.crop_additional, b.crop_required,
        		b.crop_required + b.crop_additional AS crop_used
            FROM manure_methane AS a, crop_methane_missing AS B
            WHERE a.id_target = b.id_target
        ),
        total_methane AS (
            SELECT *,
        		manure_used * 14.4 AS methane_from_manure,
        		crop_used * 125.4 AS methane_from_crop,
        		manure_used * 14.4 + crop_used * 125.4 AS methane_total_produced
            FROM crop_methane
        ),
        total_cost AS (
            SELECT id_target,
    			SUM(cost_harvest) AS cost_harvest,
                SUM(cost_ensiling) AS cost_ensiling,
                SUM(cost_manure) AS cost_manure,
                SUM(cost_total) AS cost_total
            FROM optimal_resources_residual_all
            GROUP BY id_target
        ),
        final AS (
            SELECT a.*, c.rank, b.cost_harvest, b.cost_ensiling, b.cost_manure, b.cost_total, c.geom
            FROM total_methane AS a
            LEFT JOIN total_cost AS b ON a.id_target = b.id_target
            LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        )
            UPDATE optimal_resources_residual_aggr_all AS b
            SET id_target = a.id_target,
                rank = a.rank,
                manure_available = a.manure_available,
                manure_required = a.manure_required,
                manure_used = a.manure_used,
                manure_residual = a.manure_residual,
                manure_methane_produced = a.manure_methane_produced,
                manure_methane_residual = a.manure_methane_residual,
                crop_available = a.crop_available,
                crop_additional = a.crop_additional,
                crop_required = a.crop_required,
                crop_used = a.crop_used,
                methane_from_manure = a.methane_from_manure,
                methane_from_crop = a.methane_from_crop,
                methane_total_produced = a.methane_total_produced,
                cost_harvest = a.cost_harvest,
                cost_ensiling = a.cost_ensiling,
                cost_manure = a.cost_manure,
                cost_total = a.cost_total,
                geom = a.geom
        FROM final AS a
        WHERE a.id_target = b.id_target
            ;
    
16:44:32 INFO     
		SELECT  
            id_target,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            rank,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            geom
    ,
                100,
                ROUND((cast(methane_from_manure / methane_total_produced  AS numeric)),2),
                ROUND((cast(methane_from_crop / methane_total_produced AS numeric)),2)
        FROM optimal_resources_residual_aggr_all
        WHERE methane_total_produced * 1.01 >= 216216
        AND crop_available >= crop_required
        AND cost_total > 0
        AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_all  -- avoid getting duplicates
        )
        
        ORDER BY cost_total ASC
        LIMIT 1
            ;
        
16:44:32 ERROR    no more plants for the rank 1
16:44:32 ERROR    __________CHANGED PLANT CAPACITY HERE_________
16:44:32 DEBUG    plant capacity: 100 	 iteration: 16 	 rank: 0
16:44:32 INFO     
        DROP TABLE IF EXISTS optimal_plant_map_all;
CREATE TABLE optimal_plant_map_all AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM optimal_plant_links_all AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
16:44:32 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:33 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:34 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:44:35 INFO     
            INSERT INTO optimal_plant_map_all (
            id_order,
            id_target,
            id_building,
            plant_capacity,
            length,
            rank,
            manure_available,
            manure_required,
            manure_used,
            manure_residual,
            manure_methane_produced,
            manure_methane_residual,
            crop_available,
            crop_additional,
            crop_required,
            crop_used,
            methane_from_manure,
            methane_from_crop,
            methane_total_produced,
            cost_harvest,
            cost_ensiling,
            cost_manure,
            cost_total,
            only_manure,
            ratio_manure,
            ratio_crop,
            farms,
            route
    
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_all AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_2000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
