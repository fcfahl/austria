19:08:53 WARNING  is when this event was logged.
19:08:53 INFO     
    DROP TABLE IF EXISTS optimal_plant_resources_residual_750kw;
CREATE TABLE optimal_plant_resources_residual_750kw AS
    SELECT a.id_aggregate, a.id_target, a.id_building, a.length, b.rank, a.plant_capacity, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
    FROM plants_costs AS a
    LEFT JOIN plants_costs_aggregated AS b
    ON a.id_target = b.id_target
    ORDER BY  a.methane_total DESC, a.cost_total
    ;
    
19:08:55 INFO     
        DROP TABLE IF EXISTS optimal_plant_resources_allocated_750kw;
CREATE TABLE optimal_plant_resources_allocated_750kw AS
    		SELECT  * FROM optimal_plant_resources_residual_750kw WHERE 0 > 1
            ;
    
19:08:55 INFO     
        DROP TABLE IF EXISTS optimal_plant_location_750kw;
CREATE TABLE optimal_plant_location_750kw (
            id_order SERIAL PRIMARY KEY, id_target int, plant_capacity int, rank int,
            live_methane_req double precision, crop_methane_req double precision,
            methane_required double precision, live_methane_used double precision,
            crop_methane_used double precision, methane_used double precision,
            cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision
        );
    
19:08:55 INFO     SELECT AddGeometryColumn ('public', 'optimal_plant_location_750kw','geom', 3035, 'POINT', 2);
19:08:55 INFO     
        DROP TABLE IF EXISTS optimal_plant_links_750kw;
CREATE TABLE optimal_plant_links_750kw (
            id_aggregate int, id_target int, id_building int, plant_capacity int, length double precision,
            manure_used double precision, live_methane_used double precision,
            crop_used double precision, crop_methane_used double precision,
            methane_used double precision,
            cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision
        );
    
19:08:56 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_750kw;
CREATE TABLE optimal_plant_residual_aggr_750kw AS
        WITH
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_total,
                SUM (crop_methane) AS crop_total
            FROM optimal_plant_resources_residual_750kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        methane AS (
            SELECT id_target, live_total AS live_methane_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_total < 1560000 * 0.3 THEN  (1560000 * 0.3) - live_total) + crop_total
                    ELSE crop_total
                END AS crop_methane_aggr
            FROM total
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_total_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_750kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT a.id_target, c.rank, 750 AS plant_capacity, a.live_methane_aggr, a.crop_methane_aggr,  a.live_methane_aggr + a.crop_methane_aggr AS methane_total_aggr, b.methane_total_available, b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr, c.geom
        FROM methane AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, methane_total_aggr DESC, cost_total_aggr ASC
            ;
    
19:08:56 ERROR    
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_750kw;
CREATE TABLE optimal_plant_residual_aggr_750kw AS
        WITH
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_total,
                SUM (crop_methane) AS crop_total
            FROM optimal_plant_resources_residual_750kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        methane AS (
            SELECT id_target, live_total AS live_methane_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_total < 1560000 * 0.3 THEN  (1560000 * 0.3) - live_total) + crop_total
                    ELSE crop_total
                END AS crop_methane_aggr
            FROM total
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_total_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_750kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT a.id_target, c.rank, 750 AS plant_capacity, a.live_methane_aggr, a.crop_methane_aggr,  a.live_methane_aggr + a.crop_methane_aggr AS methane_total_aggr, b.methane_total_available, b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr, c.geom
        FROM methane AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, methane_total_aggr DESC, cost_total_aggr ASC
            ;
    
