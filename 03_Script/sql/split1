DROP FUNCTION IF EXISTS split_line_multipoint(input_geom geometry, blade geometry);
CREATE FUNCTION split_line_multipoint(input_geom geometry, blade geometry)
  RETURNS geometry AS
$BODY$
    -- this function is a wrapper around the function ST_Split 
    -- to allow splitting multilines with multipoints
    --
    DECLARE
        result geometry;
        simple_blade geometry;
        blade_geometry_type text := GeometryType(blade);
        geom_geometry_type text := GeometryType(input_geom);
    BEGIN
        IF blade_geometry_type NOT ILIKE 'MULTI%' THEN
            RETURN ST_Split(input_geom, blade);
        ELSIF blade_geometry_type NOT ILIKE '%POINT' THEN
            RAISE NOTICE 'Need a Point/MultiPoint blade';
            RETURN NULL;
        END IF;

        IF geom_geometry_type NOT ILIKE '%LINESTRING' THEN
            RAISE NOTICE 'Need a LineString/MultiLineString input_geom';
            RETURN NULL;
        END IF;

        result := input_geom;           
        -- Loop on all the points in the blade
        FOR simple_blade IN SELECT (ST_Dump(ST_CollectionExtract(blade, 1))).geom
        LOOP
            -- keep splitting the previous result
            result := ST_CollectionExtract(ST_Split(result, simple_blade), 2);
        END LOOP;
        RETURN result;
    END;
$BODY$
LANGUAGE plpgsql IMMUTABLE;


DROP TABLE IF EXISTS tmp_roads_sel;
CREATE TABLE tmp_roads_sel AS
select * from osm_roads where id = 17434;

DROP TABLE IF EXISTS tmp_target_sel;
CREATE TABLE tmp_target_sel AS
select * from topo_targets 
WHERE id_target = 572 or id_target = 573 or id_target = 574;


	DROP TABLE IF EXISTS tmp_target_sel;
	CREATE TABLE tmp_target_sel AS
	SELECT point.id_target, ST_Multi((ST_Dump(ST_Union(ST_Snap(point.geom, line.geom,1)))).geom) as geom 
	FROM topo_targets as point, tmp_roads_sel as line
	WHERE point.id_target = 572 or point.id_target = 573 or point.id_target = 574 or point.id_target = 575
	GROUP BY point.id_target, point.geom;


SELECT ST_AsText(geom) from tmp_target_sel;

DROP TABLE IF EXISTS tmp_clip;
CREATE TABLE tmp_clip AS
SELECT split_line_multipoint(line.geom, ST_Snap(point.geom, line.geom, 0.00001)) as geom
FROM tmp_roads_sel as line, 
 tmp_target_sel as point;

SELECT ST_AsText(geom) from tmp_clip;


DROP TABLE IF EXISTS tmp_clip;
CREATE TABLE tmp_clip AS
SELECT 	line.id, split_line_multipoint(line.geom, point.geom) as geom
FROM 
tmp_roads_sel as line,
tmp_target_sel as point;



select * from tmp_clip;



SELECT ST_AsText(split_line_multipoint(a.geom, blade))
    FROM (
        (SELECT geom from tmp_roads_sel) AS a,
        (SELECT * FROM tmp_target_sel) AS blade
        --ST_GeomFromText('POINT(-0.5 0)') AS blade
    ) AS T;


select * from tmp_clip;


--SELECT ST_AsText(ST_Split('LINESTRING(0 0, 2 0)', 'MULTIPOINT(0 0, 1 0)'));

CREATE TABLE split_multi AS
SELECT (ST_Dump(split_line_multipoint(ST_Snap(a.geom, b.geom, 0.00001),b.eom))).geom as geom
FROM line_table a
JOIN multple_terminal_lines b 
ON a.column_id = b.column_id;