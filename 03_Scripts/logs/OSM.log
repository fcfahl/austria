09:29:33 WARNING  is when this event was logged.
09:29:33 INFO     
        DROP TABLE IF EXISTS lulc_zones;
CREATE TABLE lulc_zones AS
        WITH
            boundary AS (
                SELECT ST_Union(geom) as geom
                FROM adm_communes
            ),
            urban AS (
                SELECT ST_SimplifyVW(ST_Union(ST_SnapToGrid(geom,0.01)),1) as geom
                FROM lulc_corine_12_adm
                WHERE code_12 = '111' OR code_12 = '112'
            ),
            industrial AS (
                SELECT ST_SimplifyVW(ST_Union(ST_SnapToGrid(geom,0.01)),1) as geom
                FROM lulc_corine_12_adm
                WHERE code_12 = '121' OR code_12 = '122' OR code_12 = '131'
            ),
            buffer AS (
                SELECT ST_Union(ST_Buffer(ST_Union(a.geom, b.geom), 1000)) as geom
          		FROM urban a, industrial b
            ),
    	    buffer_clip AS (
                SELECT ST_SimplifyVW(ST_Difference(c.geom, ST_Union(a.geom, b.geom)),1) AS geom
                FROM urban a, industrial b, buffer c
            ),
            forest AS (
                SELECT ST_SimplifyVW(ST_Union(ST_SnapToGrid(geom,0.0001)),1) as geom
                FROM lulc_corine_12_adm
                WHERE code_12 = '311' OR code_12 = '312' OR code_12 = '313'
                OR code_12 = '321' OR code_12 = '322' OR code_12 = '511'
            ),
	        forest_clip AS (
                SELECT ST_SimplifyVW(ST_Difference(a.geom, b.geom),1) AS geom
                FROM forest a, buffer_clip b
            ),
            agriculture AS (
                SELECT ST_SimplifyVW(ST_Union(ST_SnapToGrid(geom,0.01)),1) as geom
                FROM lulc_corine_12_adm
                WHERE code_12 = '211' OR code_12 = '231' OR code_12 = '242' OR code_12 = '243'
            ),
            agriculture_clip AS (
                SELECT ST_SimplifyVW(ST_Difference(a.geom, b.geom),1) AS geom
                FROM agriculture a, buffer_clip b
            ),
            merge_all AS (
                SELECT 2 as rank, 'buffer zone' as zone, geom FROM buffer_clip
                    UNION ALL
                SELECT 3 as rank, 'industrial zone' as zone, geom FROM industrial
                    UNION ALL
                SELECT 0 as rank, 'urban area' as zone, geom FROM urban
                    UNION ALL
                SELECT 1 as rank, 'agriculture area' as zone, geom FROM agriculture_clip
                    UNION ALL
                SELECT 0 as rank, 'forest area' as zone, geom FROM forest_clip
            )
            SELECT a.rank, a.zone, ST_Intersection (a.geom, b.geom) AS geom
            FROM merge_all AS a, boundary AS b
        ;
    
09:29:44 INFO     ALTER TABLE lulc_zones ADD COLUMN  id_zones SERIAL PRIMARY KEY;
09:29:44 INFO     DROP TABLE IF EXISTS plants_initial;
CREATE TABLE plants_initial (
        id_target int, id_building int, length double precision,
        manure double precision, live_methane double precision,
        crop_production double precision, crop_methane double precision
    );
09:29:44 INFO     
            INSERT INTO plants_initial (id_target, id_building, length, manure, live_methane, crop_production, crop_methane)
            SELECT  id_target, id_building, length, NULL AS manure, NULL AS live_methane, NULL AS crop_production, NULL AS crop_methane
            FROM route_distance_50km_250__;
        
09:29:45 INFO     
            INSERT INTO plants_initial (id_target, id_building, length, manure, live_methane, crop_production, crop_methane)
            SELECT  id_target, id_building, length, NULL AS manure, NULL AS live_methane, NULL AS crop_production, NULL AS crop_methane
            FROM route_distance_50km_500__;
        
09:29:47 INFO     
            INSERT INTO plants_initial (id_target, id_building, length, manure, live_methane, crop_production, crop_methane)
            SELECT  id_target, id_building, length, NULL AS manure, NULL AS live_methane, NULL AS crop_production, NULL AS crop_methane
            FROM route_distance_50km_750__;
        
09:29:48 INFO     
            INSERT INTO plants_initial (id_target, id_building, length, manure, live_methane, crop_production, crop_methane)
            SELECT  id_target, id_building, length, NULL AS manure, NULL AS live_methane, NULL AS crop_production, NULL AS crop_methane
            FROM route_distance_50km_1500__;
        
09:29:52 INFO     
            INSERT INTO plants_initial (id_target, id_building, length, manure, live_methane, crop_production, crop_methane)
            SELECT  id_target, id_building, length, NULL AS manure, NULL AS live_methane, NULL AS crop_production, NULL AS crop_methane
            FROM route_distance_50km_2000__;
        
09:29:53 INFO     
        DROP TABLE IF EXISTS plants_resources;
CREATE TABLE plants_resources AS
        SELECT a.id_target, a.id_building, a.length, b.manure, b.crop_production, b.live_methane, b.crop_methane
        FROM plants_initial AS a
        LEFT JOIN farm_buildings_biomass AS b ON a.id_building = b.id_building
        ORDER BY a.id_target
        ;
    
09:29:59 INFO     DROP TABLE IF EXISTS plants_initial;
09:29:59 INFO     
        DROP TABLE IF EXISTS plants_capacity;
CREATE TABLE plants_capacity AS
        WITH
            aggregation AS
            (
                SELECT *
                FROM (
                    SELECT *,
                    -- livestock methane aggregated by distance < 10 km
                    CASE
                        WHEN (length <= 10000 AND live_methane is not Null) THEN
                        SUM (coalesce (live_methane,0)) OVER (PARTITION BY id_target ORDER BY length ASC)
                        ELSE 0
                    END AS live_methane_aggr,
                    -- crop methane aggregated by distance
                    SUM (crop_methane) OVER (PARTITION BY id_target ORDER BY length ASC) AS crop_methane_aggr
                    FROM plants_resources
                ) AS capacities
            ),
            sum AS
            (
                SELECT a.*, a.crop_methane_aggr + a.live_methane_aggr AS methane_total_aggr
                FROM aggregation AS a
            ),
            capacity AS
            (
                SELECT *,
                CASE
                    WHEN methane_total_aggr <= 224000 THEN 100
                    WHEN methane_total_aggr <= 560000 THEN 250
                    WHEN methane_total_aggr <= 1070000 THEN 500
                    WHEN methane_total_aggr <= 1560000 THEN 750
                    ELSE Null
                END AS plant_capacity
                FROM sum
            )
            SELECT * FROM capacity
            WHERE plant_capacity is not Null
            ORDER BY id_target, methane_total_aggr , live_methane_aggr, crop_methane_aggr , plant_capacity
            ;
    
09:30:12 INFO     ALTER TABLE plants_capacity ADD COLUMN  id_aggregate SERIAL PRIMARY KEY;
09:30:12 INFO     
        DROP TABLE IF EXISTS plants_costs;
CREATE TABLE plants_costs AS
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            CASE
                WHEN live_methane_aggr > 0 THEN ((length / 1000) * manure * 0.2)
                ELSE 0
            END AS cost_manure
            FROM plants_capacity
        )
        SELECT *,
        CASE
            WHEN cost_manure is not null THEN cost_manure + cost_harvest + cost_ensiling
            ELSE cost_harvest + cost_ensiling
        END AS cost_total,
        COALESCE (live_methane, 0) + crop_methane AS methane_total
        FROM costs
            ;
    
09:30:13 INFO     
        DROP TABLE IF EXISTS plants_costs_aggregated;
CREATE TABLE plants_costs_aggregated AS
        WITH
        aggregated AS (
            SELECT id_target,
            SUM (methane_total) AS methane_total,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM plants_costs
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT a.id_target, b.rank, a.methane_total, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total, b.geom
        FROM aggregated AS a
        LEFT JOIN site_clean AS b ON a.id_target = b.id_target
        ORDER BY  b.rank DESC, a.methane_total DESC, a.cost_total ASC
            ;
    
09:30:13 INFO     
    DROP TABLE IF EXISTS optimal_plant_resources_residual_250kw;
CREATE TABLE optimal_plant_resources_residual_250kw AS
    SELECT a.id_aggregate, a.id_target, a.id_building, a.length, b.rank, a.plant_capacity, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total, 0 AS only_manure
    FROM plants_costs AS a
    LEFT JOIN plants_costs_aggregated AS b
    ON a.id_target = b.id_target
    ORDER BY  a.methane_total DESC, a.cost_total
    ;
    
09:30:14 INFO     
        DROP TABLE IF EXISTS optimal_plant_resources_allocated_250kw;
CREATE TABLE optimal_plant_resources_allocated_250kw AS
    		SELECT  * FROM optimal_plant_resources_residual_250kw WHERE 0 > 1
            ;
    
09:30:14 INFO     
        DROP TABLE IF EXISTS optimal_plant_location_250kw;
CREATE TABLE optimal_plant_location_250kw (
            id_order SERIAL PRIMARY KEY, id_target int, plant_capacity int, rank int,
            live_required double precision, live_available double precision, live_allocated double precision,
            crop_required double precision, crop_available double precision, crop_allocated double precision,
            total_required double precision,
            methane_available double precision, methane_demand double precision,
            live_methane_used double precision, crop_methane_used double precision, methane_used double precision,
            cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, manure_ratio double precision, crop_ratio double precision
        );
    
09:30:14 INFO     SELECT AddGeometryColumn ('public', 'optimal_plant_location_250kw','geom', 3035, 'POINT', 2);
09:30:14 INFO     
        DROP TABLE IF EXISTS optimal_plant_links_250kw;
CREATE TABLE optimal_plant_links_250kw (
            id_aggregate int, id_target int, id_building int, plant_capacity int, length double precision,
            manure_used double precision, live_methane_used double precision,
            crop_used double precision, crop_methane_used double precision,
            methane_used double precision,
            cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, only_manure int
        );
    
09:30:14 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:14 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:14 INFO     found plant 
09:30:14 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:14 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:14 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:14 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:14 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:15 DEBUG    plant capacity: 250 	 iteration: 1 	 rank: 3
09:30:15 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:15 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:15 INFO     found plant 
09:30:15 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:15 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:15 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:15 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:15 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:15 DEBUG    plant capacity: 250 	 iteration: 2 	 rank: 3
09:30:15 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:15 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:15 INFO     found plant 
09:30:15 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:15 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:16 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:16 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:16 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:16 DEBUG    plant capacity: 250 	 iteration: 3 	 rank: 3
09:30:16 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:16 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:16 INFO     found plant 
09:30:16 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:16 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:16 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:16 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:16 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:18 DEBUG    plant capacity: 250 	 iteration: 4 	 rank: 3
09:30:18 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:19 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:19 INFO     found plant 
09:30:19 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:19 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:19 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:19 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:19 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:19 DEBUG    plant capacity: 250 	 iteration: 5 	 rank: 3
09:30:19 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:19 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:19 INFO     found plant 
09:30:19 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:19 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:19 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:19 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:19 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:20 DEBUG    plant capacity: 250 	 iteration: 6 	 rank: 3
09:30:20 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:20 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:20 INFO     found plant 
09:30:20 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:20 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:20 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:20 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:20 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:20 DEBUG    plant capacity: 250 	 iteration: 7 	 rank: 3
09:30:20 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:21 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:21 INFO     found plant 
09:30:21 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:21 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:21 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:21 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:21 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:21 DEBUG    plant capacity: 250 	 iteration: 8 	 rank: 3
09:30:21 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:21 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:21 INFO     found plant 
09:30:21 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:21 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:21 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:21 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:22 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:22 DEBUG    plant capacity: 250 	 iteration: 9 	 rank: 3
09:30:22 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:22 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:22 INFO     found plant 
09:30:22 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:22 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:22 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:22 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:22 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:22 DEBUG    plant capacity: 250 	 iteration: 10 	 rank: 3
09:30:22 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:23 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:23 INFO     found plant 
09:30:23 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:23 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:23 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:23 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:23 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:23 DEBUG    plant capacity: 250 	 iteration: 11 	 rank: 3
09:30:23 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:23 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 3
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:23 ERROR    no more plants for the rank 3
09:30:23 DEBUG    plant capacity: 250 	 iteration: 12 	 rank: 2
09:30:23 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:23 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:23 INFO     found plant 
09:30:23 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:23 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:24 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:24 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:24 DEBUG    plant capacity: 250 	 iteration: 13 	 rank: 2
09:30:24 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:24 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:24 INFO     found plant 
09:30:24 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:24 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:24 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:24 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:24 DEBUG    plant capacity: 250 	 iteration: 14 	 rank: 2
09:30:24 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:25 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:25 INFO     found plant 
09:30:25 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:25 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:25 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:25 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:25 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:25 DEBUG    plant capacity: 250 	 iteration: 15 	 rank: 2
09:30:25 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:25 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:25 INFO     found plant 
09:30:25 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:25 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:25 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:25 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:25 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:26 DEBUG    plant capacity: 250 	 iteration: 16 	 rank: 2
09:30:26 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:26 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:26 INFO     found plant 
09:30:26 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:26 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:26 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:26 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:26 DEBUG    plant capacity: 250 	 iteration: 17 	 rank: 2
09:30:26 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:27 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:27 INFO     found plant 
09:30:27 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:27 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:27 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:27 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:27 DEBUG    plant capacity: 250 	 iteration: 18 	 rank: 2
09:30:27 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:27 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:27 INFO     found plant 
09:30:27 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:27 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:27 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:27 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:28 DEBUG    plant capacity: 250 	 iteration: 19 	 rank: 2
09:30:28 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:28 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:28 INFO     found plant 
09:30:28 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:28 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:28 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:28 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:28 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:28 DEBUG    plant capacity: 250 	 iteration: 20 	 rank: 2
09:30:28 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:29 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:29 INFO     found plant 
09:30:29 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:29 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:29 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:29 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:29 DEBUG    plant capacity: 250 	 iteration: 21 	 rank: 2
09:30:29 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:29 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:29 INFO     found plant 
09:30:29 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:29 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:29 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:29 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:30 DEBUG    plant capacity: 250 	 iteration: 22 	 rank: 2
09:30:30 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:30 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:30 INFO     found plant 
09:30:30 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:30 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:30 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:30 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:30 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:30 DEBUG    plant capacity: 250 	 iteration: 23 	 rank: 2
09:30:30 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:31 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:31 INFO     found plant 
09:30:31 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:31 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:31 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:31 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:31 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:31 DEBUG    plant capacity: 250 	 iteration: 24 	 rank: 2
09:30:31 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:31 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:31 INFO     found plant 
09:30:31 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:31 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:31 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:31 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:32 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:32 DEBUG    plant capacity: 250 	 iteration: 25 	 rank: 2
09:30:32 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:32 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:32 INFO     found plant 
09:30:32 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:32 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:32 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:32 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:32 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:32 DEBUG    plant capacity: 250 	 iteration: 26 	 rank: 2
09:30:32 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:33 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:33 INFO     found plant 
09:30:33 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:33 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:33 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:33 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:33 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:33 DEBUG    plant capacity: 250 	 iteration: 27 	 rank: 2
09:30:33 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:33 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:33 INFO     found plant 
09:30:33 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:33 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:33 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:33 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:34 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:34 DEBUG    plant capacity: 250 	 iteration: 28 	 rank: 2
09:30:34 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:34 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:34 INFO     found plant 
09:30:34 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:34 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:34 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:34 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:34 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:35 DEBUG    plant capacity: 250 	 iteration: 29 	 rank: 2
09:30:35 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:35 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:35 INFO     found plant 
09:30:35 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:35 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:35 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:35 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:35 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:35 DEBUG    plant capacity: 250 	 iteration: 30 	 rank: 2
09:30:35 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:35 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:35 INFO     found plant 
09:30:35 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:35 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:36 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:36 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:36 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:36 DEBUG    plant capacity: 250 	 iteration: 31 	 rank: 2
09:30:36 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:36 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:36 INFO     found plant 
09:30:36 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:36 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:36 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:36 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:36 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:37 DEBUG    plant capacity: 250 	 iteration: 32 	 rank: 2
09:30:37 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:37 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:37 INFO     found plant 
09:30:37 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:37 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:37 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:37 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:37 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:37 DEBUG    plant capacity: 250 	 iteration: 33 	 rank: 2
09:30:37 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:38 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:38 INFO     found plant 
09:30:38 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:38 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:38 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:38 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:38 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:38 DEBUG    plant capacity: 250 	 iteration: 34 	 rank: 2
09:30:38 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:38 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:38 INFO     found plant 
09:30:38 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:38 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:39 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:39 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:39 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:39 DEBUG    plant capacity: 250 	 iteration: 35 	 rank: 2
09:30:39 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:39 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:39 INFO     found plant 
09:30:39 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:39 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:39 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:39 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:40 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:40 DEBUG    plant capacity: 250 	 iteration: 36 	 rank: 2
09:30:40 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:40 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:40 INFO     found plant 
09:30:40 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:40 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:40 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:40 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:40 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:41 DEBUG    plant capacity: 250 	 iteration: 37 	 rank: 2
09:30:41 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:41 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:41 INFO     found plant 
09:30:41 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:41 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:41 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:41 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:41 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:41 DEBUG    plant capacity: 250 	 iteration: 38 	 rank: 2
09:30:41 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:42 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:42 INFO     found plant 
09:30:42 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:42 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:42 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:42 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:42 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:42 DEBUG    plant capacity: 250 	 iteration: 39 	 rank: 2
09:30:42 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:42 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:42 INFO     found plant 
09:30:42 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:42 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:42 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:43 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:43 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:43 DEBUG    plant capacity: 250 	 iteration: 40 	 rank: 2
09:30:43 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:43 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:43 INFO     found plant 
09:30:43 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:43 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:43 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:43 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:43 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:44 DEBUG    plant capacity: 250 	 iteration: 41 	 rank: 2
09:30:44 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:44 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:44 INFO     found plant 
09:30:44 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:44 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:44 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:44 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:44 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:44 DEBUG    plant capacity: 250 	 iteration: 42 	 rank: 2
09:30:44 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:45 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:45 INFO     found plant 
09:30:45 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:45 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:45 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:45 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:45 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:45 DEBUG    plant capacity: 250 	 iteration: 43 	 rank: 2
09:30:45 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:45 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:45 INFO     found plant 
09:30:45 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:45 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:46 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:46 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:46 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:46 DEBUG    plant capacity: 250 	 iteration: 44 	 rank: 2
09:30:46 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:46 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:46 INFO     found plant 
09:30:46 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:46 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:46 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:46 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:47 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:47 DEBUG    plant capacity: 250 	 iteration: 45 	 rank: 2
09:30:47 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:47 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:47 INFO     found plant 
09:30:47 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:47 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:47 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:47 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:47 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:48 DEBUG    plant capacity: 250 	 iteration: 46 	 rank: 2
09:30:48 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:48 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:48 INFO     found plant 
09:30:48 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:48 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:48 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:48 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:48 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:48 DEBUG    plant capacity: 250 	 iteration: 47 	 rank: 2
09:30:48 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:49 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:49 INFO     found plant 
09:30:49 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:49 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:49 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:49 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:49 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:49 DEBUG    plant capacity: 250 	 iteration: 48 	 rank: 2
09:30:49 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:49 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:49 INFO     found plant 
09:30:49 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:49 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:49 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:49 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:50 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:50 DEBUG    plant capacity: 250 	 iteration: 49 	 rank: 2
09:30:50 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:50 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:50 INFO     found plant 
09:30:50 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:50 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:50 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:50 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:50 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:51 DEBUG    plant capacity: 250 	 iteration: 50 	 rank: 2
09:30:51 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:51 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:51 INFO     found plant 
09:30:51 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:51 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:51 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:51 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:51 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:52 DEBUG    plant capacity: 250 	 iteration: 51 	 rank: 2
09:30:52 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:52 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:52 INFO     found plant 
09:30:52 INFO     
            INSERT INTO optimal_plant_location_250kw (
                id_target, plant_capacity, rank,
                live_required, live_available, live_allocated,
                crop_required, crop_available, crop_allocated,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
09:30:52 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, live_allocated, crop_required, crop_allocated
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row_1
            FROM (
                SELECT b.live_required, b.live_allocated,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f
            WHERE live_methane_aggregated  <= (live_allocated)
            ORDER BY  live_row_1 DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row_1
            FROM (
                SELECT b.crop_required, b.crop_allocated,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row_1
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_allocated)
            ORDER BY  crop_row_1 DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row_1 + 1-- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_target, a.id_building, a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, 0 AS only_manure,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_250kw AS a, last_record AS b
                WHERE a.id_target = b.id_target
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row_1 + 1-- grab the next value of the sequence
        ),
        no_matched_farms AS (
            SELECT DISTINCT  a.id_aggregate, a.id_target, (a.id_building), a.length, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.live_methane AS methane_total, 1 AS only_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building NOT IN
		          (
                  SELECT DISTINCT b.id_building
                  FROM manure AS a, crop AS b, last_record AS c
                  WHERE a.id_target = c.id_target
                  )
        ),
        join_farms AS (
	        SELECT
    		    b.id_aggregate, b.id_target, b.id_building, b.length,
    		    a.manure AS manure_used, b.crop_production AS crop_used,
    		    a.live_methane AS live_methane_used, b.crop_methane AS crop_methane_used,
    		    COALESCE(a.live_methane,0) + COALESCE(b.crop_methane,0) AS methane_used, b.only_manure
    		FROM crop AS b
    		LEFT JOIN manure AS a ON a.id_aggregate = b.id_aggregate
    		UNION ALL
    		SELECT * FROM  no_matched_farms
        ),
        cost_total AS (
            SELECT b.*, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_250kw AS a, join_farms AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_250kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used,
            live_methane_used, crop_methane_used, methane_used, only_manure,
            cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT *
        FROM cost_total

        ;
    
09:30:52 INFO     
        WITH
        manure AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop AS (
            SELECT id_target,
            SUM (crop_methane_used) AS crop_methane_used
            FROM optimal_plant_links_250kw
            WHERE only_manure = 0
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_250kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = c.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total,
            manure_ratio = ROUND((cast(b.live_methane_used / b.methane_used AS numeric)),2) ,
            crop_ratio = ROUND((cast(c.crop_methane_used / b.methane_used AS numeric)),2)
        FROM manure AS b, crop AS c
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ;
    
09:30:52 INFO     
        INSERT INTO optimal_plant_resources_allocated_250kw
        SELECT a.*
        FROM optimal_plant_resources_residual_250kw AS a, optimal_plant_links_250kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
09:30:52 INFO     
        WITH
        current_plant AS (
            SELECT id_target
            FROM optimal_plant_location_250kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        residuals AS (
    		SELECT a.*
    		FROM optimal_plant_resources_residual_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        links AS (
    		SELECT a.*
    		FROM optimal_plant_links_250kw AS a, current_plant AS b
    		WHERE a.id_target = b.id_target
        ),
        manure AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.manure - b.manure_used AS  manure,
                a.live_methane - b.live_methane_used AS live_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building
        ),
        crop AS (
            SELECT
                a.id_target, a.id_building, a.length,
                a.crop_production - b.crop_used AS  crop_production,
                a.crop_methane - b.crop_methane_used AS  crop_methane
            FROM residuals AS a, links AS b
            WHERE a.id_building = b.id_building AND a.only_manure = 0
        ),
        costs AS (
            SELECT
                a.id_target, a.id_building, a.length,
                (b.crop_production * 5) AS cost_harvest,
                ((b.length / 1000) * b.crop_production * 6) AS cost_ensiling,
                ((a.length / 1000) * a.manure * 0.2) AS cost_manure
            FROM manure AS a, crop AS b
            WHERE a.id_building = b.id_building
        ),
        join_tables AS (
            SELECT  a.id_target, a.id_building, a.manure, a.live_methane, b.crop_production, b.crop_methane, c.cost_harvest, c.cost_ensiling, c.cost_manure
            FROM costs AS c
            JOIN crop AS b ON b.id_building = c.id_building
            JOIN manure AS a ON a.id_building = c.id_building
        )
        UPDATE optimal_plant_resources_residual_250kw AS a
        SET
            manure = b.manure,
            crop_production = b.crop_production,
            live_methane = b.live_methane,
            crop_methane = b.crop_methane,
            methane_total = COALESCE(b.live_methane,0) +  COALESCE(b.crop_methane,0),
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM join_tables AS b
        WHERE a.id_building = b.id_building
        ;
    
09:30:52 DEBUG    plant capacity: 250 	 iteration: 52 	 rank: 2
09:30:52 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:52 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 2
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:52 ERROR    no more plants for the rank 2
09:30:52 DEBUG    plant capacity: 250 	 iteration: 53 	 rank: 1
09:30:52 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_250kw;
CREATE TABLE optimal_plant_residual_aggr_250kw AS
        WITH
        requirements AS (
            SELECT
            560000 AS  total_required,
            560000 * 0.3 AS live_required,
            560000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_available,
                SUM (crop_methane) AS crop_available
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_available, a.crop_available,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_available > live_required THEN  live_required
                    ELSE live_available
                END AS live_allocated,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_available > crop_required AND live_available > live_required THEN  crop_required
                    WHEN crop_available > crop_required AND live_available < live_required AND crop_available + live_available > total_required THEN  crop_required + (live_required - live_available)
                    ELSE 0
                END AS crop_allocated
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_250kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 250 AS plant_capacity, c.rank,
            a.live_required, a.live_available, a.live_allocated,
            a.crop_required, a.crop_available, a.crop_allocated,
            a.total_required, b.methane_available,  a.live_allocated + a.crop_allocated AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
09:30:53 INFO     
		SELECT *
        FROM optimal_plant_residual_aggr_250kw
        WHERE methane_demand >= 560000 AND cost_total_aggr > 0  AND rank = 1
        AND id_target NOT IN (
            SELECT DISTINCT id_target FROM optimal_plant_location_250kw  -- avoid getting duplicates
        )
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
09:30:53 ERROR    no more plants for the rank 1
09:30:53 DEBUG    plant capacity: 250 	 iteration: 54 	 rank: 0
09:30:53 INFO     
        DROP TABLE IF EXISTS optimal_plant_map_250kw;
CREATE TABLE optimal_plant_map_250kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM optimal_plant_links_250kw AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
09:30:53 INFO     
            INSERT INTO optimal_plant_map_250kw (
                id_aggregate, id_target, id_building, plant_capacity, length,
                manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure,
                farms, route)
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_250kw AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
09:30:54 INFO     
            INSERT INTO optimal_plant_map_250kw (
                id_aggregate, id_target, id_building, plant_capacity, length,
                manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure,
                farms, route)
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_250kw AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
09:30:55 INFO     
            INSERT INTO optimal_plant_map_250kw (
                id_aggregate, id_target, id_building, plant_capacity, length,
                manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure,
                farms, route)
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_250kw AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
09:30:56 INFO     
            INSERT INTO optimal_plant_map_250kw (
                id_aggregate, id_target, id_building, plant_capacity, length,
                manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total, only_manure,
                farms, route)
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_250kw AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_2000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
