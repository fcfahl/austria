16:30:29 WARNING  is when this event was logged.
16:30:29 INFO     DROP SEQUENCE IF EXISTS serial;
CREATE SEQUENCE serial;
16:30:29 INFO     DROP SEQUENCE IF EXISTS plants;
CREATE SEQUENCE plants;
16:30:29 INFO     DROP TABLE IF EXISTS opt_plants CASCADE;
CREATE TABLE opt_plants (id_plant integer not null, id_target integer, id_link integer, plant_capacity double precision, rank integer, length_manure_avg double precision, length_crop_avg double precision, manure_required double precision, manure_available double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_required double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, ratio_manure double precision, ratio_crop double precision);
16:30:29 INFO     DROP TABLE IF EXISTS opt_residual CASCADE;
CREATE TABLE opt_residual (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
16:30:29 INFO     DROP TABLE IF EXISTS opt_allocation CASCADE;
CREATE TABLE opt_allocation (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
16:30:29 INFO     ALTER TABLE opt_plants ADD PRIMARY KEY (id_plant);
16:30:29 INFO     ALTER TABLE opt_residual ADD PRIMARY KEY (id_residual);
16:30:29 INFO     ALTER TABLE opt_residual ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
16:30:29 INFO     ALTER TABLE opt_allocation ADD PRIMARY KEY (id_residual);
16:30:29 INFO     ALTER TABLE opt_allocation ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
16:30:29 INFO     SELECT AddGeometryColumn ('public', 'opt_plants','geom', 3035, 'POINT', 2);
16:30:29 INFO     
            SELECT  id_target
            FROM plants_costs_aggregated_750kw
            WHERE rank = 3
            ORDER BY cost_total ASC
            LIMIT 1
                ;
            
16:30:29 DEBUG    SELECTED PLANT = 1
16:30:29 INFO     
    INSERT INTO opt_residual AS b (
        id_residual,
        id_target,
        id_building,
        farm_used,
        length,
        rank,
        manure_available,
        crop_available,
        methane_from_manure,
        methane_from_crop,
        methane_total_produced
    )
    SELECT
        nextval('serial'),
        a.id_target,
        a.id_building,
        0,
        a.length,
        a.rank,
        CASE
            WHEN a.length > 10000 THEN 0
            ELSE a.manure
        END AS manure,
        a.crop_production,
        a.manure * 14.4,
        a.crop_production * 125.4,
        a.manure * 14.4 +  a.crop_production * 125.4
    FROM plants_costs_750kw AS a
    ;
    
16:30:30 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:30 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:30 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:30 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:31 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1
        AND farm_used > 0
        ;
    
16:30:31 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:31 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:32 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:32 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1463415
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:32 DEBUG    found plant: id_target = 3
16:30:32 DEBUG    plant capacity: 750 	 iteration: 1 
	 rank: 3 	 current plant: 3
16:30:32 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:32 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:32 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:32 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:32 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 3
        AND farm_used > 0
        ;
    
16:30:32 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:32 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:33 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:33 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1463415
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:33 DEBUG    found plant: id_target = 18
16:30:33 DEBUG    plant capacity: 750 	 iteration: 2 
	 rank: 3 	 current plant: 18
16:30:33 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:33 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:34 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:34 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:34 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 18
        AND farm_used > 0
        ;
    
16:30:34 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:34 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:35 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:35 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1463415
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:35 DEBUG    found plant: id_target = 21
16:30:35 DEBUG    plant capacity: 750 	 iteration: 3 
	 rank: 3 	 current plant: 21
16:30:35 INFO     
        WITH
        current_plant AS (
            SELECT 21 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:35 INFO     
        WITH
        current_plant AS (
            SELECT 21 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:35 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:35 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:35 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 21
        AND farm_used > 0
        ;
    
16:30:36 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:36 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:36 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:36 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1463415
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:36 DEBUG    found plant: id_target = 8
16:30:36 DEBUG    plant capacity: 750 	 iteration: 4 
	 rank: 3 	 current plant: 8
16:30:36 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:37 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:37 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:37 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:37 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 8
        AND farm_used > 0
        ;
    
16:30:37 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:37 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:38 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:38 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1463415
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:38 ERROR    no more plants for the rank 3
16:30:38 DEBUG    plant capacity: 750 	 iteration: 5 
	 rank: 2 	 current plant: 8
16:30:38 INFO     
        DROP TABLE IF EXISTS opt_plants_750kw CASCADE;
CREATE TABLE opt_plants_750kw AS
        SELECT *
        FROM opt_plants
        ;
    
16:30:38 INFO     
        DROP TABLE IF EXISTS opt_allocation_750kw CASCADE;
CREATE TABLE opt_allocation_750kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM opt_allocation AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
16:30:38 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:39 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:39 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:39 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:39 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:39 INFO     DROP TABLE IF EXISTS opt_plants CASCADE;
CREATE TABLE opt_plants (id_plant integer not null, id_target integer, id_link integer, plant_capacity double precision, rank integer, length_manure_avg double precision, length_crop_avg double precision, manure_required double precision, manure_available double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_required double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, ratio_manure double precision, ratio_crop double precision);
16:30:39 INFO     DROP TABLE IF EXISTS opt_residual CASCADE;
CREATE TABLE opt_residual (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
16:30:39 INFO     DROP TABLE IF EXISTS opt_allocation CASCADE;
CREATE TABLE opt_allocation (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
16:30:39 INFO     ALTER TABLE opt_plants ADD PRIMARY KEY (id_plant);
16:30:39 INFO     ALTER TABLE opt_residual ADD PRIMARY KEY (id_residual);
16:30:39 INFO     ALTER TABLE opt_residual ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
16:30:39 INFO     ALTER TABLE opt_allocation ADD PRIMARY KEY (id_residual);
16:30:39 INFO     ALTER TABLE opt_allocation ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
16:30:39 INFO     SELECT AddGeometryColumn ('public', 'opt_plants','geom', 3035, 'POINT', 2);
16:30:39 INFO     
            SELECT  id_target
            FROM plants_costs_aggregated_500kw
            WHERE rank = 3
            ORDER BY cost_total ASC
            LIMIT 1
                ;
            
16:30:39 DEBUG    SELECTED PLANT = 1
16:30:39 INFO     
    INSERT INTO opt_residual AS b (
        id_residual,
        id_target,
        id_building,
        farm_used,
        length,
        rank,
        manure_available,
        crop_available,
        methane_from_manure,
        methane_from_crop,
        methane_total_produced
    )
    SELECT
        nextval('serial'),
        a.id_target,
        a.id_building,
        0,
        a.length,
        a.rank,
        CASE
            WHEN a.length > 10000 THEN 0
            ELSE a.manure
        END AS manure,
        a.crop_production,
        a.manure * 14.4,
        a.crop_production * 125.4,
        a.manure * 14.4 +  a.crop_production * 125.4
    FROM plants_costs_500kw AS a
    ;
    
16:30:40 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:40 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:40 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:40 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:40 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1
        AND farm_used > 0
        ;
    
16:30:40 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:40 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:41 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:41 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1000000
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:41 DEBUG    found plant: id_target = 3
16:30:41 DEBUG    plant capacity: 500 	 iteration: 1 
	 rank: 3 	 current plant: 3
16:30:41 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:41 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:41 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:41 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:41 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 3
        AND farm_used > 0
        ;
    
16:30:41 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:42 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:42 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:42 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1000000
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:42 DEBUG    found plant: id_target = 8
16:30:42 DEBUG    plant capacity: 500 	 iteration: 2 
	 rank: 3 	 current plant: 8
16:30:42 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:42 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:42 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:43 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:43 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 8
        AND farm_used > 0
        ;
    
16:30:43 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:43 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:43 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:43 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1000000
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:44 DEBUG    found plant: id_target = 18
16:30:44 DEBUG    plant capacity: 500 	 iteration: 3 
	 rank: 3 	 current plant: 18
16:30:44 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:44 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:44 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:44 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:44 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 18
        AND farm_used > 0
        ;
    
16:30:44 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:44 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:45 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:45 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1000000
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:45 DEBUG    found plant: id_target = 20
16:30:45 DEBUG    plant capacity: 500 	 iteration: 4 
	 rank: 3 	 current plant: 20
16:30:45 INFO     
        WITH
        current_plant AS (
            SELECT 20 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:45 INFO     
        WITH
        current_plant AS (
            SELECT 20 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:45 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:45 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:45 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 20
        AND farm_used > 0
        ;
    
16:30:45 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:45 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:46 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:46 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 1000000
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:46 ERROR    no more plants for the rank 3
16:30:46 DEBUG    plant capacity: 500 	 iteration: 5 
	 rank: 2 	 current plant: 20
16:30:46 INFO     
        DROP TABLE IF EXISTS opt_plants_500kw CASCADE;
CREATE TABLE opt_plants_500kw AS
        SELECT *
        FROM opt_plants
        ;
    
16:30:46 INFO     
        DROP TABLE IF EXISTS opt_allocation_500kw CASCADE;
CREATE TABLE opt_allocation_500kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM opt_allocation AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
16:30:46 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:46 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:47 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:47 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:47 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:47 INFO     DROP TABLE IF EXISTS opt_plants CASCADE;
CREATE TABLE opt_plants (id_plant integer not null, id_target integer, id_link integer, plant_capacity double precision, rank integer, length_manure_avg double precision, length_crop_avg double precision, manure_required double precision, manure_available double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_required double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, ratio_manure double precision, ratio_crop double precision);
16:30:47 INFO     DROP TABLE IF EXISTS opt_residual CASCADE;
CREATE TABLE opt_residual (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
16:30:47 INFO     DROP TABLE IF EXISTS opt_allocation CASCADE;
CREATE TABLE opt_allocation (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
16:30:47 INFO     ALTER TABLE opt_plants ADD PRIMARY KEY (id_plant);
16:30:47 INFO     ALTER TABLE opt_residual ADD PRIMARY KEY (id_residual);
16:30:47 INFO     ALTER TABLE opt_residual ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
16:30:47 INFO     ALTER TABLE opt_allocation ADD PRIMARY KEY (id_residual);
16:30:47 INFO     ALTER TABLE opt_allocation ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
16:30:47 INFO     SELECT AddGeometryColumn ('public', 'opt_plants','geom', 3035, 'POINT', 2);
16:30:47 INFO     
            SELECT  id_target
            FROM plants_costs_aggregated_250kw
            WHERE rank = 3
            ORDER BY cost_total ASC
            LIMIT 1
                ;
            
16:30:47 DEBUG    SELECTED PLANT = 1
16:30:47 INFO     
    INSERT INTO opt_residual AS b (
        id_residual,
        id_target,
        id_building,
        farm_used,
        length,
        rank,
        manure_available,
        crop_available,
        methane_from_manure,
        methane_from_crop,
        methane_total_produced
    )
    SELECT
        nextval('serial'),
        a.id_target,
        a.id_building,
        0,
        a.length,
        a.rank,
        CASE
            WHEN a.length > 10000 THEN 0
            ELSE a.manure
        END AS manure,
        a.crop_production,
        a.manure * 14.4,
        a.crop_production * 125.4,
        a.manure * 14.4 +  a.crop_production * 125.4
    FROM plants_costs_250kw AS a
    ;
    
16:30:47 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:48 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:48 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:48 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:48 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1
        AND farm_used > 0
        ;
    
16:30:48 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:48 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:48 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:48 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 526316
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:48 DEBUG    found plant: id_target = 3
16:30:48 DEBUG    plant capacity: 250 	 iteration: 1 
	 rank: 3 	 current plant: 3
16:30:48 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:48 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:48 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:49 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:49 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 3
        AND farm_used > 0
        ;
    
16:30:49 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:49 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:49 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:49 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 526316
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:49 DEBUG    found plant: id_target = 8
16:30:49 DEBUG    plant capacity: 250 	 iteration: 2 
	 rank: 3 	 current plant: 8
16:30:49 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:49 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:49 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:49 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:50 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 8
        AND farm_used > 0
        ;
    
16:30:50 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:50 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:50 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:50 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 526316
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:50 DEBUG    found plant: id_target = 18
16:30:50 DEBUG    plant capacity: 250 	 iteration: 3 
	 rank: 3 	 current plant: 18
16:30:50 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:50 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:50 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:50 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:50 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 18
        AND farm_used > 0
        ;
    
16:30:51 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:51 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:51 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:51 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 526316
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:51 DEBUG    found plant: id_target = 21
16:30:51 DEBUG    plant capacity: 250 	 iteration: 4 
	 rank: 3 	 current plant: 21
16:30:51 INFO     
        WITH
        current_plant AS (
            SELECT 21 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:51 INFO     
        WITH
        current_plant AS (
            SELECT 21 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:51 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:51 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:51 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 21
        AND farm_used > 0
        ;
    
16:30:51 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:51 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:52 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:52 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 526316
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:52 DEBUG    found plant: id_target = 15
16:30:52 DEBUG    plant capacity: 250 	 iteration: 5 
	 rank: 3 	 current plant: 15
16:30:52 INFO     
        WITH
        current_plant AS (
            SELECT 15 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:52 INFO     
        WITH
        current_plant AS (
            SELECT 15 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:52 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:52 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:52 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 15
        AND farm_used > 0
        ;
    
16:30:52 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:52 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:53 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:53 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 526316
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:53 ERROR    no more plants for the rank 3
16:30:53 DEBUG    plant capacity: 250 	 iteration: 6 
	 rank: 2 	 current plant: 15
16:30:53 INFO     
        DROP TABLE IF EXISTS opt_plants_250kw CASCADE;
CREATE TABLE opt_plants_250kw AS
        SELECT *
        FROM opt_plants
        ;
    
16:30:53 INFO     
        DROP TABLE IF EXISTS opt_allocation_250kw CASCADE;
CREATE TABLE opt_allocation_250kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM opt_allocation AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
16:30:53 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:53 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:53 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:54 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:54 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:54 INFO     DROP TABLE IF EXISTS opt_plants CASCADE;
CREATE TABLE opt_plants (id_plant integer not null, id_target integer, id_link integer, plant_capacity double precision, rank integer, length_manure_avg double precision, length_crop_avg double precision, manure_required double precision, manure_available double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_required double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, ratio_manure double precision, ratio_crop double precision);
16:30:54 INFO     DROP TABLE IF EXISTS opt_residual CASCADE;
CREATE TABLE opt_residual (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
16:30:54 INFO     DROP TABLE IF EXISTS opt_allocation CASCADE;
CREATE TABLE opt_allocation (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, crop_residual double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
16:30:54 INFO     ALTER TABLE opt_plants ADD PRIMARY KEY (id_plant);
16:30:54 INFO     ALTER TABLE opt_residual ADD PRIMARY KEY (id_residual);
16:30:54 INFO     ALTER TABLE opt_residual ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
16:30:54 INFO     ALTER TABLE opt_allocation ADD PRIMARY KEY (id_residual);
16:30:54 INFO     ALTER TABLE opt_allocation ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
16:30:54 INFO     SELECT AddGeometryColumn ('public', 'opt_plants','geom', 3035, 'POINT', 2);
16:30:54 INFO     
            SELECT  id_target
            FROM plants_costs_aggregated_100kw
            WHERE rank = 3
            ORDER BY cost_total ASC
            LIMIT 1
                ;
            
16:30:54 DEBUG    SELECTED PLANT = 6
16:30:54 INFO     
    INSERT INTO opt_residual AS b (
        id_residual,
        id_target,
        id_building,
        farm_used,
        length,
        rank,
        manure_available,
        crop_available,
        methane_from_manure,
        methane_from_crop,
        methane_total_produced
    )
    SELECT
        nextval('serial'),
        a.id_target,
        a.id_building,
        0,
        a.length,
        a.rank,
        CASE
            WHEN a.length > 10000 THEN 0
            ELSE a.manure
        END AS manure,
        a.crop_production,
        a.manure * 14.4,
        a.crop_production * 125.4,
        a.manure * 14.4 +  a.crop_production * 125.4
    FROM plants_costs_100kw AS a
    ;
    
16:30:54 INFO     
        WITH
        current_plant AS (
            SELECT 6 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:54 INFO     
        WITH
        current_plant AS (
            SELECT 6 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:54 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:54 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:54 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 6
        AND farm_used > 0
        ;
    
16:30:54 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:54 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:55 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:55 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 216216
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:55 DEBUG    found plant: id_target = 22
16:30:55 DEBUG    plant capacity: 100 	 iteration: 1 
	 rank: 3 	 current plant: 22
16:30:55 INFO     
        WITH
        current_plant AS (
            SELECT 22 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:55 INFO     
        WITH
        current_plant AS (
            SELECT 22 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:55 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:55 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:55 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 22
        AND farm_used > 0
        ;
    
16:30:55 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:55 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:55 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:55 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 216216
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:55 DEBUG    found plant: id_target = 9
16:30:55 DEBUG    plant capacity: 100 	 iteration: 2 
	 rank: 3 	 current plant: 9
16:30:55 INFO     
        WITH
        current_plant AS (
            SELECT 9 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:55 INFO     
        WITH
        current_plant AS (
            SELECT 9 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:55 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:55 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:55 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 9
        AND farm_used > 0
        ;
    
16:30:55 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:55 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:56 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:56 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 216216
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:56 DEBUG    found plant: id_target = 3
16:30:56 DEBUG    plant capacity: 100 	 iteration: 3 
	 rank: 3 	 current plant: 3
16:30:56 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:56 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:56 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:56 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:56 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 3
        AND farm_used > 0
        ;
    
16:30:56 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:56 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:56 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:56 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 216216
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:56 DEBUG    found plant: id_target = 16
16:30:56 DEBUG    plant capacity: 100 	 iteration: 4 
	 rank: 3 	 current plant: 16
16:30:56 INFO     
        WITH
        current_plant AS (
            SELECT 16 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:56 INFO     
        WITH
        current_plant AS (
            SELECT 16 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:56 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:56 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:56 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 16
        AND farm_used > 0
        ;
    
16:30:56 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:56 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:56 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:56 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 216216
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:56 DEBUG    found plant: id_target = 1
16:30:56 DEBUG    plant capacity: 100 	 iteration: 5 
	 rank: 3 	 current plant: 1
16:30:56 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:57 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:57 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:57 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:57 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1
        AND farm_used > 0
        ;
    
16:30:57 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:57 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:57 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:57 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 216216
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:57 DEBUG    found plant: id_target = 14
16:30:57 DEBUG    plant capacity: 100 	 iteration: 6 
	 rank: 3 	 current plant: 14
16:30:57 INFO     
        WITH
        current_plant AS (
            SELECT 14 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:57 INFO     
        WITH
        current_plant AS (
            SELECT 14 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:57 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:57 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:57 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 14
        AND farm_used > 0
        ;
    
16:30:57 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:57 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:57 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:57 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 216216
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:57 DEBUG    found plant: id_target = 11
16:30:57 DEBUG    plant capacity: 100 	 iteration: 7 
	 rank: 3 	 current plant: 11
16:30:57 INFO     
        WITH
        current_plant AS (
            SELECT 11 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (s.manure_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_available > 0 AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
16:30:58 INFO     
        WITH
        current_plant AS (
            SELECT 11 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (manure_available) AS manure_available,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
16:30:58 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_available > 0 AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
16:30:58 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                a.crop_available - p.crop_required AS crop_residual,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced, methane_required
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
16:30:58 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 11
        AND farm_used > 0
        ;
    
16:30:58 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            farm_used = 3
            AND COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
16:30:58 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                manure_available * 14.4 AS methane_from_manure,
                crop_available * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
16:30:58 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
16:30:58 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced  FROM costs
        WHERE methane_total_produced >= 216216
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        ;
    
16:30:58 ERROR    no more plants for the rank 3
16:30:58 DEBUG    plant capacity: 100 	 iteration: 8 
	 rank: 2 	 current plant: 11
16:30:58 INFO     
        DROP TABLE IF EXISTS opt_plants_100kw CASCADE;
CREATE TABLE opt_plants_100kw AS
        SELECT *
        FROM opt_plants
        ;
    
16:30:58 INFO     
        DROP TABLE IF EXISTS opt_allocation_100kw CASCADE;
CREATE TABLE opt_allocation_100kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM opt_allocation AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
16:30:58 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:58 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:59 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:59 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
16:30:59 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, crop_residual, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
