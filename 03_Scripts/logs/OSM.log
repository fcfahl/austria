14:36:16 WARNING  is when this event was logged.
14:36:16 INFO     DROP SEQUENCE IF EXISTS serial;
CREATE SEQUENCE serial;
14:36:16 INFO     DROP SEQUENCE IF EXISTS plants;
CREATE SEQUENCE plants;
14:36:16 INFO     DROP TABLE IF EXISTS opt_plants CASCADE;
CREATE TABLE opt_plants (id_plant integer not null, id_target integer, plant_capacity double precision, rank integer, length_manure_avg double precision, length_crop_avg double precision, manure_required double precision, manure_available double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_required double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, ratio_manure double precision, ratio_crop double precision);
14:36:16 INFO     DROP TABLE IF EXISTS opt_residual CASCADE;
CREATE TABLE opt_residual (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
14:36:16 INFO     DROP TABLE IF EXISTS opt_allocation CASCADE;
CREATE TABLE opt_allocation (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
14:36:16 INFO     ALTER TABLE opt_plants ADD PRIMARY KEY (id_plant);
14:36:16 INFO     ALTER TABLE opt_residual ADD PRIMARY KEY (id_residual);
14:36:16 INFO     ALTER TABLE opt_residual ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
14:36:16 INFO     ALTER TABLE opt_allocation ADD PRIMARY KEY (id_residual);
14:36:16 INFO     ALTER TABLE opt_allocation ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
14:36:16 INFO     SELECT AddGeometryColumn ('public', 'opt_plants','geom', 3035, 'POINT', 2);
14:36:16 INFO     
            SELECT  id_target
            FROM plants_costs_aggregated_750kw
            WHERE rank = 3
            ORDER BY cost_total ASC
            LIMIT 1
                ;
            
14:36:16 DEBUG    SELECTED PLANT = 1
14:36:16 INFO     
    INSERT INTO opt_residual AS b (
        id_residual,
        id_target,
        id_building,
        farm_used,
        length,
        rank,
        plant_capacity,
        manure_available,
        crop_available,
        methane_from_manure,
        methane_from_crop,
        methane_total_produced
    )
    SELECT
        nextval('serial'),
        a.id_target,
        a.id_building,
        0,
        a.length,
        a.rank,
        0,
        CASE
            WHEN a.length > 10000 THEN 0
            ELSE a.manure
        END AS manure,
        a.crop_production,
        a.manure * 14.4,
        a.crop_production * 125.4,
        a.manure * 14.4 +  a.crop_production * 125.4
    FROM plants_costs_750kw AS a
    ;
    
14:36:17 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:17 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:17 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:17 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:17 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1
        AND farm_used > 0
        ;
    
14:36:17 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:18 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:19 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:19 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:19 ERROR    

                methane demand:     1463415
                methane produced:   1642240
                manure_available:   17050
                crop_available:     11138

                
14:36:19 DEBUG    found plant: id_target = 3
14:36:19 DEBUG    plant capacity: 750 	 iteration: 1 
	 rank: 3 	 current plant: 3
14:36:19 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:19 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:19 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:19 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:19 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 3
        AND farm_used > 0
        ;
    
14:36:19 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:19 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:20 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:20 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:20 ERROR    

                methane demand:     1463415
                methane produced:   1715495
                manure_available:   22061
                crop_available:     11146

                
14:36:20 DEBUG    found plant: id_target = 18
14:36:20 DEBUG    plant capacity: 750 	 iteration: 2 
	 rank: 3 	 current plant: 18
14:36:20 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:20 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:21 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:21 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:21 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 18
        AND farm_used > 0
        ;
    
14:36:21 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:21 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:22 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:22 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:22 ERROR    

                methane demand:     1463415
                methane produced:   1721238
                manure_available:   20633
                crop_available:     11356

                
14:36:22 DEBUG    found plant: id_target = 8
14:36:22 DEBUG    plant capacity: 750 	 iteration: 3 
	 rank: 3 	 current plant: 8
14:36:22 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:22 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:22 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:23 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:23 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 8
        AND farm_used > 0
        ;
    
14:36:23 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:23 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:24 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:24 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:24 ERROR    no more plants for the rank 3
14:36:24 DEBUG    plant capacity: 750 	 iteration: 4 
	 rank: 2 	 current plant: 8
14:36:24 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:24 ERROR    

                methane demand:     1463415
                methane produced:   1488362
                manure_available:   6434
                crop_available:     11129

                
14:36:24 DEBUG    found plant: id_target = 241
14:36:24 DEBUG    plant capacity: 750 	 iteration: 5 
	 rank: 2 	 current plant: 241
14:36:24 INFO     
        WITH
        current_plant AS (
            SELECT 241 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:24 INFO     
        WITH
        current_plant AS (
            SELECT 241 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:24 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:25 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 241
        AND farm_used > 0
        ;
    
14:36:25 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:25 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:26 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:26 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:26 ERROR    

                methane demand:     1463415
                methane produced:   1541001
                manure_available:   9469
                crop_available:     11201

                
14:36:26 DEBUG    found plant: id_target = 85
14:36:26 DEBUG    plant capacity: 750 	 iteration: 6 
	 rank: 2 	 current plant: 85
14:36:26 INFO     
        WITH
        current_plant AS (
            SELECT 85 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:26 INFO     
        WITH
        current_plant AS (
            SELECT 85 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:26 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:26 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 85
        AND farm_used > 0
        ;
    
14:36:26 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:26 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:27 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:27 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:27 ERROR    

                methane demand:     1463415
                methane produced:   1537553
                manure_available:   9692
                crop_available:     11148

                
14:36:27 DEBUG    found plant: id_target = 547
14:36:27 DEBUG    plant capacity: 750 	 iteration: 7 
	 rank: 2 	 current plant: 547
14:36:27 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:27 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:28 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:28 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:28 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 547
        AND farm_used > 0
        ;
    
14:36:28 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:28 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:29 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:29 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:29 ERROR    

                methane demand:     1463415
                methane produced:   1656708
                manure_available:   17637
                crop_available:     11186

                
14:36:29 DEBUG    found plant: id_target = 562
14:36:29 DEBUG    plant capacity: 750 	 iteration: 8 
	 rank: 2 	 current plant: 562
14:36:29 INFO     
        WITH
        current_plant AS (
            SELECT 562 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:29 INFO     
        WITH
        current_plant AS (
            SELECT 562 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:30 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:30 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 562
        AND farm_used > 0
        ;
    
14:36:30 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:30 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:31 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:31 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:31 ERROR    

                methane demand:     1463415
                methane produced:   1634595
                manure_available:   16591
                crop_available:     11129

                
14:36:31 DEBUG    found plant: id_target = 627
14:36:31 DEBUG    plant capacity: 750 	 iteration: 9 
	 rank: 2 	 current plant: 627
14:36:31 INFO     
        WITH
        current_plant AS (
            SELECT 627 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:31 INFO     
        WITH
        current_plant AS (
            SELECT 627 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:31 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:31 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:31 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 627
        AND farm_used > 0
        ;
    
14:36:31 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:32 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:32 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:32 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:32 ERROR    

                methane demand:     1463415
                methane produced:   1608073
                manure_available:   14361
                crop_available:     11174

                
14:36:32 DEBUG    found plant: id_target = 111
14:36:32 DEBUG    plant capacity: 750 	 iteration: 10 
	 rank: 2 	 current plant: 111
14:36:32 INFO     
        WITH
        current_plant AS (
            SELECT 111 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:33 INFO     
        WITH
        current_plant AS (
            SELECT 111 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:33 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:33 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:33 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 111
        AND farm_used > 0
        ;
    
14:36:33 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:33 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:34 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:34 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:34 ERROR    

                methane demand:     1463415
                methane produced:   1693927
                manure_available:   20748
                crop_available:     11125

                
14:36:34 DEBUG    found plant: id_target = 295
14:36:34 DEBUG    plant capacity: 750 	 iteration: 11 
	 rank: 2 	 current plant: 295
14:36:34 INFO     
        WITH
        current_plant AS (
            SELECT 295 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:34 INFO     
        WITH
        current_plant AS (
            SELECT 295 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:34 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:35 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:35 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 295
        AND farm_used > 0
        ;
    
14:36:35 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:35 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:36 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:36 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:36 ERROR    

                methane demand:     1463415
                methane produced:   1768865
                manure_available:   23712
                crop_available:     11382

                
14:36:36 DEBUG    found plant: id_target = 855
14:36:36 DEBUG    plant capacity: 750 	 iteration: 12 
	 rank: 2 	 current plant: 855
14:36:36 INFO     
        WITH
        current_plant AS (
            SELECT 855 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:36 INFO     
        WITH
        current_plant AS (
            SELECT 855 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:36 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:36 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:36 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 855
        AND farm_used > 0
        ;
    
14:36:36 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:36 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:37 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:37 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:37 ERROR    

                methane demand:     1463415
                methane produced:   1807662
                manure_available:   28463
                crop_available:     11146

                
14:36:37 DEBUG    found plant: id_target = 801
14:36:37 DEBUG    plant capacity: 750 	 iteration: 13 
	 rank: 2 	 current plant: 801
14:36:37 INFO     
        WITH
        current_plant AS (
            SELECT 801 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:37 INFO     
        WITH
        current_plant AS (
            SELECT 801 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:38 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:38 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:38 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 801
        AND farm_used > 0
        ;
    
14:36:38 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:38 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:39 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:39 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:39 ERROR    

                methane demand:     1463415
                methane produced:   1808854
                manure_available:   28107
                crop_available:     11196

                
14:36:39 DEBUG    found plant: id_target = 428
14:36:39 DEBUG    plant capacity: 750 	 iteration: 14 
	 rank: 2 	 current plant: 428
14:36:39 INFO     
        WITH
        current_plant AS (
            SELECT 428 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:39 INFO     
        WITH
        current_plant AS (
            SELECT 428 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:39 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 750
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:39 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            4766.82410423 AS manure_required,
            11122.5895765 AS crop_required,
            1463415 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 750,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:39 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 428
        AND farm_used > 0
        ;
    
14:36:39 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:40 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:40 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:40 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:40 ERROR    no more plants for the rank 2
14:36:40 DEBUG    plant capacity: 750 	 iteration: 15 
	 rank: 1 	 current plant: 428
14:36:40 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1463415
        AND crop_available + crop_additional >= 11122.5895765
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:40 ERROR    no more plants for the rank 1
14:36:40 DEBUG    plant capacity: 750 	 iteration: 16 
	 rank: 0 	 current plant: 428
14:36:40 INFO     
        DROP TABLE IF EXISTS opt_plants_750kw CASCADE;
CREATE TABLE opt_plants_750kw AS
        SELECT *
        FROM opt_plants
        ;
    
14:36:40 INFO     
        DROP TABLE IF EXISTS opt_allocation_750kw CASCADE;
CREATE TABLE opt_allocation_750kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM opt_allocation AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
        ;
    
14:36:41 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:36:41 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:36:41 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1000__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:36:42 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1250__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:36:42 INFO     
            INSERT INTO opt_allocation_750kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:36:42 INFO     DROP TABLE IF EXISTS opt_plants CASCADE;
CREATE TABLE opt_plants (id_plant integer not null, id_target integer, plant_capacity double precision, rank integer, length_manure_avg double precision, length_crop_avg double precision, manure_required double precision, manure_available double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_required double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, ratio_manure double precision, ratio_crop double precision);
14:36:42 INFO     DROP TABLE IF EXISTS opt_residual CASCADE;
CREATE TABLE opt_residual (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
14:36:42 INFO     DROP TABLE IF EXISTS opt_allocation CASCADE;
CREATE TABLE opt_allocation (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
14:36:42 INFO     ALTER TABLE opt_plants ADD PRIMARY KEY (id_plant);
14:36:42 INFO     ALTER TABLE opt_residual ADD PRIMARY KEY (id_residual);
14:36:42 INFO     ALTER TABLE opt_residual ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
14:36:42 INFO     ALTER TABLE opt_allocation ADD PRIMARY KEY (id_residual);
14:36:42 INFO     ALTER TABLE opt_allocation ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
14:36:42 INFO     SELECT AddGeometryColumn ('public', 'opt_plants','geom', 3035, 'POINT', 2);
14:36:42 INFO     
            SELECT  id_target
            FROM plants_costs_aggregated_500kw
            WHERE rank = 3
            ORDER BY cost_total ASC
            LIMIT 1
                ;
            
14:36:42 DEBUG    SELECTED PLANT = 1
14:36:42 INFO     
    INSERT INTO opt_residual AS b (
        id_residual,
        id_target,
        id_building,
        farm_used,
        length,
        rank,
        plant_capacity,
        manure_available,
        crop_available,
        methane_from_manure,
        methane_from_crop,
        methane_total_produced
    )
    SELECT
        nextval('serial'),
        a.id_target,
        a.id_building,
        0,
        a.length,
        a.rank,
        0,
        CASE
            WHEN a.length > 10000 THEN 0
            ELSE a.manure
        END AS manure,
        a.crop_production,
        a.manure * 14.4,
        a.crop_production * 125.4,
        a.manure * 14.4 +  a.crop_production * 125.4
    FROM plants_costs_500kw AS a
    ;
    
14:36:43 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:43 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:43 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:43 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:43 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1
        AND farm_used > 0
        ;
    
14:36:43 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:43 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:44 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:44 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:44 ERROR    

                methane demand:     1000000
                methane produced:   1148137
                manure_available:   13015
                crop_available:     7661

                
14:36:44 DEBUG    found plant: id_target = 3
14:36:44 DEBUG    plant capacity: 500 	 iteration: 1 
	 rank: 3 	 current plant: 3
14:36:44 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:44 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:45 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:45 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:45 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 3
        AND farm_used > 0
        ;
    
14:36:45 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:45 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:46 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:46 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:46 ERROR    

                methane demand:     1000000
                methane produced:   1135336
                manure_available:   12521
                crop_available:     7615

                
14:36:46 DEBUG    found plant: id_target = 8
14:36:46 DEBUG    plant capacity: 500 	 iteration: 2 
	 rank: 3 	 current plant: 8
14:36:46 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:46 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:46 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:46 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:46 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 8
        AND farm_used > 0
        ;
    
14:36:46 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:47 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:47 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:47 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:47 ERROR    

                methane demand:     1000000
                methane produced:   1174357
                manure_available:   14328
                crop_available:     7719

                
14:36:47 DEBUG    found plant: id_target = 18
14:36:47 DEBUG    plant capacity: 500 	 iteration: 3 
	 rank: 3 	 current plant: 18
14:36:47 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:48 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:48 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:48 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:48 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 18
        AND farm_used > 0
        ;
    
14:36:48 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:48 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:49 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:49 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:49 ERROR    no more plants for the rank 3
14:36:49 DEBUG    plant capacity: 500 	 iteration: 4 
	 rank: 2 	 current plant: 18
14:36:49 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:49 ERROR    

                methane demand:     1000000
                methane produced:   1010956
                manure_available:   3423
                crop_available:     7668

                
14:36:49 DEBUG    found plant: id_target = 128
14:36:49 DEBUG    plant capacity: 500 	 iteration: 5 
	 rank: 2 	 current plant: 128
14:36:49 INFO     
        WITH
        current_plant AS (
            SELECT 128 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:49 INFO     
        WITH
        current_plant AS (
            SELECT 128 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:49 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:50 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:50 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 128
        AND farm_used > 0
        ;
    
14:36:50 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:50 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:51 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:51 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:51 ERROR    

                methane demand:     1000000
                methane produced:   1027753
                manure_available:   4898
                crop_available:     7633

                
14:36:51 DEBUG    found plant: id_target = 86
14:36:51 DEBUG    plant capacity: 500 	 iteration: 6 
	 rank: 2 	 current plant: 86
14:36:51 INFO     
        WITH
        current_plant AS (
            SELECT 86 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:51 INFO     
        WITH
        current_plant AS (
            SELECT 86 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:51 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:51 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:51 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 86
        AND farm_used > 0
        ;
    
14:36:51 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:51 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:52 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:52 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:52 ERROR    

                methane demand:     1000000
                methane produced:   1118457
                manure_available:   11183
                crop_available:     7634

                
14:36:52 DEBUG    found plant: id_target = 263
14:36:52 DEBUG    plant capacity: 500 	 iteration: 7 
	 rank: 2 	 current plant: 263
14:36:52 INFO     
        WITH
        current_plant AS (
            SELECT 263 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:52 INFO     
        WITH
        current_plant AS (
            SELECT 263 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:52 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:53 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:53 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 263
        AND farm_used > 0
        ;
    
14:36:53 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:53 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:54 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:54 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:54 ERROR    

                methane demand:     1000000
                methane produced:   1068789
                manure_available:   6456
                crop_available:     7781

                
14:36:54 DEBUG    found plant: id_target = 547
14:36:54 DEBUG    plant capacity: 500 	 iteration: 8 
	 rank: 2 	 current plant: 547
14:36:54 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:54 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:54 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:54 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:54 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 547
        AND farm_used > 0
        ;
    
14:36:54 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:54 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:55 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:55 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:55 ERROR    

                methane demand:     1000000
                methane produced:   1096656
                manure_available:   9810
                crop_available:     7618

                
14:36:55 DEBUG    found plant: id_target = 669
14:36:55 DEBUG    plant capacity: 500 	 iteration: 9 
	 rank: 2 	 current plant: 669
14:36:55 INFO     
        WITH
        current_plant AS (
            SELECT 669 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:55 INFO     
        WITH
        current_plant AS (
            SELECT 669 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:55 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:56 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:56 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 669
        AND farm_used > 0
        ;
    
14:36:56 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:56 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:57 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:57 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:57 ERROR    

                methane demand:     1000000
                methane produced:   1125067
                manure_available:   11872
                crop_available:     7608

                
14:36:57 DEBUG    found plant: id_target = 800
14:36:57 DEBUG    plant capacity: 500 	 iteration: 10 
	 rank: 2 	 current plant: 800
14:36:57 INFO     
        WITH
        current_plant AS (
            SELECT 800 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:57 INFO     
        WITH
        current_plant AS (
            SELECT 800 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:57 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:57 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:57 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 800
        AND farm_used > 0
        ;
    
14:36:57 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:57 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:36:58 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:36:58 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:36:58 ERROR    

                methane demand:     1000000
                methane produced:   1153618
                manure_available:   13624
                crop_available:     7634

                
14:36:58 DEBUG    found plant: id_target = 184
14:36:58 DEBUG    plant capacity: 500 	 iteration: 11 
	 rank: 2 	 current plant: 184
14:36:58 INFO     
        WITH
        current_plant AS (
            SELECT 184 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:36:58 INFO     
        WITH
        current_plant AS (
            SELECT 184 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:36:58 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:36:59 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:36:59 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 184
        AND farm_used > 0
        ;
    
14:36:59 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:36:59 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:00 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:00 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:00 ERROR    

                methane demand:     1000000
                methane produced:   1179689
                manure_available:   14628
                crop_available:     7727

                
14:37:00 DEBUG    found plant: id_target = 388
14:37:00 DEBUG    plant capacity: 500 	 iteration: 12 
	 rank: 2 	 current plant: 388
14:37:00 INFO     
        WITH
        current_plant AS (
            SELECT 388 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:00 INFO     
        WITH
        current_plant AS (
            SELECT 388 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:00 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:00 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:00 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 388
        AND farm_used > 0
        ;
    
14:37:00 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:00 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:01 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:01 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:01 ERROR    

                methane demand:     1000000
                methane produced:   1137941
                manure_available:   12714
                crop_available:     7614

                
14:37:01 DEBUG    found plant: id_target = 841
14:37:01 DEBUG    plant capacity: 500 	 iteration: 13 
	 rank: 2 	 current plant: 841
14:37:01 INFO     
        WITH
        current_plant AS (
            SELECT 841 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:01 INFO     
        WITH
        current_plant AS (
            SELECT 841 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:01 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:02 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:02 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 841
        AND farm_used > 0
        ;
    
14:37:02 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:02 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:03 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:03 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:03 ERROR    

                methane demand:     1000000
                methane produced:   1191325
                manure_available:   16087
                crop_available:     7652

                
14:37:03 DEBUG    found plant: id_target = 600
14:37:03 DEBUG    plant capacity: 500 	 iteration: 14 
	 rank: 2 	 current plant: 600
14:37:03 INFO     
        WITH
        current_plant AS (
            SELECT 600 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:03 INFO     
        WITH
        current_plant AS (
            SELECT 600 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:03 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:03 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:03 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 600
        AND farm_used > 0
        ;
    
14:37:03 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:03 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:04 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:04 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:04 ERROR    

                methane demand:     1000000
                methane produced:   1231662
                manure_available:   17831
                crop_available:     7774

                
14:37:04 DEBUG    found plant: id_target = 772
14:37:04 DEBUG    plant capacity: 500 	 iteration: 15 
	 rank: 2 	 current plant: 772
14:37:04 INFO     
        WITH
        current_plant AS (
            SELECT 772 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:04 INFO     
        WITH
        current_plant AS (
            SELECT 772 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:04 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:05 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:05 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 772
        AND farm_used > 0
        ;
    
14:37:05 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:05 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:06 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:06 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:06 ERROR    

                methane demand:     1000000
                methane produced:   1084287
                manure_available:   7421
                crop_available:     7794

                
14:37:06 DEBUG    found plant: id_target = 520
14:37:06 DEBUG    plant capacity: 500 	 iteration: 16 
	 rank: 2 	 current plant: 520
14:37:06 INFO     
        WITH
        current_plant AS (
            SELECT 520 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:06 INFO     
        WITH
        current_plant AS (
            SELECT 520 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:06 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:06 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:06 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 520
        AND farm_used > 0
        ;
    
14:37:06 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:06 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:07 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:07 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:07 ERROR    

                methane demand:     1000000
                methane produced:   1209465
                manure_available:   17388
                crop_available:     7648

                
14:37:07 DEBUG    found plant: id_target = 102
14:37:07 DEBUG    plant capacity: 500 	 iteration: 17 
	 rank: 2 	 current plant: 102
14:37:07 INFO     
        WITH
        current_plant AS (
            SELECT 102 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:07 INFO     
        WITH
        current_plant AS (
            SELECT 102 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:07 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:08 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:08 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 102
        AND farm_used > 0
        ;
    
14:37:08 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:08 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:08 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:08 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:09 ERROR    

                methane demand:     1000000
                methane produced:   1257308
                manure_available:   20629
                crop_available:     7657

                
14:37:09 DEBUG    found plant: id_target = 620
14:37:09 DEBUG    plant capacity: 500 	 iteration: 18 
	 rank: 2 	 current plant: 620
14:37:09 INFO     
        WITH
        current_plant AS (
            SELECT 620 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:09 INFO     
        WITH
        current_plant AS (
            SELECT 620 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:09 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:09 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:09 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 620
        AND farm_used > 0
        ;
    
14:37:09 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:09 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:10 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:10 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:10 ERROR    

                methane demand:     1000000
                methane produced:   1274089
                manure_available:   21987
                crop_available:     7635

                
14:37:10 DEBUG    found plant: id_target = 419
14:37:10 DEBUG    plant capacity: 500 	 iteration: 19 
	 rank: 2 	 current plant: 419
14:37:10 INFO     
        WITH
        current_plant AS (
            SELECT 419 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:10 INFO     
        WITH
        current_plant AS (
            SELECT 419 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:10 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:11 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:11 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 419
        AND farm_used > 0
        ;
    
14:37:11 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:11 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:12 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:12 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:12 ERROR    

                methane demand:     1000000
                methane produced:   1255726
                manure_available:   20680
                crop_available:     7638

                
14:37:12 DEBUG    found plant: id_target = 396
14:37:12 DEBUG    plant capacity: 500 	 iteration: 20 
	 rank: 2 	 current plant: 396
14:37:12 INFO     
        WITH
        current_plant AS (
            SELECT 396 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:12 INFO     
        WITH
        current_plant AS (
            SELECT 396 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:12 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:12 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:12 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 396
        AND farm_used > 0
        ;
    
14:37:12 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:13 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:13 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:13 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:13 ERROR    no more plants for the rank 2
14:37:13 DEBUG    plant capacity: 500 	 iteration: 21 
	 rank: 1 	 current plant: 396
14:37:13 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:13 ERROR    

                methane demand:     1000000
                methane produced:   1079921
                manure_available:   8747
                crop_available:     7607

                
14:37:13 DEBUG    found plant: id_target = 935
14:37:13 DEBUG    plant capacity: 500 	 iteration: 22 
	 rank: 1 	 current plant: 935
14:37:13 INFO     
        WITH
        current_plant AS (
            SELECT 935 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:13 INFO     
        WITH
        current_plant AS (
            SELECT 935 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:13 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 500
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:14 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            3257.32899023 AS manure_required,
            7600.43431053 AS crop_required,
            1000000 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 500,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:14 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 935
        AND farm_used > 0
        ;
    
14:37:14 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:14 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:14 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:14 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 1000000
        AND crop_available + crop_additional >= 7600.43431053
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:14 ERROR    no more plants for the rank 1
14:37:14 DEBUG    plant capacity: 500 	 iteration: 23 
	 rank: 0 	 current plant: 935
14:37:14 INFO     
        DROP TABLE IF EXISTS opt_plants_500kw CASCADE;
CREATE TABLE opt_plants_500kw AS
        SELECT *
        FROM opt_plants
        ;
    
14:37:14 INFO     
        DROP TABLE IF EXISTS opt_allocation_500kw CASCADE;
CREATE TABLE opt_allocation_500kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM opt_allocation AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
        ;
    
14:37:15 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:15 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:16 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1000__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:16 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1250__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:16 INFO     
            INSERT INTO opt_allocation_500kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:17 INFO     DROP TABLE IF EXISTS opt_plants CASCADE;
CREATE TABLE opt_plants (id_plant integer not null, id_target integer, plant_capacity double precision, rank integer, length_manure_avg double precision, length_crop_avg double precision, manure_required double precision, manure_available double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_required double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, ratio_manure double precision, ratio_crop double precision);
14:37:17 INFO     DROP TABLE IF EXISTS opt_residual CASCADE;
CREATE TABLE opt_residual (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
14:37:17 INFO     DROP TABLE IF EXISTS opt_allocation CASCADE;
CREATE TABLE opt_allocation (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
14:37:17 INFO     ALTER TABLE opt_plants ADD PRIMARY KEY (id_plant);
14:37:17 INFO     ALTER TABLE opt_residual ADD PRIMARY KEY (id_residual);
14:37:17 INFO     ALTER TABLE opt_residual ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
14:37:17 INFO     ALTER TABLE opt_allocation ADD PRIMARY KEY (id_residual);
14:37:17 INFO     ALTER TABLE opt_allocation ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
14:37:17 INFO     SELECT AddGeometryColumn ('public', 'opt_plants','geom', 3035, 'POINT', 2);
14:37:17 INFO     
            SELECT  id_target
            FROM plants_costs_aggregated_250kw
            WHERE rank = 3
            ORDER BY cost_total ASC
            LIMIT 1
                ;
            
14:37:17 DEBUG    SELECTED PLANT = 1
14:37:17 INFO     
    INSERT INTO opt_residual AS b (
        id_residual,
        id_target,
        id_building,
        farm_used,
        length,
        rank,
        plant_capacity,
        manure_available,
        crop_available,
        methane_from_manure,
        methane_from_crop,
        methane_total_produced
    )
    SELECT
        nextval('serial'),
        a.id_target,
        a.id_building,
        0,
        a.length,
        a.rank,
        0,
        CASE
            WHEN a.length > 10000 THEN 0
            ELSE a.manure
        END AS manure,
        a.crop_production,
        a.manure * 14.4,
        a.crop_production * 125.4,
        a.manure * 14.4 +  a.crop_production * 125.4
    FROM plants_costs_250kw AS a
    ;
    
14:37:17 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:17 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:17 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:17 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:18 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1
        AND farm_used > 0
        ;
    
14:37:18 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:18 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:18 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:18 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:18 ERROR    

                methane demand:     526316
                methane produced:   615010
                manure_available:   6614
                crop_available:     4144

                
14:37:18 DEBUG    found plant: id_target = 3
14:37:18 DEBUG    plant capacity: 250 	 iteration: 1 
	 rank: 3 	 current plant: 3
14:37:18 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:18 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:18 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:19 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:19 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 3
        AND farm_used > 0
        ;
    
14:37:19 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:19 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:19 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:19 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:19 ERROR    

                methane demand:     526316
                methane produced:   602749
                manure_available:   6825
                crop_available:     4022

                
14:37:19 DEBUG    found plant: id_target = 8
14:37:19 DEBUG    plant capacity: 250 	 iteration: 2 
	 rank: 3 	 current plant: 8
14:37:19 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:20 INFO     
        WITH
        current_plant AS (
            SELECT 8 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:20 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:20 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:20 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 8
        AND farm_used > 0
        ;
    
14:37:20 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:20 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:21 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:21 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:21 ERROR    

                methane demand:     526316
                methane produced:   617869
                manure_available:   7892
                crop_available:     4020

                
14:37:21 DEBUG    found plant: id_target = 18
14:37:21 DEBUG    plant capacity: 250 	 iteration: 3 
	 rank: 3 	 current plant: 18
14:37:21 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:21 INFO     
        WITH
        current_plant AS (
            SELECT 18 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:21 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:21 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:21 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 18
        AND farm_used > 0
        ;
    
14:37:21 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:21 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:22 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:22 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:22 ERROR    

                methane demand:     526316
                methane produced:   617712
                manure_available:   7276
                crop_available:     4090

                
14:37:22 DEBUG    found plant: id_target = 21
14:37:22 DEBUG    plant capacity: 250 	 iteration: 4 
	 rank: 3 	 current plant: 21
14:37:22 INFO     
        WITH
        current_plant AS (
            SELECT 21 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:22 INFO     
        WITH
        current_plant AS (
            SELECT 21 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:22 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:22 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:22 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 21
        AND farm_used > 0
        ;
    
14:37:22 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:23 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:23 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:23 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:23 ERROR    no more plants for the rank 3
14:37:23 DEBUG    plant capacity: 250 	 iteration: 5 
	 rank: 2 	 current plant: 21
14:37:23 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:23 ERROR    

                methane demand:     526316
                methane produced:   536038
                manure_available:   1547
                crop_available:     4096

                
14:37:23 DEBUG    found plant: id_target = 128
14:37:23 DEBUG    plant capacity: 250 	 iteration: 6 
	 rank: 2 	 current plant: 128
14:37:23 INFO     
        WITH
        current_plant AS (
            SELECT 128 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:23 INFO     
        WITH
        current_plant AS (
            SELECT 128 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:23 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:23 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:24 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 128
        AND farm_used > 0
        ;
    
14:37:24 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:24 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:24 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:24 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:24 ERROR    

                methane demand:     526316
                methane produced:   550593
                manure_available:   2227
                crop_available:     4134

                
14:37:24 DEBUG    found plant: id_target = 75
14:37:24 DEBUG    plant capacity: 250 	 iteration: 7 
	 rank: 2 	 current plant: 75
14:37:24 INFO     
        WITH
        current_plant AS (
            SELECT 75 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:24 INFO     
        WITH
        current_plant AS (
            SELECT 75 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:25 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:25 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 75
        AND farm_used > 0
        ;
    
14:37:25 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:25 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:25 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:25 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:25 ERROR    

                methane demand:     526316
                methane produced:   551883
                manure_available:   2976
                crop_available:     4059

                
14:37:25 DEBUG    found plant: id_target = 547
14:37:25 DEBUG    plant capacity: 250 	 iteration: 8 
	 rank: 2 	 current plant: 547
14:37:25 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:26 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:26 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:26 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 547
        AND farm_used > 0
        ;
    
14:37:26 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:26 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:26 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:26 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:26 ERROR    

                methane demand:     526316
                methane produced:   586558
                manure_available:   5322
                crop_available:     4066

                
14:37:26 DEBUG    found plant: id_target = 264
14:37:26 DEBUG    plant capacity: 250 	 iteration: 9 
	 rank: 2 	 current plant: 264
14:37:26 INFO     
        WITH
        current_plant AS (
            SELECT 264 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:27 INFO     
        WITH
        current_plant AS (
            SELECT 264 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:27 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:27 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 264
        AND farm_used > 0
        ;
    
14:37:27 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:27 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:28 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:28 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:28 ERROR    

                methane demand:     526316
                methane produced:   564912
                manure_available:   3917
                crop_available:     4055

                
14:37:28 DEBUG    found plant: id_target = 257
14:37:28 DEBUG    plant capacity: 250 	 iteration: 10 
	 rank: 2 	 current plant: 257
14:37:28 INFO     
        WITH
        current_plant AS (
            SELECT 257 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:28 INFO     
        WITH
        current_plant AS (
            SELECT 257 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:28 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:28 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:28 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 257
        AND farm_used > 0
        ;
    
14:37:28 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:28 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:29 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:29 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:29 ERROR    

                methane demand:     526316
                methane produced:   571063
                manure_available:   4587
                crop_available:     4027

                
14:37:29 DEBUG    found plant: id_target = 670
14:37:29 DEBUG    plant capacity: 250 	 iteration: 11 
	 rank: 2 	 current plant: 670
14:37:29 INFO     
        WITH
        current_plant AS (
            SELECT 670 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:29 INFO     
        WITH
        current_plant AS (
            SELECT 670 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:29 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:29 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 670
        AND farm_used > 0
        ;
    
14:37:29 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:29 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:30 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:30 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:30 ERROR    

                methane demand:     526316
                methane produced:   569570
                manure_available:   4684
                crop_available:     4004

                
14:37:30 DEBUG    found plant: id_target = 860
14:37:30 DEBUG    plant capacity: 250 	 iteration: 12 
	 rank: 2 	 current plant: 860
14:37:30 INFO     
        WITH
        current_plant AS (
            SELECT 860 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:30 INFO     
        WITH
        current_plant AS (
            SELECT 860 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:30 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:30 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:30 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 860
        AND farm_used > 0
        ;
    
14:37:30 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:30 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:31 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:31 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:31 ERROR    

                methane demand:     526316
                methane produced:   579643
                manure_available:   5058
                crop_available:     4041

                
14:37:31 DEBUG    found plant: id_target = 583
14:37:31 DEBUG    plant capacity: 250 	 iteration: 13 
	 rank: 2 	 current plant: 583
14:37:31 INFO     
        WITH
        current_plant AS (
            SELECT 583 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:31 INFO     
        WITH
        current_plant AS (
            SELECT 583 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:31 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:31 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:31 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 583
        AND farm_used > 0
        ;
    
14:37:31 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:31 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:32 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:32 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:32 ERROR    

                methane demand:     526316
                methane produced:   591098
                manure_available:   6126
                crop_available:     4010

                
14:37:32 DEBUG    found plant: id_target = 166
14:37:32 DEBUG    plant capacity: 250 	 iteration: 14 
	 rank: 2 	 current plant: 166
14:37:32 INFO     
        WITH
        current_plant AS (
            SELECT 166 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:32 INFO     
        WITH
        current_plant AS (
            SELECT 166 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:32 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:32 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:32 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 166
        AND farm_used > 0
        ;
    
14:37:32 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:33 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:33 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:33 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:33 ERROR    

                methane demand:     526316
                methane produced:   571729
                manure_available:   3399
                crop_available:     4168

                
14:37:33 DEBUG    found plant: id_target = 210
14:37:33 DEBUG    plant capacity: 250 	 iteration: 15 
	 rank: 2 	 current plant: 210
14:37:33 INFO     
        WITH
        current_plant AS (
            SELECT 210 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:33 INFO     
        WITH
        current_plant AS (
            SELECT 210 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:33 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:33 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:33 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 210
        AND farm_used > 0
        ;
    
14:37:33 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:34 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:34 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:34 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:34 ERROR    

                methane demand:     526316
                methane produced:   612125
                manure_available:   6645
                crop_available:     4118

                
14:37:34 DEBUG    found plant: id_target = 345
14:37:34 DEBUG    plant capacity: 250 	 iteration: 16 
	 rank: 2 	 current plant: 345
14:37:34 INFO     
        WITH
        current_plant AS (
            SELECT 345 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:34 INFO     
        WITH
        current_plant AS (
            SELECT 345 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:34 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:34 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:34 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 345
        AND farm_used > 0
        ;
    
14:37:34 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:35 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:35 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:35 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:35 ERROR    

                methane demand:     526316
                methane produced:   607366
                manure_available:   6721
                crop_available:     4071

                
14:37:35 DEBUG    found plant: id_target = 865
14:37:35 DEBUG    plant capacity: 250 	 iteration: 17 
	 rank: 2 	 current plant: 865
14:37:35 INFO     
        WITH
        current_plant AS (
            SELECT 865 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:35 INFO     
        WITH
        current_plant AS (
            SELECT 865 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:35 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:35 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:35 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 865
        AND farm_used > 0
        ;
    
14:37:36 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:36 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:36 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:36 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:36 ERROR    

                methane demand:     526316
                methane produced:   620330
                manure_available:   7411
                crop_available:     4095

                
14:37:36 DEBUG    found plant: id_target = 149
14:37:36 DEBUG    plant capacity: 250 	 iteration: 18 
	 rank: 2 	 current plant: 149
14:37:36 INFO     
        WITH
        current_plant AS (
            SELECT 149 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:36 INFO     
        WITH
        current_plant AS (
            SELECT 149 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:36 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:36 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:37 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 149
        AND farm_used > 0
        ;
    
14:37:37 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:37 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:37 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:37 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:37 ERROR    

                methane demand:     526316
                methane produced:   549288
                manure_available:   3302
                crop_available:     4001

                
14:37:37 DEBUG    found plant: id_target = 520
14:37:37 DEBUG    plant capacity: 250 	 iteration: 19 
	 rank: 2 	 current plant: 520
14:37:37 INFO     
        WITH
        current_plant AS (
            SELECT 520 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:37 INFO     
        WITH
        current_plant AS (
            SELECT 520 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:37 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:37 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:38 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 520
        AND farm_used > 0
        ;
    
14:37:38 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:38 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:38 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:38 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:38 ERROR    

                methane demand:     526316
                methane produced:   613116
                manure_available:   6086
                crop_available:     4190

                
14:37:38 DEBUG    found plant: id_target = 153
14:37:38 DEBUG    plant capacity: 250 	 iteration: 20 
	 rank: 2 	 current plant: 153
14:37:38 INFO     
        WITH
        current_plant AS (
            SELECT 153 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:38 INFO     
        WITH
        current_plant AS (
            SELECT 153 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:38 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:38 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:39 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 153
        AND farm_used > 0
        ;
    
14:37:39 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:39 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:39 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:39 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:39 ERROR    

                methane demand:     526316
                methane produced:   590035
                manure_available:   5973
                crop_available:     4019

                
14:37:39 DEBUG    found plant: id_target = 202
14:37:39 DEBUG    plant capacity: 250 	 iteration: 21 
	 rank: 2 	 current plant: 202
14:37:39 INFO     
        WITH
        current_plant AS (
            SELECT 202 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:39 INFO     
        WITH
        current_plant AS (
            SELECT 202 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:39 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:39 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:40 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 202
        AND farm_used > 0
        ;
    
14:37:40 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:40 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:40 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:40 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:40 ERROR    

                methane demand:     526316
                methane produced:   622968
                manure_available:   6991
                crop_available:     4165

                
14:37:40 DEBUG    found plant: id_target = 824
14:37:40 DEBUG    plant capacity: 250 	 iteration: 22 
	 rank: 2 	 current plant: 824
14:37:40 INFO     
        WITH
        current_plant AS (
            SELECT 824 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:40 INFO     
        WITH
        current_plant AS (
            SELECT 824 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:40 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:40 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:41 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 824
        AND farm_used > 0
        ;
    
14:37:41 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:41 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:41 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:41 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:41 ERROR    

                methane demand:     526316
                methane produced:   621891
                manure_available:   7881
                crop_available:     4054

                
14:37:41 DEBUG    found plant: id_target = 718
14:37:41 DEBUG    plant capacity: 250 	 iteration: 23 
	 rank: 2 	 current plant: 718
14:37:41 INFO     
        WITH
        current_plant AS (
            SELECT 718 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:41 INFO     
        WITH
        current_plant AS (
            SELECT 718 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:41 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:41 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:42 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 718
        AND farm_used > 0
        ;
    
14:37:42 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:42 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:42 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:42 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:42 ERROR    

                methane demand:     526316
                methane produced:   577819
                manure_available:   5021
                crop_available:     4031

                
14:37:42 DEBUG    found plant: id_target = 77
14:37:42 DEBUG    plant capacity: 250 	 iteration: 24 
	 rank: 2 	 current plant: 77
14:37:42 INFO     
        WITH
        current_plant AS (
            SELECT 77 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:42 INFO     
        WITH
        current_plant AS (
            SELECT 77 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:42 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:43 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:43 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 77
        AND farm_used > 0
        ;
    
14:37:43 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:43 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:43 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:43 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:43 ERROR    

                methane demand:     526316
                methane produced:   625808
                manure_available:   8268
                crop_available:     4040

                
14:37:43 DEBUG    found plant: id_target = 432
14:37:43 DEBUG    plant capacity: 250 	 iteration: 25 
	 rank: 2 	 current plant: 432
14:37:43 INFO     
        WITH
        current_plant AS (
            SELECT 432 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:43 INFO     
        WITH
        current_plant AS (
            SELECT 432 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:43 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:44 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:44 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 432
        AND farm_used > 0
        ;
    
14:37:44 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:44 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:44 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:44 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:44 ERROR    

                methane demand:     526316
                methane produced:   643712
                manure_available:   9523
                crop_available:     4039

                
14:37:44 DEBUG    found plant: id_target = 854
14:37:44 DEBUG    plant capacity: 250 	 iteration: 26 
	 rank: 2 	 current plant: 854
14:37:44 INFO     
        WITH
        current_plant AS (
            SELECT 854 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:44 INFO     
        WITH
        current_plant AS (
            SELECT 854 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:44 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:44 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:45 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 854
        AND farm_used > 0
        ;
    
14:37:45 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:45 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:45 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:45 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:45 ERROR    

                methane demand:     526316
                methane produced:   631390
                manure_available:   8365
                crop_available:     4074

                
14:37:45 DEBUG    found plant: id_target = 231
14:37:45 DEBUG    plant capacity: 250 	 iteration: 27 
	 rank: 2 	 current plant: 231
14:37:45 INFO     
        WITH
        current_plant AS (
            SELECT 231 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:45 INFO     
        WITH
        current_plant AS (
            SELECT 231 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:45 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:46 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:46 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 231
        AND farm_used > 0
        ;
    
14:37:46 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:46 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:46 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:46 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:46 ERROR    

                methane demand:     526316
                methane produced:   659537
                manure_available:   10888
                crop_available:     4009

                
14:37:46 DEBUG    found plant: id_target = 762
14:37:46 DEBUG    plant capacity: 250 	 iteration: 28 
	 rank: 2 	 current plant: 762
14:37:46 INFO     
        WITH
        current_plant AS (
            SELECT 762 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:46 INFO     
        WITH
        current_plant AS (
            SELECT 762 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:46 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:46 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:47 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 762
        AND farm_used > 0
        ;
    
14:37:47 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:47 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:47 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:47 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:47 ERROR    

                methane demand:     526316
                methane produced:   654800
                manure_available:   10249
                crop_available:     4044

                
14:37:47 DEBUG    found plant: id_target = 54
14:37:47 DEBUG    plant capacity: 250 	 iteration: 29 
	 rank: 2 	 current plant: 54
14:37:47 INFO     
        WITH
        current_plant AS (
            SELECT 54 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:47 INFO     
        WITH
        current_plant AS (
            SELECT 54 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:47 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:47 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:48 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 54
        AND farm_used > 0
        ;
    
14:37:48 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:48 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:48 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:48 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:48 ERROR    

                methane demand:     526316
                methane produced:   667340
                manure_available:   11134
                crop_available:     4043

                
14:37:48 DEBUG    found plant: id_target = 425
14:37:48 DEBUG    plant capacity: 250 	 iteration: 30 
	 rank: 2 	 current plant: 425
14:37:48 INFO     
        WITH
        current_plant AS (
            SELECT 425 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:48 INFO     
        WITH
        current_plant AS (
            SELECT 425 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:48 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:48 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:49 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 425
        AND farm_used > 0
        ;
    
14:37:49 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:49 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:49 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:49 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:49 ERROR    

                methane demand:     526316
                methane produced:   687580
                manure_available:   11588
                crop_available:     4152

                
14:37:49 DEBUG    found plant: id_target = 395
14:37:49 DEBUG    plant capacity: 250 	 iteration: 31 
	 rank: 2 	 current plant: 395
14:37:49 INFO     
        WITH
        current_plant AS (
            SELECT 395 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:49 INFO     
        WITH
        current_plant AS (
            SELECT 395 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:49 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:49 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:50 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 395
        AND farm_used > 0
        ;
    
14:37:50 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:50 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:50 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:50 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:50 ERROR    

                methane demand:     526316
                methane produced:   701736
                manure_available:   13607
                crop_available:     4033

                
14:37:50 DEBUG    found plant: id_target = 416
14:37:50 DEBUG    plant capacity: 250 	 iteration: 32 
	 rank: 2 	 current plant: 416
14:37:50 INFO     
        WITH
        current_plant AS (
            SELECT 416 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:50 INFO     
        WITH
        current_plant AS (
            SELECT 416 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:50 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:50 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:51 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 416
        AND farm_used > 0
        ;
    
14:37:51 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:51 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:51 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:51 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:51 ERROR    no more plants for the rank 2
14:37:51 DEBUG    plant capacity: 250 	 iteration: 33 
	 rank: 1 	 current plant: 416
14:37:51 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:51 ERROR    

                methane demand:     526316
                methane produced:   600218
                manure_available:   6042
                crop_available:     4092

                
14:37:51 DEBUG    found plant: id_target = 1730
14:37:51 DEBUG    plant capacity: 250 	 iteration: 34 
	 rank: 1 	 current plant: 1730
14:37:51 INFO     
        WITH
        current_plant AS (
            SELECT 1730 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:51 INFO     
        WITH
        current_plant AS (
            SELECT 1730 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:51 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:51 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:52 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1730
        AND farm_used > 0
        ;
    
14:37:52 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:52 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:52 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:52 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:52 ERROR    

                methane demand:     526316
                methane produced:   674485
                manure_available:   10849
                crop_available:     4132

                
14:37:52 DEBUG    found plant: id_target = 1498
14:37:52 DEBUG    plant capacity: 250 	 iteration: 35 
	 rank: 1 	 current plant: 1498
14:37:52 INFO     
        WITH
        current_plant AS (
            SELECT 1498 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:52 INFO     
        WITH
        current_plant AS (
            SELECT 1498 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:52 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:52 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:53 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1498
        AND farm_used > 0
        ;
    
14:37:53 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:53 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:53 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:53 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:53 ERROR    

                methane demand:     526316
                methane produced:   711728
                manure_available:   14321
                crop_available:     4031

                
14:37:53 DEBUG    found plant: id_target = 1300
14:37:53 DEBUG    plant capacity: 250 	 iteration: 36 
	 rank: 1 	 current plant: 1300
14:37:53 INFO     
        WITH
        current_plant AS (
            SELECT 1300 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:53 INFO     
        WITH
        current_plant AS (
            SELECT 1300 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:53 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 250
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:53 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            1714.38436482 AS manure_required,
            4000.23018458 AS crop_required,
            526316 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 250,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:53 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1300
        AND farm_used > 0
        ;
    
14:37:53 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:54 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:54 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:54 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 526316
        AND crop_available + crop_additional >= 4000.23018458
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:54 ERROR    no more plants for the rank 1
14:37:54 DEBUG    plant capacity: 250 	 iteration: 37 
	 rank: 0 	 current plant: 1300
14:37:54 INFO     
        DROP TABLE IF EXISTS opt_plants_250kw CASCADE;
CREATE TABLE opt_plants_250kw AS
        SELECT *
        FROM opt_plants
        ;
    
14:37:54 INFO     
        DROP TABLE IF EXISTS opt_allocation_250kw CASCADE;
CREATE TABLE opt_allocation_250kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM opt_allocation AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
        ;
    
14:37:54 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:54 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:55 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1000__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:55 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1250__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:56 INFO     
            INSERT INTO opt_allocation_250kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:37:56 INFO     DROP TABLE IF EXISTS opt_plants CASCADE;
CREATE TABLE opt_plants (id_plant integer not null, id_target integer, plant_capacity double precision, rank integer, length_manure_avg double precision, length_crop_avg double precision, manure_required double precision, manure_available double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_required double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision, ratio_manure double precision, ratio_crop double precision);
14:37:56 INFO     DROP TABLE IF EXISTS opt_residual CASCADE;
CREATE TABLE opt_residual (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
14:37:56 INFO     DROP TABLE IF EXISTS opt_allocation CASCADE;
CREATE TABLE opt_allocation (id_residual integer not null, id_plant integer, id_target integer, id_building integer, farm_used integer, rank integer, plant_capacity double precision, length double precision, length_manure double precision, length_crop double precision, manure_available double precision, manure_required double precision, manure_used double precision, manure_residual double precision, crop_required double precision, crop_available double precision, crop_used double precision, crop_additional double precision, resources_total double precision, methane_from_manure double precision, methane_from_crop double precision, methane_total_produced double precision, cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision);
14:37:56 INFO     ALTER TABLE opt_plants ADD PRIMARY KEY (id_plant);
14:37:56 INFO     ALTER TABLE opt_residual ADD PRIMARY KEY (id_residual);
14:37:56 INFO     ALTER TABLE opt_residual ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
14:37:56 INFO     ALTER TABLE opt_allocation ADD PRIMARY KEY (id_residual);
14:37:56 INFO     ALTER TABLE opt_allocation ADD FOREIGN KEY (id_plant) REFERENCES opt_plants (id_plant);
14:37:56 INFO     SELECT AddGeometryColumn ('public', 'opt_plants','geom', 3035, 'POINT', 2);
14:37:56 INFO     
            SELECT  id_target
            FROM plants_costs_aggregated_100kw
            WHERE rank = 3
            ORDER BY cost_total ASC
            LIMIT 1
                ;
            
14:37:56 DEBUG    SELECTED PLANT = 6
14:37:56 INFO     
    INSERT INTO opt_residual AS b (
        id_residual,
        id_target,
        id_building,
        farm_used,
        length,
        rank,
        plant_capacity,
        manure_available,
        crop_available,
        methane_from_manure,
        methane_from_crop,
        methane_total_produced
    )
    SELECT
        nextval('serial'),
        a.id_target,
        a.id_building,
        0,
        a.length,
        a.rank,
        0,
        CASE
            WHEN a.length > 10000 THEN 0
            ELSE a.manure
        END AS manure,
        a.crop_production,
        a.manure * 14.4,
        a.crop_production * 125.4,
        a.manure * 14.4 +  a.crop_production * 125.4
    FROM plants_costs_100kw AS a
    ;
    
14:37:56 INFO     
        WITH
        current_plant AS (
            SELECT 6 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:56 INFO     
        WITH
        current_plant AS (
            SELECT 6 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:56 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:56 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:56 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 6
        AND farm_used > 0
        ;
    
14:37:56 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:56 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:56 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:56 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:56 ERROR    

                methane demand:     216216
                methane produced:   236491
                manure_available:   1729
                crop_available:     1687

                
14:37:56 DEBUG    found plant: id_target = 22
14:37:56 DEBUG    plant capacity: 100 	 iteration: 1 
	 rank: 3 	 current plant: 22
14:37:56 INFO     
        WITH
        current_plant AS (
            SELECT 22 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:57 INFO     
        WITH
        current_plant AS (
            SELECT 22 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:57 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:57 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:57 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 22
        AND farm_used > 0
        ;
    
14:37:57 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:57 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:57 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:57 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:57 ERROR    

                methane demand:     216216
                methane produced:   261913
                manure_available:   2682
                crop_available:     1780

                
14:37:57 DEBUG    found plant: id_target = 9
14:37:57 DEBUG    plant capacity: 100 	 iteration: 2 
	 rank: 3 	 current plant: 9
14:37:57 INFO     
        WITH
        current_plant AS (
            SELECT 9 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:57 INFO     
        WITH
        current_plant AS (
            SELECT 9 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:57 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:57 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:57 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 9
        AND farm_used > 0
        ;
    
14:37:57 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:57 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:58 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:58 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:58 ERROR    

                methane demand:     216216
                methane produced:   251902
                manure_available:   2490
                crop_available:     1722

                
14:37:58 DEBUG    found plant: id_target = 3
14:37:58 DEBUG    plant capacity: 100 	 iteration: 3 
	 rank: 3 	 current plant: 3
14:37:58 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:58 INFO     
        WITH
        current_plant AS (
            SELECT 3 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:58 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:58 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:58 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 3
        AND farm_used > 0
        ;
    
14:37:58 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:58 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:58 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:58 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:58 ERROR    

                methane demand:     216216
                methane produced:   254082
                manure_available:   3077
                crop_available:     1672

                
14:37:58 DEBUG    found plant: id_target = 16
14:37:58 DEBUG    plant capacity: 100 	 iteration: 4 
	 rank: 3 	 current plant: 16
14:37:58 INFO     
        WITH
        current_plant AS (
            SELECT 16 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:58 INFO     
        WITH
        current_plant AS (
            SELECT 16 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:59 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:59 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:59 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 16
        AND farm_used > 0
        ;
    
14:37:59 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:59 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:37:59 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:37:59 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:37:59 ERROR    

                methane demand:     216216
                methane produced:   274829
                manure_available:   4713
                crop_available:     1650

                
14:37:59 DEBUG    found plant: id_target = 1
14:37:59 DEBUG    plant capacity: 100 	 iteration: 5 
	 rank: 3 	 current plant: 1
14:37:59 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:37:59 INFO     
        WITH
        current_plant AS (
            SELECT 1 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:37:59 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:37:59 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:37:59 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1
        AND farm_used > 0
        ;
    
14:37:59 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:37:59 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:00 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:00 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:00 ERROR    

                methane demand:     216216
                methane produced:   277533
                manure_available:   4337
                crop_available:     1715

                
14:38:00 DEBUG    found plant: id_target = 11
14:38:00 DEBUG    plant capacity: 100 	 iteration: 6 
	 rank: 3 	 current plant: 11
14:38:00 INFO     
        WITH
        current_plant AS (
            SELECT 11 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:00 INFO     
        WITH
        current_plant AS (
            SELECT 11 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:00 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:00 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 3,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:00 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 11
        AND farm_used > 0
        ;
    
14:38:00 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:00 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:00 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:00 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 3
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:00 ERROR    no more plants for the rank 3
14:38:00 DEBUG    plant capacity: 100 	 iteration: 7 
	 rank: 2 	 current plant: 11
14:38:00 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:00 ERROR    

                methane demand:     216216
                methane produced:   221355
                manure_available:   596
                crop_available:     1696

                
14:38:00 DEBUG    found plant: id_target = 249
14:38:00 DEBUG    plant capacity: 100 	 iteration: 8 
	 rank: 2 	 current plant: 249
14:38:00 INFO     
        WITH
        current_plant AS (
            SELECT 249 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:00 INFO     
        WITH
        current_plant AS (
            SELECT 249 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:00 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:00 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:01 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 249
        AND farm_used > 0
        ;
    
14:38:01 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:01 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:01 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:01 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:01 ERROR    

                methane demand:     216216
                methane produced:   223476
                manure_available:   1182
                crop_available:     1646

                
14:38:01 DEBUG    found plant: id_target = 103
14:38:01 DEBUG    plant capacity: 100 	 iteration: 9 
	 rank: 2 	 current plant: 103
14:38:01 INFO     
        WITH
        current_plant AS (
            SELECT 103 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:01 INFO     
        WITH
        current_plant AS (
            SELECT 103 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:01 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:01 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:01 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 103
        AND farm_used > 0
        ;
    
14:38:01 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:01 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:01 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:01 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:01 ERROR    

                methane demand:     216216
                methane produced:   232338
                manure_available:   773
                crop_available:     1764

                
14:38:01 DEBUG    found plant: id_target = 547
14:38:01 DEBUG    plant capacity: 100 	 iteration: 10 
	 rank: 2 	 current plant: 547
14:38:01 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:02 INFO     
        WITH
        current_plant AS (
            SELECT 547 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:02 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:02 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:02 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 547
        AND farm_used > 0
        ;
    
14:38:02 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:02 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:02 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:02 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:02 ERROR    

                methane demand:     216216
                methane produced:   228659
                manure_available:   1456
                crop_available:     1656

                
14:38:02 DEBUG    found plant: id_target = 640
14:38:02 DEBUG    plant capacity: 100 	 iteration: 11 
	 rank: 2 	 current plant: 640
14:38:02 INFO     
        WITH
        current_plant AS (
            SELECT 640 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:02 INFO     
        WITH
        current_plant AS (
            SELECT 640 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:02 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:02 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:02 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 640
        AND farm_used > 0
        ;
    
14:38:02 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:02 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:03 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:03 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:03 ERROR    

                methane demand:     216216
                methane produced:   226932
                manure_available:   998
                crop_available:     1695

                
14:38:03 DEBUG    found plant: id_target = 75
14:38:03 DEBUG    plant capacity: 100 	 iteration: 12 
	 rank: 2 	 current plant: 75
14:38:03 INFO     
        WITH
        current_plant AS (
            SELECT 75 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:03 INFO     
        WITH
        current_plant AS (
            SELECT 75 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:03 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:03 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:03 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 75
        AND farm_used > 0
        ;
    
14:38:03 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:03 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:03 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:03 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:03 ERROR    

                methane demand:     216216
                methane produced:   234172
                manure_available:   1566
                crop_available:     1687

                
14:38:03 DEBUG    found plant: id_target = 350
14:38:03 DEBUG    plant capacity: 100 	 iteration: 13 
	 rank: 2 	 current plant: 350
14:38:03 INFO     
        WITH
        current_plant AS (
            SELECT 350 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:03 INFO     
        WITH
        current_plant AS (
            SELECT 350 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:03 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:04 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:04 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 350
        AND farm_used > 0
        ;
    
14:38:04 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:04 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:04 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:04 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:04 ERROR    

                methane demand:     216216
                methane produced:   229576
                manure_available:   1489
                crop_available:     1659

                
14:38:04 DEBUG    found plant: id_target = 163
14:38:04 DEBUG    plant capacity: 100 	 iteration: 14 
	 rank: 2 	 current plant: 163
14:38:04 INFO     
        WITH
        current_plant AS (
            SELECT 163 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:04 INFO     
        WITH
        current_plant AS (
            SELECT 163 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:04 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:04 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:04 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 163
        AND farm_used > 0
        ;
    
14:38:04 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:04 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:04 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:04 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:04 ERROR    

                methane demand:     216216
                methane produced:   237714
                manure_available:   1711
                crop_available:     1699

                
14:38:04 DEBUG    found plant: id_target = 627
14:38:04 DEBUG    plant capacity: 100 	 iteration: 15 
	 rank: 2 	 current plant: 627
14:38:04 INFO     
        WITH
        current_plant AS (
            SELECT 627 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:05 INFO     
        WITH
        current_plant AS (
            SELECT 627 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:05 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:05 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:05 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 627
        AND farm_used > 0
        ;
    
14:38:05 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:05 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:05 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:05 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:05 ERROR    

                methane demand:     216216
                methane produced:   243263
                manure_available:   700
                crop_available:     1859

                
14:38:05 DEBUG    found plant: id_target = 199
14:38:05 DEBUG    plant capacity: 100 	 iteration: 16 
	 rank: 2 	 current plant: 199
14:38:05 INFO     
        WITH
        current_plant AS (
            SELECT 199 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:05 INFO     
        WITH
        current_plant AS (
            SELECT 199 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:05 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:05 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:05 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 199
        AND farm_used > 0
        ;
    
14:38:05 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:06 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:06 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:06 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:06 ERROR    

                methane demand:     216216
                methane produced:   230797
                manure_available:   1523
                crop_available:     1665

                
14:38:06 DEBUG    found plant: id_target = 863
14:38:06 DEBUG    plant capacity: 100 	 iteration: 17 
	 rank: 2 	 current plant: 863
14:38:06 INFO     
        WITH
        current_plant AS (
            SELECT 863 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:06 INFO     
        WITH
        current_plant AS (
            SELECT 863 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:06 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:06 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:06 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 863
        AND farm_used > 0
        ;
    
14:38:06 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:06 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:06 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:06 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:06 ERROR    

                methane demand:     216216
                methane produced:   227471
                manure_available:   1231
                crop_available:     1672

                
14:38:06 DEBUG    found plant: id_target = 543
14:38:06 DEBUG    plant capacity: 100 	 iteration: 18 
	 rank: 2 	 current plant: 543
14:38:06 INFO     
        WITH
        current_plant AS (
            SELECT 543 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:06 INFO     
        WITH
        current_plant AS (
            SELECT 543 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:06 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:07 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:07 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 543
        AND farm_used > 0
        ;
    
14:38:07 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:07 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:07 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:07 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:07 ERROR    

                methane demand:     216216
                methane produced:   231848
                manure_available:   1531
                crop_available:     1673

                
14:38:07 DEBUG    found plant: id_target = 520
14:38:07 DEBUG    plant capacity: 100 	 iteration: 19 
	 rank: 2 	 current plant: 520
14:38:07 INFO     
        WITH
        current_plant AS (
            SELECT 520 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:07 INFO     
        WITH
        current_plant AS (
            SELECT 520 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:07 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:07 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:07 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 520
        AND farm_used > 0
        ;
    
14:38:07 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:07 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:07 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:07 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:07 ERROR    

                methane demand:     216216
                methane produced:   242877
                manure_available:   2319
                crop_available:     1670

                
14:38:07 DEBUG    found plant: id_target = 316
14:38:07 DEBUG    plant capacity: 100 	 iteration: 20 
	 rank: 2 	 current plant: 316
14:38:07 INFO     
        WITH
        current_plant AS (
            SELECT 316 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:08 INFO     
        WITH
        current_plant AS (
            SELECT 316 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:08 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:08 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:08 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 316
        AND farm_used > 0
        ;
    
14:38:08 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:08 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:08 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:08 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:08 ERROR    

                methane demand:     216216
                methane produced:   251162
                manure_available:   2618
                crop_available:     1702

                
14:38:08 DEBUG    found plant: id_target = 319
14:38:08 DEBUG    plant capacity: 100 	 iteration: 21 
	 rank: 2 	 current plant: 319
14:38:08 INFO     
        WITH
        current_plant AS (
            SELECT 319 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:08 INFO     
        WITH
        current_plant AS (
            SELECT 319 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:08 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:08 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:08 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 319
        AND farm_used > 0
        ;
    
14:38:08 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:08 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:09 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:09 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:09 ERROR    

                methane demand:     216216
                methane produced:   250167
                manure_available:   2325
                crop_available:     1727

                
14:38:09 DEBUG    found plant: id_target = 148
14:38:09 DEBUG    plant capacity: 100 	 iteration: 22 
	 rank: 2 	 current plant: 148
14:38:09 INFO     
        WITH
        current_plant AS (
            SELECT 148 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:09 INFO     
        WITH
        current_plant AS (
            SELECT 148 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:09 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:09 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:09 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 148
        AND farm_used > 0
        ;
    
14:38:09 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:09 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:09 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:09 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:09 ERROR    

                methane demand:     216216
                methane produced:   248962
                manure_available:   2227
                crop_available:     1729

                
14:38:09 DEBUG    found plant: id_target = 209
14:38:09 DEBUG    plant capacity: 100 	 iteration: 23 
	 rank: 2 	 current plant: 209
14:38:09 INFO     
        WITH
        current_plant AS (
            SELECT 209 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:09 INFO     
        WITH
        current_plant AS (
            SELECT 209 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:09 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:09 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:10 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 209
        AND farm_used > 0
        ;
    
14:38:10 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:10 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:10 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:10 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:10 ERROR    

                methane demand:     216216
                methane produced:   246785
                manure_available:   2684
                crop_available:     1659

                
14:38:10 DEBUG    found plant: id_target = 824
14:38:10 DEBUG    plant capacity: 100 	 iteration: 24 
	 rank: 2 	 current plant: 824
14:38:10 INFO     
        WITH
        current_plant AS (
            SELECT 824 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:10 INFO     
        WITH
        current_plant AS (
            SELECT 824 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:10 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:10 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:10 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 824
        AND farm_used > 0
        ;
    
14:38:10 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:10 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:10 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:10 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:10 ERROR    

                methane demand:     216216
                methane produced:   243738
                manure_available:   2111
                crop_available:     1701

                
14:38:10 DEBUG    found plant: id_target = 156
14:38:10 DEBUG    plant capacity: 100 	 iteration: 25 
	 rank: 2 	 current plant: 156
14:38:10 INFO     
        WITH
        current_plant AS (
            SELECT 156 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:11 INFO     
        WITH
        current_plant AS (
            SELECT 156 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:11 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:11 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:11 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 156
        AND farm_used > 0
        ;
    
14:38:11 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:11 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:11 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:11 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:11 ERROR    

                methane demand:     216216
                methane produced:   245742
                manure_available:   1795
                crop_available:     1753

                
14:38:11 DEBUG    found plant: id_target = 670
14:38:11 DEBUG    plant capacity: 100 	 iteration: 26 
	 rank: 2 	 current plant: 670
14:38:11 INFO     
        WITH
        current_plant AS (
            SELECT 670 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:11 INFO     
        WITH
        current_plant AS (
            SELECT 670 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:11 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:11 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:11 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 670
        AND farm_used > 0
        ;
    
14:38:11 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:11 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:12 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:12 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:12 ERROR    

                methane demand:     216216
                methane produced:   246063
                manure_available:   2684
                crop_available:     1653

                
14:38:12 DEBUG    found plant: id_target = 265
14:38:12 DEBUG    plant capacity: 100 	 iteration: 27 
	 rank: 2 	 current plant: 265
14:38:12 INFO     
        WITH
        current_plant AS (
            SELECT 265 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:12 INFO     
        WITH
        current_plant AS (
            SELECT 265 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:12 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:12 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:12 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 265
        AND farm_used > 0
        ;
    
14:38:12 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:12 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:12 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:12 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:12 ERROR    

                methane demand:     216216
                methane produced:   234415
                manure_available:   1743
                crop_available:     1669

                
14:38:12 DEBUG    found plant: id_target = 868
14:38:12 DEBUG    plant capacity: 100 	 iteration: 28 
	 rank: 2 	 current plant: 868
14:38:12 INFO     
        WITH
        current_plant AS (
            SELECT 868 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:12 INFO     
        WITH
        current_plant AS (
            SELECT 868 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:12 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:12 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:13 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 868
        AND farm_used > 0
        ;
    
14:38:13 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:13 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:13 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:13 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:13 ERROR    

                methane demand:     216216
                methane produced:   244022
                manure_available:   2228
                crop_available:     1690

                
14:38:13 DEBUG    found plant: id_target = 838
14:38:13 DEBUG    plant capacity: 100 	 iteration: 29 
	 rank: 2 	 current plant: 838
14:38:13 INFO     
        WITH
        current_plant AS (
            SELECT 838 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:13 INFO     
        WITH
        current_plant AS (
            SELECT 838 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:13 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:13 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:13 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 838
        AND farm_used > 0
        ;
    
14:38:13 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:13 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:13 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:13 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:13 ERROR    

                methane demand:     216216
                methane produced:   227517
                manure_available:   1379
                crop_available:     1655

                
14:38:13 DEBUG    found plant: id_target = 548
14:38:13 DEBUG    plant capacity: 100 	 iteration: 30 
	 rank: 2 	 current plant: 548
14:38:13 INFO     
        WITH
        current_plant AS (
            SELECT 548 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:13 INFO     
        WITH
        current_plant AS (
            SELECT 548 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:14 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:14 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:14 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 548
        AND farm_used > 0
        ;
    
14:38:14 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:14 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:14 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:14 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:14 ERROR    

                methane demand:     216216
                methane produced:   246262
                manure_available:   2336
                crop_available:     1695

                
14:38:14 DEBUG    found plant: id_target = 702
14:38:14 DEBUG    plant capacity: 100 	 iteration: 31 
	 rank: 2 	 current plant: 702
14:38:14 INFO     
        WITH
        current_plant AS (
            SELECT 702 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:14 INFO     
        WITH
        current_plant AS (
            SELECT 702 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:14 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:14 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:14 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 702
        AND farm_used > 0
        ;
    
14:38:14 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:14 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:15 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:15 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:15 ERROR    

                methane demand:     216216
                methane produced:   229255
                manure_available:   1375
                crop_available:     1670

                
14:38:15 DEBUG    found plant: id_target = 77
14:38:15 DEBUG    plant capacity: 100 	 iteration: 32 
	 rank: 2 	 current plant: 77
14:38:15 INFO     
        WITH
        current_plant AS (
            SELECT 77 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:15 INFO     
        WITH
        current_plant AS (
            SELECT 77 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:15 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:15 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:15 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 77
        AND farm_used > 0
        ;
    
14:38:15 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:15 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:15 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:15 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:15 ERROR    

                methane demand:     216216
                methane produced:   251185
                manure_available:   3069
                crop_available:     1650

                
14:38:15 DEBUG    found plant: id_target = 721
14:38:15 DEBUG    plant capacity: 100 	 iteration: 33 
	 rank: 2 	 current plant: 721
14:38:15 INFO     
        WITH
        current_plant AS (
            SELECT 721 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:15 INFO     
        WITH
        current_plant AS (
            SELECT 721 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:15 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:15 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:15 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 721
        AND farm_used > 0
        ;
    
14:38:15 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:15 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:16 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:16 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:16 ERROR    

                methane demand:     216216
                methane produced:   259189
                manure_available:   2959
                crop_available:     1727

                
14:38:16 DEBUG    found plant: id_target = 732
14:38:16 DEBUG    plant capacity: 100 	 iteration: 34 
	 rank: 2 	 current plant: 732
14:38:16 INFO     
        WITH
        current_plant AS (
            SELECT 732 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:16 INFO     
        WITH
        current_plant AS (
            SELECT 732 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:16 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:16 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:16 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 732
        AND farm_used > 0
        ;
    
14:38:16 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:16 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:16 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:16 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:16 ERROR    

                methane demand:     216216
                methane produced:   250390
                manure_available:   2323
                crop_available:     1729

                
14:38:16 DEBUG    found plant: id_target = 301
14:38:16 DEBUG    plant capacity: 100 	 iteration: 35 
	 rank: 2 	 current plant: 301
14:38:16 INFO     
        WITH
        current_plant AS (
            SELECT 301 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:16 INFO     
        WITH
        current_plant AS (
            SELECT 301 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:16 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:16 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:17 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 301
        AND farm_used > 0
        ;
    
14:38:17 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:17 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:17 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:17 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:17 ERROR    

                methane demand:     216216
                methane produced:   250168
                manure_available:   3053
                crop_available:     1644

                
14:38:17 DEBUG    found plant: id_target = 220
14:38:17 DEBUG    plant capacity: 100 	 iteration: 36 
	 rank: 2 	 current plant: 220
14:38:17 INFO     
        WITH
        current_plant AS (
            SELECT 220 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:17 INFO     
        WITH
        current_plant AS (
            SELECT 220 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:17 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:17 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:17 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 220
        AND farm_used > 0
        ;
    
14:38:17 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:17 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:17 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:17 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:17 ERROR    

                methane demand:     216216
                methane produced:   242928
                manure_available:   2544
                crop_available:     1644

                
14:38:17 DEBUG    found plant: id_target = 113
14:38:17 DEBUG    plant capacity: 100 	 iteration: 37 
	 rank: 2 	 current plant: 113
14:38:17 INFO     
        WITH
        current_plant AS (
            SELECT 113 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:17 INFO     
        WITH
        current_plant AS (
            SELECT 113 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:17 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:18 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:18 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 113
        AND farm_used > 0
        ;
    
14:38:18 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:18 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:18 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:18 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:18 ERROR    

                methane demand:     216216
                methane produced:   259324
                manure_available:   3137
                crop_available:     1707

                
14:38:18 DEBUG    found plant: id_target = 224
14:38:18 DEBUG    plant capacity: 100 	 iteration: 38 
	 rank: 2 	 current plant: 224
14:38:18 INFO     
        WITH
        current_plant AS (
            SELECT 224 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:18 INFO     
        WITH
        current_plant AS (
            SELECT 224 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:18 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:18 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:18 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 224
        AND farm_used > 0
        ;
    
14:38:18 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:18 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:18 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:18 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:18 ERROR    

                methane demand:     216216
                methane produced:   239573
                manure_available:   1780
                crop_available:     1705

                
14:38:18 DEBUG    found plant: id_target = 121
14:38:18 DEBUG    plant capacity: 100 	 iteration: 39 
	 rank: 2 	 current plant: 121
14:38:18 INFO     
        WITH
        current_plant AS (
            SELECT 121 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:18 INFO     
        WITH
        current_plant AS (
            SELECT 121 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:19 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:19 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:19 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 121
        AND farm_used > 0
        ;
    
14:38:19 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:19 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:19 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:19 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:19 ERROR    

                methane demand:     216216
                methane produced:   262604
                manure_available:   3021
                crop_available:     1747

                
14:38:19 DEBUG    found plant: id_target = 227
14:38:19 DEBUG    plant capacity: 100 	 iteration: 40 
	 rank: 2 	 current plant: 227
14:38:19 INFO     
        WITH
        current_plant AS (
            SELECT 227 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:19 INFO     
        WITH
        current_plant AS (
            SELECT 227 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:19 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:19 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:19 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 227
        AND farm_used > 0
        ;
    
14:38:19 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:19 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:19 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:19 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:19 ERROR    

                methane demand:     216216
                methane produced:   261541
                manure_available:   3271
                crop_available:     1709

                
14:38:19 DEBUG    found plant: id_target = 159
14:38:19 DEBUG    plant capacity: 100 	 iteration: 41 
	 rank: 2 	 current plant: 159
14:38:19 INFO     
        WITH
        current_plant AS (
            SELECT 159 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:20 INFO     
        WITH
        current_plant AS (
            SELECT 159 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:20 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:20 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:20 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 159
        AND farm_used > 0
        ;
    
14:38:20 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:20 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:20 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:20 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:20 ERROR    

                methane demand:     216216
                methane produced:   259510
                manure_available:   2408
                crop_available:     1792

                
14:38:20 DEBUG    found plant: id_target = 50
14:38:20 DEBUG    plant capacity: 100 	 iteration: 42 
	 rank: 2 	 current plant: 50
14:38:20 INFO     
        WITH
        current_plant AS (
            SELECT 50 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:20 INFO     
        WITH
        current_plant AS (
            SELECT 50 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:20 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:20 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:20 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 50
        AND farm_used > 0
        ;
    
14:38:20 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:20 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:21 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:21 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:21 ERROR    

                methane demand:     216216
                methane produced:   266473
                manure_available:   3029
                crop_available:     1777

                
14:38:21 DEBUG    found plant: id_target = 166
14:38:21 DEBUG    plant capacity: 100 	 iteration: 43 
	 rank: 2 	 current plant: 166
14:38:21 INFO     
        WITH
        current_plant AS (
            SELECT 166 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:21 INFO     
        WITH
        current_plant AS (
            SELECT 166 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:21 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:21 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:21 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 166
        AND farm_used > 0
        ;
    
14:38:21 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:21 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:21 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:21 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:21 ERROR    

                methane demand:     216216
                methane produced:   261601
                manure_available:   3641
                crop_available:     1667

                
14:38:21 DEBUG    found plant: id_target = 568
14:38:21 DEBUG    plant capacity: 100 	 iteration: 44 
	 rank: 2 	 current plant: 568
14:38:21 INFO     
        WITH
        current_plant AS (
            SELECT 568 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:21 INFO     
        WITH
        current_plant AS (
            SELECT 568 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:21 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:21 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:21 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 568
        AND farm_used > 0
        ;
    
14:38:21 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:21 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:22 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:22 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:22 ERROR    

                methane demand:     216216
                methane produced:   254582
                manure_available:   3160
                crop_available:     1667

                
14:38:22 DEBUG    found plant: id_target = 576
14:38:22 DEBUG    plant capacity: 100 	 iteration: 45 
	 rank: 2 	 current plant: 576
14:38:22 INFO     
        WITH
        current_plant AS (
            SELECT 576 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:22 INFO     
        WITH
        current_plant AS (
            SELECT 576 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:22 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:22 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:22 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 576
        AND farm_used > 0
        ;
    
14:38:22 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:22 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:22 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:22 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:22 ERROR    

                methane demand:     216216
                methane produced:   258113
                manure_available:   1816
                crop_available:     1849

                
14:38:22 DEBUG    found plant: id_target = 62
14:38:22 DEBUG    plant capacity: 100 	 iteration: 46 
	 rank: 2 	 current plant: 62
14:38:22 INFO     
        WITH
        current_plant AS (
            SELECT 62 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:22 INFO     
        WITH
        current_plant AS (
            SELECT 62 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:22 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:22 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:22 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 62
        AND farm_used > 0
        ;
    
14:38:22 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:23 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:23 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:23 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:23 ERROR    

                methane demand:     216216
                methane produced:   284857
                manure_available:   3471
                crop_available:     1872

                
14:38:23 DEBUG    found plant: id_target = 335
14:38:23 DEBUG    plant capacity: 100 	 iteration: 47 
	 rank: 2 	 current plant: 335
14:38:23 INFO     
        WITH
        current_plant AS (
            SELECT 335 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:23 INFO     
        WITH
        current_plant AS (
            SELECT 335 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:23 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:23 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:23 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 335
        AND farm_used > 0
        ;
    
14:38:23 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:23 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:23 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:23 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:23 ERROR    

                methane demand:     216216
                methane produced:   263695
                manure_available:   3321
                crop_available:     1721

                
14:38:23 DEBUG    found plant: id_target = 773
14:38:23 DEBUG    plant capacity: 100 	 iteration: 48 
	 rank: 2 	 current plant: 773
14:38:23 INFO     
        WITH
        current_plant AS (
            SELECT 773 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:23 INFO     
        WITH
        current_plant AS (
            SELECT 773 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:23 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:24 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:24 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 773
        AND farm_used > 0
        ;
    
14:38:24 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:24 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:24 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:24 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:24 ERROR    

                methane demand:     216216
                methane produced:   264997
                manure_available:   3594
                crop_available:     1700

                
14:38:24 DEBUG    found plant: id_target = 340
14:38:24 DEBUG    plant capacity: 100 	 iteration: 49 
	 rank: 2 	 current plant: 340
14:38:24 INFO     
        WITH
        current_plant AS (
            SELECT 340 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:24 INFO     
        WITH
        current_plant AS (
            SELECT 340 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:24 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:24 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:24 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 340
        AND farm_used > 0
        ;
    
14:38:24 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:24 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:24 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:24 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:24 ERROR    

                methane demand:     216216
                methane produced:   263088
                manure_available:   3357
                crop_available:     1712

                
14:38:24 DEBUG    found plant: id_target = 798
14:38:24 DEBUG    plant capacity: 100 	 iteration: 50 
	 rank: 2 	 current plant: 798
14:38:24 INFO     
        WITH
        current_plant AS (
            SELECT 798 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:24 INFO     
        WITH
        current_plant AS (
            SELECT 798 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:25 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:25 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:25 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 798
        AND farm_used > 0
        ;
    
14:38:25 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:25 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:25 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:25 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:25 ERROR    

                methane demand:     216216
                methane produced:   255545
                manure_available:   3361
                crop_available:     1651

                
14:38:25 DEBUG    found plant: id_target = 306
14:38:25 DEBUG    plant capacity: 100 	 iteration: 51 
	 rank: 2 	 current plant: 306
14:38:25 INFO     
        WITH
        current_plant AS (
            SELECT 306 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:25 INFO     
        WITH
        current_plant AS (
            SELECT 306 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:25 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:25 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:25 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 306
        AND farm_used > 0
        ;
    
14:38:25 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:25 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:25 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:25 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:25 ERROR    

                methane demand:     216216
                methane produced:   254131
                manure_available:   2455
                crop_available:     1744

                
14:38:25 DEBUG    found plant: id_target = 592
14:38:25 DEBUG    plant capacity: 100 	 iteration: 52 
	 rank: 2 	 current plant: 592
14:38:25 INFO     
        WITH
        current_plant AS (
            SELECT 592 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:26 INFO     
        WITH
        current_plant AS (
            SELECT 592 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:26 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:26 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 592
        AND farm_used > 0
        ;
    
14:38:26 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:26 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:26 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:26 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:26 ERROR    

                methane demand:     216216
                methane produced:   279996
                manure_available:   4108
                crop_available:     1761

                
14:38:26 DEBUG    found plant: id_target = 615
14:38:26 DEBUG    plant capacity: 100 	 iteration: 53 
	 rank: 2 	 current plant: 615
14:38:26 INFO     
        WITH
        current_plant AS (
            SELECT 615 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:26 INFO     
        WITH
        current_plant AS (
            SELECT 615 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:26 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:26 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:26 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 615
        AND farm_used > 0
        ;
    
14:38:26 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:26 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:26 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:26 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:26 ERROR    

                methane demand:     216216
                methane produced:   269790
                manure_available:   4243
                crop_available:     1664

                
14:38:26 DEBUG    found plant: id_target = 719
14:38:26 DEBUG    plant capacity: 100 	 iteration: 54 
	 rank: 2 	 current plant: 719
14:38:26 INFO     
        WITH
        current_plant AS (
            SELECT 719 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:27 INFO     
        WITH
        current_plant AS (
            SELECT 719 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:27 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:27 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 719
        AND farm_used > 0
        ;
    
14:38:27 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:27 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:27 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:27 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:27 ERROR    

                methane demand:     216216
                methane produced:   278513
                manure_available:   3290
                crop_available:     1843

                
14:38:27 DEBUG    found plant: id_target = 796
14:38:27 DEBUG    plant capacity: 100 	 iteration: 55 
	 rank: 2 	 current plant: 796
14:38:27 INFO     
        WITH
        current_plant AS (
            SELECT 796 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:27 INFO     
        WITH
        current_plant AS (
            SELECT 796 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:27 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:27 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:27 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 796
        AND farm_used > 0
        ;
    
14:38:27 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:27 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:28 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:28 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:28 ERROR    

                methane demand:     216216
                methane produced:   267306
                manure_available:   3377
                crop_available:     1743

                
14:38:28 DEBUG    found plant: id_target = 382
14:38:28 DEBUG    plant capacity: 100 	 iteration: 56 
	 rank: 2 	 current plant: 382
14:38:28 INFO     
        WITH
        current_plant AS (
            SELECT 382 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:28 INFO     
        WITH
        current_plant AS (
            SELECT 382 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:28 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:28 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:28 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 382
        AND farm_used > 0
        ;
    
14:38:28 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:28 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:28 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:28 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:28 ERROR    

                methane demand:     216216
                methane produced:   248109
                manure_available:   1958
                crop_available:     1753

                
14:38:28 DEBUG    found plant: id_target = 537
14:38:28 DEBUG    plant capacity: 100 	 iteration: 57 
	 rank: 2 	 current plant: 537
14:38:28 INFO     
        WITH
        current_plant AS (
            SELECT 537 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:28 INFO     
        WITH
        current_plant AS (
            SELECT 537 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:28 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:28 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:28 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 537
        AND farm_used > 0
        ;
    
14:38:28 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:28 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:29 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:29 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:29 ERROR    

                methane demand:     216216
                methane produced:   250028
                manure_available:   2981
                crop_available:     1651

                
14:38:29 DEBUG    found plant: id_target = 833
14:38:29 DEBUG    plant capacity: 100 	 iteration: 58 
	 rank: 2 	 current plant: 833
14:38:29 INFO     
        WITH
        current_plant AS (
            SELECT 833 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:29 INFO     
        WITH
        current_plant AS (
            SELECT 833 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:29 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:29 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 833
        AND farm_used > 0
        ;
    
14:38:29 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:29 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:29 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:29 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:29 ERROR    

                methane demand:     216216
                methane produced:   270197
                manure_available:   4080
                crop_available:     1686

                
14:38:29 DEBUG    found plant: id_target = 433
14:38:29 DEBUG    plant capacity: 100 	 iteration: 59 
	 rank: 2 	 current plant: 433
14:38:29 INFO     
        WITH
        current_plant AS (
            SELECT 433 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:29 INFO     
        WITH
        current_plant AS (
            SELECT 433 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:29 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:29 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:29 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 433
        AND farm_used > 0
        ;
    
14:38:29 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:29 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:30 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:30 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:30 ERROR    

                methane demand:     216216
                methane produced:   283531
                manure_available:   4642
                crop_available:     1727

                
14:38:30 DEBUG    found plant: id_target = 54
14:38:30 DEBUG    plant capacity: 100 	 iteration: 60 
	 rank: 2 	 current plant: 54
14:38:30 INFO     
        WITH
        current_plant AS (
            SELECT 54 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:30 INFO     
        WITH
        current_plant AS (
            SELECT 54 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:30 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:30 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:30 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 54
        AND farm_used > 0
        ;
    
14:38:30 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:30 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:30 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:30 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:30 ERROR    

                methane demand:     216216
                methane produced:   276377
                manure_available:   3946
                crop_available:     1750

                
14:38:30 DEBUG    found plant: id_target = 724
14:38:30 DEBUG    plant capacity: 100 	 iteration: 61 
	 rank: 2 	 current plant: 724
14:38:30 INFO     
        WITH
        current_plant AS (
            SELECT 724 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:30 INFO     
        WITH
        current_plant AS (
            SELECT 724 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:30 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:30 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:31 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 724
        AND farm_used > 0
        ;
    
14:38:31 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:31 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:31 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:31 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:31 ERROR    

                methane demand:     216216
                methane produced:   250473
                manure_available:   2270
                crop_available:     1736

                
14:38:31 DEBUG    found plant: id_target = 73
14:38:31 DEBUG    plant capacity: 100 	 iteration: 62 
	 rank: 2 	 current plant: 73
14:38:31 INFO     
        WITH
        current_plant AS (
            SELECT 73 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:31 INFO     
        WITH
        current_plant AS (
            SELECT 73 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:31 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:31 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:31 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 73
        AND farm_used > 0
        ;
    
14:38:31 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:31 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:31 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:31 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:31 ERROR    

                methane demand:     216216
                methane produced:   294302
                manure_available:   5192
                crop_available:     1750

                
14:38:31 DEBUG    found plant: id_target = 762
14:38:31 DEBUG    plant capacity: 100 	 iteration: 63 
	 rank: 2 	 current plant: 762
14:38:31 INFO     
        WITH
        current_plant AS (
            SELECT 762 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:31 INFO     
        WITH
        current_plant AS (
            SELECT 762 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:31 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:32 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:32 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 762
        AND farm_used > 0
        ;
    
14:38:32 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:32 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:32 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:32 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:32 ERROR    

                methane demand:     216216
                methane produced:   289123
                manure_available:   4784
                crop_available:     1756

                
14:38:32 DEBUG    found plant: id_target = 387
14:38:32 DEBUG    plant capacity: 100 	 iteration: 64 
	 rank: 2 	 current plant: 387
14:38:32 INFO     
        WITH
        current_plant AS (
            SELECT 387 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:32 INFO     
        WITH
        current_plant AS (
            SELECT 387 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:32 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:32 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:32 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 387
        AND farm_used > 0
        ;
    
14:38:32 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:32 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:32 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:32 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:32 ERROR    

                methane demand:     216216
                methane produced:   272169
                manure_available:   3873
                crop_available:     1725

                
14:38:32 DEBUG    found plant: id_target = 494
14:38:32 DEBUG    plant capacity: 100 	 iteration: 65 
	 rank: 2 	 current plant: 494
14:38:32 INFO     
        WITH
        current_plant AS (
            SELECT 494 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:32 INFO     
        WITH
        current_plant AS (
            SELECT 494 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:33 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:33 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:33 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 494
        AND farm_used > 0
        ;
    
14:38:33 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:33 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:33 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:33 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:33 ERROR    

                methane demand:     216216
                methane produced:   270381
                manure_available:   4335
                crop_available:     1658

                
14:38:33 DEBUG    found plant: id_target = 294
14:38:33 DEBUG    plant capacity: 100 	 iteration: 66 
	 rank: 2 	 current plant: 294
14:38:33 INFO     
        WITH
        current_plant AS (
            SELECT 294 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:33 INFO     
        WITH
        current_plant AS (
            SELECT 294 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:33 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:33 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:33 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 294
        AND farm_used > 0
        ;
    
14:38:33 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:33 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:34 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:34 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:34 ERROR    

                methane demand:     216216
                methane produced:   283996
                manure_available:   4379
                crop_available:     1761

                
14:38:34 DEBUG    found plant: id_target = 396
14:38:34 DEBUG    plant capacity: 100 	 iteration: 67 
	 rank: 2 	 current plant: 396
14:38:34 INFO     
        WITH
        current_plant AS (
            SELECT 396 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:34 INFO     
        WITH
        current_plant AS (
            SELECT 396 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:34 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:34 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:34 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 396
        AND farm_used > 0
        ;
    
14:38:34 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:34 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:34 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:34 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:34 ERROR    

                methane demand:     216216
                methane produced:   287579
                manure_available:   5587
                crop_available:     1651

                
14:38:34 DEBUG    found plant: id_target = 424
14:38:34 DEBUG    plant capacity: 100 	 iteration: 68 
	 rank: 2 	 current plant: 424
14:38:34 INFO     
        WITH
        current_plant AS (
            SELECT 424 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:34 INFO     
        WITH
        current_plant AS (
            SELECT 424 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:34 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:34 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:34 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 424
        AND farm_used > 0
        ;
    
14:38:34 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:34 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:35 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:35 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:35 ERROR    

                methane demand:     216216
                methane produced:   268064
                manure_available:   4162
                crop_available:     1659

                
14:38:35 DEBUG    found plant: id_target = 230
14:38:35 DEBUG    plant capacity: 100 	 iteration: 69 
	 rank: 2 	 current plant: 230
14:38:35 INFO     
        WITH
        current_plant AS (
            SELECT 230 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:35 INFO     
        WITH
        current_plant AS (
            SELECT 230 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:35 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:35 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:35 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 230
        AND farm_used > 0
        ;
    
14:38:35 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:35 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:35 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:35 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:35 ERROR    

                methane demand:     216216
                methane produced:   290405
                manure_available:   5549
                crop_available:     1678

                
14:38:35 DEBUG    found plant: id_target = 401
14:38:35 DEBUG    plant capacity: 100 	 iteration: 70 
	 rank: 2 	 current plant: 401
14:38:35 INFO     
        WITH
        current_plant AS (
            SELECT 401 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:35 INFO     
        WITH
        current_plant AS (
            SELECT 401 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:35 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:35 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:35 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 401
        AND farm_used > 0
        ;
    
14:38:35 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:36 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:36 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:36 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:36 ERROR    

                methane demand:     216216
                methane produced:   291625
                manure_available:   5928
                crop_available:     1644

                
14:38:36 DEBUG    found plant: id_target = 176
14:38:36 DEBUG    plant capacity: 100 	 iteration: 71 
	 rank: 2 	 current plant: 176
14:38:36 INFO     
        WITH
        current_plant AS (
            SELECT 176 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:36 INFO     
        WITH
        current_plant AS (
            SELECT 176 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:36 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:36 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:36 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 176
        AND farm_used > 0
        ;
    
14:38:36 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:36 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:36 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:36 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:36 ERROR    

                methane demand:     216216
                methane produced:   269548
                manure_available:   3594
                crop_available:     1736

                
14:38:36 DEBUG    found plant: id_target = 72
14:38:36 DEBUG    plant capacity: 100 	 iteration: 72 
	 rank: 2 	 current plant: 72
14:38:36 INFO     
        WITH
        current_plant AS (
            SELECT 72 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:36 INFO     
        WITH
        current_plant AS (
            SELECT 72 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:36 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:36 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:37 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 72
        AND farm_used > 0
        ;
    
14:38:37 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:37 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:37 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:37 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:37 ERROR    

                methane demand:     216216
                methane produced:   304629
                manure_available:   6075
                crop_available:     1731

                
14:38:37 DEBUG    found plant: id_target = 393
14:38:37 DEBUG    plant capacity: 100 	 iteration: 73 
	 rank: 2 	 current plant: 393
14:38:37 INFO     
        WITH
        current_plant AS (
            SELECT 393 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:37 INFO     
        WITH
        current_plant AS (
            SELECT 393 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:37 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:37 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:37 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 393
        AND farm_used > 0
        ;
    
14:38:37 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:37 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:37 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:37 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:37 ERROR    

                methane demand:     216216
                methane produced:   308890
                manure_available:   5291
                crop_available:     1855

                
14:38:37 DEBUG    found plant: id_target = 805
14:38:37 DEBUG    plant capacity: 100 	 iteration: 74 
	 rank: 2 	 current plant: 805
14:38:37 INFO     
        WITH
        current_plant AS (
            SELECT 805 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:37 INFO     
        WITH
        current_plant AS (
            SELECT 805 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:37 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:37 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 2,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:37 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 805
        AND farm_used > 0
        ;
    
14:38:37 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:38 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:38 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:38 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 2
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:38 ERROR    no more plants for the rank 2
14:38:38 DEBUG    plant capacity: 100 	 iteration: 75 
	 rank: 1 	 current plant: 805
14:38:38 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:38 ERROR    

                methane demand:     216216
                methane produced:   234597
                manure_available:   1094
                crop_available:     1745

                
14:38:38 DEBUG    found plant: id_target = 1179
14:38:38 DEBUG    plant capacity: 100 	 iteration: 76 
	 rank: 1 	 current plant: 1179
14:38:38 INFO     
        WITH
        current_plant AS (
            SELECT 1179 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:38 INFO     
        WITH
        current_plant AS (
            SELECT 1179 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:38 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:38 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:38 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1179
        AND farm_used > 0
        ;
    
14:38:38 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:38 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:38 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:38 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:38 ERROR    

                methane demand:     216216
                methane produced:   230870
                manure_available:   1225
                crop_available:     1700

                
14:38:38 DEBUG    found plant: id_target = 950
14:38:38 DEBUG    plant capacity: 100 	 iteration: 77 
	 rank: 1 	 current plant: 950
14:38:38 INFO     
        WITH
        current_plant AS (
            SELECT 950 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:38 INFO     
        WITH
        current_plant AS (
            SELECT 950 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:38 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:38 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:38 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 950
        AND farm_used > 0
        ;
    
14:38:38 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:39 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:39 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:39 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:39 ERROR    

                methane demand:     216216
                methane produced:   232270
                manure_available:   1585
                crop_available:     1670

                
14:38:39 DEBUG    found plant: id_target = 1227
14:38:39 DEBUG    plant capacity: 100 	 iteration: 78 
	 rank: 1 	 current plant: 1227
14:38:39 INFO     
        WITH
        current_plant AS (
            SELECT 1227 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:39 INFO     
        WITH
        current_plant AS (
            SELECT 1227 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:39 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:39 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:39 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1227
        AND farm_used > 0
        ;
    
14:38:39 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:39 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:39 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:39 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:39 ERROR    

                methane demand:     216216
                methane produced:   235058
                manure_available:   1949
                crop_available:     1650

                
14:38:39 DEBUG    found plant: id_target = 1738
14:38:39 DEBUG    plant capacity: 100 	 iteration: 79 
	 rank: 1 	 current plant: 1738
14:38:39 INFO     
        WITH
        current_plant AS (
            SELECT 1738 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:39 INFO     
        WITH
        current_plant AS (
            SELECT 1738 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:39 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:39 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:39 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1738
        AND farm_used > 0
        ;
    
14:38:39 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:40 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:40 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:40 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:40 ERROR    

                methane demand:     216216
                methane produced:   234505
                manure_available:   1502
                crop_available:     1697

                
14:38:40 DEBUG    found plant: id_target = 1442
14:38:40 DEBUG    plant capacity: 100 	 iteration: 80 
	 rank: 1 	 current plant: 1442
14:38:40 INFO     
        WITH
        current_plant AS (
            SELECT 1442 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:40 INFO     
        WITH
        current_plant AS (
            SELECT 1442 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:40 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:40 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:40 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1442
        AND farm_used > 0
        ;
    
14:38:40 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:40 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:40 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:40 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:40 ERROR    

                methane demand:     216216
                methane produced:   229171
                manure_available:   1522
                crop_available:     1652

                
14:38:40 DEBUG    found plant: id_target = 1166
14:38:40 DEBUG    plant capacity: 100 	 iteration: 81 
	 rank: 1 	 current plant: 1166
14:38:40 INFO     
        WITH
        current_plant AS (
            SELECT 1166 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:40 INFO     
        WITH
        current_plant AS (
            SELECT 1166 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:40 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:40 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:40 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1166
        AND farm_used > 0
        ;
    
14:38:40 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:41 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:41 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:41 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:41 ERROR    

                methane demand:     216216
                methane produced:   242769
                manure_available:   2427
                crop_available:     1657

                
14:38:41 DEBUG    found plant: id_target = 892
14:38:41 DEBUG    plant capacity: 100 	 iteration: 82 
	 rank: 1 	 current plant: 892
14:38:41 INFO     
        WITH
        current_plant AS (
            SELECT 892 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:41 INFO     
        WITH
        current_plant AS (
            SELECT 892 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:41 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:41 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:41 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 892
        AND farm_used > 0
        ;
    
14:38:41 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:41 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:41 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:41 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:41 ERROR    

                methane demand:     216216
                methane produced:   244546
                manure_available:   1874
                crop_available:     1734

                
14:38:41 DEBUG    found plant: id_target = 1408
14:38:41 DEBUG    plant capacity: 100 	 iteration: 83 
	 rank: 1 	 current plant: 1408
14:38:41 INFO     
        WITH
        current_plant AS (
            SELECT 1408 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:41 INFO     
        WITH
        current_plant AS (
            SELECT 1408 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:41 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:41 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:41 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1408
        AND farm_used > 0
        ;
    
14:38:41 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:41 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:42 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:42 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:42 ERROR    

                methane demand:     216216
                methane produced:   249636
                manure_available:   2836
                crop_available:     1664

                
14:38:42 DEBUG    found plant: id_target = 1541
14:38:42 DEBUG    plant capacity: 100 	 iteration: 84 
	 rank: 1 	 current plant: 1541
14:38:42 INFO     
        WITH
        current_plant AS (
            SELECT 1541 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:42 INFO     
        WITH
        current_plant AS (
            SELECT 1541 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:42 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:42 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:42 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1541
        AND farm_used > 0
        ;
    
14:38:42 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:42 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:42 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:42 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:42 ERROR    

                methane demand:     216216
                methane produced:   242163
                manure_available:   2034
                crop_available:     1697

                
14:38:42 DEBUG    found plant: id_target = 1662
14:38:42 DEBUG    plant capacity: 100 	 iteration: 85 
	 rank: 1 	 current plant: 1662
14:38:42 INFO     
        WITH
        current_plant AS (
            SELECT 1662 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:42 INFO     
        WITH
        current_plant AS (
            SELECT 1662 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:42 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:42 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:42 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1662
        AND farm_used > 0
        ;
    
14:38:42 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:42 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:43 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:43 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:43 ERROR    

                methane demand:     216216
                methane produced:   252131
                manure_available:   3158
                crop_available:     1647

                
14:38:43 DEBUG    found plant: id_target = 1713
14:38:43 DEBUG    plant capacity: 100 	 iteration: 86 
	 rank: 1 	 current plant: 1713
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT 1713 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT 1713 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:43 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1713
        AND farm_used > 0
        ;
    
14:38:43 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:43 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:43 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:43 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:43 ERROR    

                methane demand:     216216
                methane produced:   250475
                manure_available:   2929
                crop_available:     1661

                
14:38:43 DEBUG    found plant: id_target = 1601
14:38:43 DEBUG    plant capacity: 100 	 iteration: 87 
	 rank: 1 	 current plant: 1601
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT 1601 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT 1601 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:43 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1601
        AND farm_used > 0
        ;
    
14:38:43 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:43 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:43 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:43 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:43 ERROR    

                methane demand:     216216
                methane produced:   259886
                manure_available:   3189
                crop_available:     1706

                
14:38:43 DEBUG    found plant: id_target = 1075
14:38:43 DEBUG    plant capacity: 100 	 iteration: 88 
	 rank: 1 	 current plant: 1075
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT 1075 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:43 INFO     
        WITH
        current_plant AS (
            SELECT 1075 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:44 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:44 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:44 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1075
        AND farm_used > 0
        ;
    
14:38:44 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:44 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:44 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:44 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:44 ERROR    

                methane demand:     216216
                methane produced:   262840
                manure_available:   3751
                crop_available:     1665

                
14:38:44 DEBUG    found plant: id_target = 1202
14:38:44 DEBUG    plant capacity: 100 	 iteration: 89 
	 rank: 1 	 current plant: 1202
14:38:44 INFO     
        WITH
        current_plant AS (
            SELECT 1202 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:44 INFO     
        WITH
        current_plant AS (
            SELECT 1202 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:44 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:44 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:44 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1202
        AND farm_used > 0
        ;
    
14:38:44 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:44 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:44 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:44 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:44 ERROR    

                methane demand:     216216
                methane produced:   253970
                manure_available:   3203
                crop_available:     1657

                
14:38:44 DEBUG    found plant: id_target = 1742
14:38:44 DEBUG    plant capacity: 100 	 iteration: 90 
	 rank: 1 	 current plant: 1742
14:38:44 INFO     
        WITH
        current_plant AS (
            SELECT 1742 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:44 INFO     
        WITH
        current_plant AS (
            SELECT 1742 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:44 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:45 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:45 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1742
        AND farm_used > 0
        ;
    
14:38:45 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:45 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:45 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:45 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:45 ERROR    

                methane demand:     216216
                methane produced:   243523
                manure_available:   2507
                crop_available:     1654

                
14:38:45 DEBUG    found plant: id_target = 1083
14:38:45 DEBUG    plant capacity: 100 	 iteration: 91 
	 rank: 1 	 current plant: 1083
14:38:45 INFO     
        WITH
        current_plant AS (
            SELECT 1083 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:45 INFO     
        WITH
        current_plant AS (
            SELECT 1083 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:45 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:45 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:45 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1083
        AND farm_used > 0
        ;
    
14:38:45 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:45 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:45 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:45 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:45 ERROR    

                methane demand:     216216
                methane produced:   278052
                manure_available:   3721
                crop_available:     1789

                
14:38:45 DEBUG    found plant: id_target = 1253
14:38:45 DEBUG    plant capacity: 100 	 iteration: 92 
	 rank: 1 	 current plant: 1253
14:38:45 INFO     
        WITH
        current_plant AS (
            SELECT 1253 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:45 INFO     
        WITH
        current_plant AS (
            SELECT 1253 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:45 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:45 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:45 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1253
        AND farm_used > 0
        ;
    
14:38:45 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:46 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:46 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:46 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:46 ERROR    

                methane demand:     216216
                methane produced:   265321
                manure_available:   4100
                crop_available:     1644

                
14:38:46 DEBUG    found plant: id_target = 1531
14:38:46 DEBUG    plant capacity: 100 	 iteration: 93 
	 rank: 1 	 current plant: 1531
14:38:46 INFO     
        WITH
        current_plant AS (
            SELECT 1531 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:46 INFO     
        WITH
        current_plant AS (
            SELECT 1531 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:46 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:46 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:46 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1531
        AND farm_used > 0
        ;
    
14:38:46 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:46 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:46 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:46 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:46 ERROR    

                methane demand:     216216
                methane produced:   278942
                manure_available:   4911
                crop_available:     1660

                
14:38:46 DEBUG    found plant: id_target = 1114
14:38:46 DEBUG    plant capacity: 100 	 iteration: 94 
	 rank: 1 	 current plant: 1114
14:38:46 INFO     
        WITH
        current_plant AS (
            SELECT 1114 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:46 INFO     
        WITH
        current_plant AS (
            SELECT 1114 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:46 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:46 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:46 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1114
        AND farm_used > 0
        ;
    
14:38:46 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:46 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:47 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:47 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:47 ERROR    

                methane demand:     216216
                methane produced:   291631
                manure_available:   4564
                crop_available:     1801

                
14:38:47 DEBUG    found plant: id_target = 1582
14:38:47 DEBUG    plant capacity: 100 	 iteration: 95 
	 rank: 1 	 current plant: 1582
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT 1582 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT 1582 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:47 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1582
        AND farm_used > 0
        ;
    
14:38:47 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:47 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:47 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:47 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:47 ERROR    

                methane demand:     216216
                methane produced:   303462
                manure_available:   4216
                crop_available:     1935

                
14:38:47 DEBUG    found plant: id_target = 1070
14:38:47 DEBUG    plant capacity: 100 	 iteration: 96 
	 rank: 1 	 current plant: 1070
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT 1070 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT 1070 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:47 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1070
        AND farm_used > 0
        ;
    
14:38:47 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:47 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:47 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:47 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:47 ERROR    

                methane demand:     216216
                methane produced:   275603
                manure_available:   4352
                crop_available:     1698

                
14:38:47 DEBUG    found plant: id_target = 1594
14:38:47 DEBUG    plant capacity: 100 	 iteration: 97 
	 rank: 1 	 current plant: 1594
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT 1594 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT 1594 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:47 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:48 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:48 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1594
        AND farm_used > 0
        ;
    
14:38:48 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:48 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:48 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:48 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:48 ERROR    

                methane demand:     216216
                methane produced:   317224
                manure_available:   4547
                crop_available:     2007

                
14:38:48 DEBUG    found plant: id_target = 1247
14:38:48 DEBUG    plant capacity: 100 	 iteration: 98 
	 rank: 1 	 current plant: 1247
14:38:48 INFO     
        WITH
        current_plant AS (
            SELECT 1247 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:48 INFO     
        WITH
        current_plant AS (
            SELECT 1247 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:48 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:48 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:48 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1247
        AND farm_used > 0
        ;
    
14:38:48 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:48 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:48 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:48 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:48 ERROR    

                methane demand:     216216
                methane produced:   306583
                manure_available:   5289
                crop_available:     1837

                
14:38:48 DEBUG    found plant: id_target = 1498
14:38:48 DEBUG    plant capacity: 100 	 iteration: 99 
	 rank: 1 	 current plant: 1498
14:38:48 INFO     
        WITH
        current_plant AS (
            SELECT 1498 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:48 INFO     
        WITH
        current_plant AS (
            SELECT 1498 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:48 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:48 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:48 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1498
        AND farm_used > 0
        ;
    
14:38:48 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:48 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:49 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:49 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:49 ERROR    

                methane demand:     216216
                methane produced:   288042
                manure_available:   5687
                crop_available:     1643

                
14:38:49 DEBUG    found plant: id_target = 932
14:38:49 DEBUG    plant capacity: 100 	 iteration: 100 
	 rank: 1 	 current plant: 932
14:38:49 INFO     
        WITH
        current_plant AS (
            SELECT 932 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:49 INFO     
        WITH
        current_plant AS (
            SELECT 932 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:49 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:49 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:49 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 932
        AND farm_used > 0
        ;
    
14:38:49 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:49 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:49 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:49 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:49 ERROR    

                methane demand:     216216
                methane produced:   311777
                manure_available:   7231
                crop_available:     1655

                
14:38:49 DEBUG    found plant: id_target = 1297
14:38:49 DEBUG    plant capacity: 100 	 iteration: 101 
	 rank: 1 	 current plant: 1297
14:38:49 INFO     
        WITH
        current_plant AS (
            SELECT 1297 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(manure_row_1) as manure_row_1
            FROM (
                SELECT s.id_target, s.manure_available, s.length,
                SUM (COALESCE(s.manure_available,0)) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS manure_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row_1
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, parameters AS p
            WHERE f.manure_aggregated  <= p.manure_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        manure_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.manure_available, 2 AS farm_used, f.length AS length_manure
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS manure_row
                FROM farm_selection AS s
                WHERE s.length < 10000
                ) AS f, manure_columns AS m
            WHERE f.id_target = m.id_target AND f.manure_row <= m.manure_row_1 + 1-- grab the next value of the sequence
        ),
        manure_used AS (
            SELECT id_target, id_building, length_manure, farm_used,
                manure_available AS manure_used
            FROM manure_farms
        )
        UPDATE opt_residual AS r
        SET manure_available = 0,
            manure_used = CASE WHEN r.id_target = p.id_target THEN u.manure_used ELSE 0 END,
            length_manure = CASE WHEN r.id_target = p.id_target THEN u.length_manure ELSE 0 END,
            farm_used = u.farm_used
        FROM manure_used AS u, parameters AS p
        WHERE r.id_building = u.id_building
        ;
    
14:38:49 INFO     
        WITH
        current_plant AS (
            SELECT 1297 AS id_target
        ),
        parameters AS (
            SELECT
            c.id_target,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        manure_available AS (
            SELECT id_target,
                SUM (COALESCE(manure_available,0)) AS manure_available,
                SUM (COALESCE(crop_available,0)) AS crop_available,
                SUM (COALESCE(manure_used,0)) AS manure_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        manure_required AS (
            SELECT
                a.id_target, a.manure_available, a.manure_used, p.manure_required,
                a.manure_available - p.manure_required AS manure_residual,
                manure_used * 14.4 AS methane_from_manure,
                a.crop_available
            FROM manure_available AS a, parameters AS p
        ),
        manure_methane AS (
            SELECT
                id_target, manure_available, manure_required, manure_used,
                manure_residual, methane_from_manure, crop_available,
                CASE
        			WHEN manure_residual < 0 THEN (manure_residual * 14.4 * -1)
        			ELSE 0
                END AS methane_lacking_from_manure
            FROM manure_required
        ),
        crop_methane_missing AS (
            SELECT
                t.*,
        		t.methane_lacking_from_manure / 125.4 AS crop_additional
            FROM manure_methane AS t
        ),
        crop_required AS (
            SELECT m.*,
        		p.crop_required + m.crop_additional AS crop_required
            FROM crop_methane_missing AS m, parameters AS p
            WHERE m.id_target = p.id_target
        )
        INSERT INTO opt_plants
            (id_plant, id_target,
            manure_required, manure_available, manure_used, manure_residual,
            crop_required, crop_available, crop_additional,
            methane_from_manure)
        SELECT
            nextval('plants'), c.id_target,
            c.manure_required, c.manure_available, c.manure_used, c.manure_residual,
            c.crop_required, c.crop_available, c.crop_additional,
            c.methane_from_manure
        FROM crop_required AS c
        ;
    
14:38:49 INFO     
        WITH
        current_plant AS (
            SELECT id_target, crop_required, crop_additional
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        farm_selection AS (
            SELECT r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT f.id_target, max(crop_row_1) as crop_row_1
            FROM (
                SELECT s.id_target, s.crop_available, s.length,
                SUM (s.crop_available) OVER (PARTITION BY s.id_target ORDER BY s.length ASC) AS crop_aggregated,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row_1
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, current_plant AS c
            WHERE f.crop_aggregated  <= c.crop_required
            GROUP BY f.id_target
            ORDER BY f.id_target
        ),
        crop_farms AS (
            SELECT
                f.id_target, f.id_building, f.length,
                f.crop_available, f.length AS length_crop,
                CASE
                    WHEN COALESCE(f.manure_used,0) = 0 THEN 3
                    WHEN COALESCE(f.manure_used,0) > 0 THEN 1
                    ELSE 0
                END AS farm_used
            FROM (
                SELECT s.*,
                row_number () OVER (ORDER BY s.id_target, s.length ASC) AS crop_row
                FROM farm_selection AS s
                WHERE s.length < 50000
                ) AS f, crop_columns AS m
            WHERE f.id_target = m.id_target AND f.crop_row <= m.crop_row_1 + 1-- grab the next value of the sequence
        ),
        crop_used AS (
            SELECT id_target, id_building, length_crop, farm_used,
                crop_available AS crop_used
            FROM crop_farms
        )
        UPDATE opt_residual AS r
        SET
            crop_available = 0,
            crop_used = CASE WHEN r.id_target = c.id_target THEN u.crop_used ELSE 0 END,
            length_crop = CASE WHEN r.id_target = c.id_target THEN u.length_crop ELSE 0 END,
            farm_used = u.farm_used,
            plant_capacity = 100
        FROM crop_used AS u, current_plant AS c
        WHERE r.id_building = u.id_building
        ;
    
14:38:49 INFO     
        WITH
        current_plant AS (
            SELECT id_plant, id_target, crop_required, methane_from_manure
            FROM opt_plants
            ORDER BY id_plant DESC
            LIMIT 1
        ),
        parameters AS (
            SELECT
            c.id_plant, c.id_target, c.methane_from_manure,
            704.286644951 AS manure_required,
            1643.33550489 AS crop_required,
            216216 AS methane_required
            FROM current_plant AS c
        ),
        farm_selection AS (
            SELECT c.id_plant, r.*
            FROM current_plant AS c, opt_residual AS r
            WHERE c.id_target = r.id_target
        ),
        crop_available AS (
            SELECT id_target,
                SUM (crop_available) AS crop_available,
                SUM (manure_used) AS manure_used,
                SUM (crop_used) AS crop_used
            FROM farm_selection
            GROUP BY id_target
            ORDER BY id_target
        ),
        crop_methane AS (
            SELECT
                p.id_plant, a.id_target, a.crop_available, a.crop_used, a.manure_used,
                p.crop_required, p.methane_required, p.methane_from_manure,
                crop_used * 125.4 AS methane_from_crop
            FROM crop_available AS a, parameters AS p
        ),
        total_methane AS (
            SELECT
                id_plant, id_target, crop_used, methane_from_manure, methane_from_crop, methane_required,
                COALESCE(methane_from_manure,0) + COALESCE(methane_from_crop,0)  AS methane_total_produced,
                COALESCE(manure_used,0) + COALESCE(crop_used,0)  AS resources_total
            FROM crop_methane
        ),
        lengths AS (
            SELECT
                id_target,
                AVG(length_manure) AS length_manure_avg,
                AVG(length_crop) AS length_crop_avg
            FROM opt_residual
            GROUP BY id_target
        )
        UPDATE opt_plants AS p
        SET plant_capacity = 100,
            rank = 1,
            length_manure_avg = l.length_manure_avg,
            length_crop_avg = l.length_crop_avg,
            crop_used = t.crop_used,
            methane_required = t.methane_required,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = t.methane_total_produced,
            ratio_manure = ROUND((cast(t.methane_from_manure / t.methane_total_produced  AS numeric)),2),
            ratio_crop = ROUND((cast(t.methane_from_crop/ t.methane_total_produced  AS numeric)),2),
            geom  = tg.geom
        FROM total_methane AS t
        LEFT JOIN lengths AS l ON t.id_target = l.id_target
        LEFT JOIN site_clean AS tg ON t.id_target = tg.id_target
        WHERE p.id_plant = t.id_plant
        ;
    
14:38:49 INFO     
        INSERT INTO opt_allocation
        SELECT *
        FROM opt_residual
        wHERE id_target = 1297
        AND farm_used > 0
        ;
    
14:38:49 INFO     
        DELETE FROM opt_residual
        WHERE farm_used = 1
        OR (
            COALESCE(manure_available,0) = 0
            AND COALESCE(crop_available,0) = 0
        )       ;
        
14:38:49 INFO     
        WITH
        methane AS (
            SELECT
                id_target, id_building, manure_available, crop_available,
                COALESCE(manure_available,0) * 14.4 AS methane_from_manure,
                COALESCE(crop_available,0) * 125.4 AS methane_from_crop
            FROM opt_residual
        )
        UPDATE opt_residual AS r
        SET methane_from_manure = t.methane_from_manure,
            methane_from_crop = t.methane_from_crop,
            methane_total_produced = COALESCE(t.methane_from_manure,0) + COALESCE(t.methane_from_crop,0)
        FROM methane AS t
        WHERE r.id_target = t.id_target AND r.id_building = t.id_building
        ;
    
14:38:49 INFO     
        WITH
        costs AS (
            SELECT
                r.id_target,
                SUM((COALESCE(r.crop_used,0) * 5)) AS cost_harvest,
                SUM((COALESCE(r.crop_used,0) * 1 * r.length / 1000))AS cost_ensiling,
                SUM((COALESCE(r.manure_used,0) * (2 + (0.5  * (r.length / 1000))) )) AS cost_manure,
                SUM(COALESCE(r.manure_used,0)) AS manure_used,
                SUM(COALESCE(r.crop_used,0)) AS crop_used
            FROM opt_allocation AS r
            GROUP BY r.id_target
        )
        UPDATE opt_plants AS a
        SET
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = COALESCE(b.cost_harvest,0) + COALESCE(b.cost_ensiling,0) +  COALESCE(b.cost_manure,0),
            resources_total = COALESCE(b.manure_used,0) + COALESCE(b.crop_used,0)
        FROM costs AS b
        WHERE a.id_target = b.id_target
        ;
    
14:38:49 INFO     
        WITH
        costs AS (
            SELECT
                id_target,
                SUM(COALESCE(manure_available,0)) AS manure_available,
                SUM(COALESCE(crop_available,0)) AS crop_available,
                SUM(COALESCE(crop_additional,0)) AS crop_additional,
                SUM((COALESCE(crop_available,0) * 5)) AS cost_harvest,
                SUM((COALESCE(crop_available,0) * 1 * length / 1000))AS cost_ensiling,
                SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_manure,
                SUM((COALESCE(crop_available,0) * 5)) + SUM((COALESCE(crop_available,0) * 1 * length / 1000)) + SUM((COALESCE(manure_available,0) * (2 + (0.5  * (length / 1000))) )) AS cost_total,
                SUM(COALESCE(methane_total_produced,0)) AS methane_total_produced
            FROM opt_residual
            WHERE rank = 1
            GROUP BY id_target
            ORDER BY cost_total ASC
        )
        SELECT id_target, methane_total_produced, manure_available, crop_available  FROM costs
        WHERE methane_total_produced >= 216216
        AND crop_available + crop_additional >= 1643.33550489
        AND id_target NOT IN  (
          SELECT DISTINCT id_target FROM opt_plants
        )
        AND NOT (id_target =1444 or id_target =1445 or id_target =1446)
        ;
    
14:38:49 ERROR    no more plants for the rank 1
14:38:49 DEBUG    plant capacity: 100 	 iteration: 102 
	 rank: 0 	 current plant: 1297
14:38:49 INFO     
        DROP TABLE IF EXISTS opt_plants_100kw CASCADE;
CREATE TABLE opt_plants_100kw AS
        SELECT *
        FROM opt_plants
        ;
    
14:38:49 INFO     
        DROP TABLE IF EXISTS opt_allocation_100kw CASCADE;
CREATE TABLE opt_allocation_100kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM opt_allocation AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
        ;
    
14:38:50 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:38:50 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:38:50 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1000__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:38:51 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1250__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
14:38:51 INFO     
            INSERT INTO opt_allocation_100kw (
                id_residual, id_plant, id_target, id_building, farm_used, rank, plant_capacity, length, length_manure, length_crop, manure_available, manure_required, manure_used, manure_residual, crop_required, crop_available, crop_used, crop_additional, resources_total, methane_from_manure, methane_from_crop, methane_total_produced, cost_harvest, cost_ensiling, cost_manure, cost_total, farms ,route
                )
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM opt_allocation AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building AND a.id_target = c.id_target
            ;
        
