23:13:48 WARNING  is when this event was logged.
23:13:48 INFO     
    DROP TABLE IF EXISTS optimal_plant_resources_residual_100kw;
CREATE TABLE optimal_plant_resources_residual_100kw AS
    SELECT a.id_aggregate, a.id_target, a.id_building, a.length, b.rank, a.plant_capacity, a.manure, a.crop_production, a.live_methane, a.crop_methane, a.methane_total, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
    FROM plants_costs AS a
    LEFT JOIN plants_costs_aggregated AS b
    ON a.id_target = b.id_target
    ORDER BY  a.methane_total DESC, a.cost_total
    ;
    
23:13:49 INFO     
        DROP TABLE IF EXISTS optimal_plant_resources_allocated_100kw;
CREATE TABLE optimal_plant_resources_allocated_100kw AS
    		SELECT  * FROM optimal_plant_resources_residual_100kw WHERE 0 > 1
            ;
    
23:13:49 INFO     
        DROP TABLE IF EXISTS optimal_plant_location_100kw;
CREATE TABLE optimal_plant_location_100kw (
            id_order SERIAL PRIMARY KEY, id_target int, plant_capacity int, rank int,
            live_required double precision, live_aggr double precision, live_demand double precision,
            crop_required double precision, crop_aggr double precision, crop_demand double precision,
            total_required double precision,
            methane_available double precision, methane_demand double precision,
            live_methane_used double precision, crop_methane_used double precision, methane_used double precision,
            cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision
        );
    
23:13:49 INFO     SELECT AddGeometryColumn ('public', 'optimal_plant_location_100kw','geom', 3035, 'POINT', 2);
23:13:49 INFO     
        DROP TABLE IF EXISTS optimal_plant_links_100kw;
CREATE TABLE optimal_plant_links_100kw (
            id_aggregate int, id_target int, id_building int, plant_capacity int, length double precision,
            manure_used double precision, live_methane_used double precision,
            crop_used double precision, crop_methane_used double precision,
            methane_used double precision,
            cost_harvest double precision, cost_ensiling double precision, cost_manure double precision, cost_total double precision
        );
    
23:13:49 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:49 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:49 INFO     found plant 
23:13:49 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:49 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:49 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:49 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:49 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:49 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:50 DEBUG    plant capacity: 100 	 iteration: 1 	 rank: 3
23:13:50 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:50 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:50 INFO     found plant 
23:13:50 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:50 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:50 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:50 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:50 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:50 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:50 DEBUG    plant capacity: 100 	 iteration: 2 	 rank: 3
23:13:50 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:51 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:51 INFO     found plant 
23:13:51 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:51 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:51 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:51 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:51 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:51 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:51 DEBUG    plant capacity: 100 	 iteration: 3 	 rank: 3
23:13:51 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:51 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:51 INFO     found plant 
23:13:51 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:51 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:52 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:52 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:52 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:52 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:52 DEBUG    plant capacity: 100 	 iteration: 4 	 rank: 3
23:13:52 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:52 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:52 INFO     found plant 
23:13:52 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:52 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:52 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:52 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:52 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:52 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:53 DEBUG    plant capacity: 100 	 iteration: 5 	 rank: 3
23:13:53 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:53 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:53 INFO     found plant 
23:13:53 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:53 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:53 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:53 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:53 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:53 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:53 DEBUG    plant capacity: 100 	 iteration: 6 	 rank: 3
23:13:53 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:54 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:54 INFO     found plant 
23:13:54 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:54 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:54 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:54 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:54 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:54 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:54 DEBUG    plant capacity: 100 	 iteration: 7 	 rank: 3
23:13:54 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:54 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:54 INFO     found plant 
23:13:54 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:54 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:55 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:55 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:55 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:55 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:55 DEBUG    plant capacity: 100 	 iteration: 8 	 rank: 3
23:13:55 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:55 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:55 INFO     found plant 
23:13:55 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:55 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:55 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:55 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:55 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:55 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:56 DEBUG    plant capacity: 100 	 iteration: 9 	 rank: 3
23:13:56 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:56 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:56 INFO     found plant 
23:13:56 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:56 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:56 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:56 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:56 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:56 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:56 DEBUG    plant capacity: 100 	 iteration: 10 	 rank: 3
23:13:56 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:57 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:57 INFO     found plant 
23:13:57 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:57 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:57 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:57 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:57 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:57 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:57 DEBUG    plant capacity: 100 	 iteration: 11 	 rank: 3
23:13:57 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:57 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:57 INFO     found plant 
23:13:57 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:57 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:57 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:57 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:57 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:58 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:58 DEBUG    plant capacity: 100 	 iteration: 12 	 rank: 3
23:13:58 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:58 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:58 INFO     found plant 
23:13:58 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:58 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:58 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:58 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:58 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:58 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:58 DEBUG    plant capacity: 100 	 iteration: 13 	 rank: 3
23:13:58 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:59 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:59 INFO     found plant 
23:13:59 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:59 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:59 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:59 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:59 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:13:59 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:13:59 DEBUG    plant capacity: 100 	 iteration: 14 	 rank: 3
23:13:59 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:13:59 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:13:59 INFO     found plant 
23:13:59 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:13:59 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:13:59 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:13:59 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:13:59 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:00 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:00 DEBUG    plant capacity: 100 	 iteration: 15 	 rank: 3
23:14:00 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:00 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:00 INFO     found plant 
23:14:00 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:00 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:00 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:00 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:00 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:00 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:00 DEBUG    plant capacity: 100 	 iteration: 16 	 rank: 3
23:14:00 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:01 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:01 INFO     found plant 
23:14:01 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:01 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:01 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:01 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:01 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:01 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:01 DEBUG    plant capacity: 100 	 iteration: 17 	 rank: 3
23:14:01 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:01 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:01 INFO     found plant 
23:14:01 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:01 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:01 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:01 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:01 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:02 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:02 DEBUG    plant capacity: 100 	 iteration: 18 	 rank: 3
23:14:02 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:02 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:02 INFO     found plant 
23:14:02 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:02 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:02 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:02 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:02 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:02 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:02 DEBUG    plant capacity: 100 	 iteration: 19 	 rank: 3
23:14:02 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:03 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:03 INFO     found plant 
23:14:03 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:03 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:03 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:03 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:03 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:03 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:03 DEBUG    plant capacity: 100 	 iteration: 20 	 rank: 3
23:14:03 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:03 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:03 INFO     found plant 
23:14:03 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:03 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:03 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:03 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:03 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:04 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:04 DEBUG    plant capacity: 100 	 iteration: 21 	 rank: 3
23:14:04 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:04 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:04 INFO     found plant 
23:14:04 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:04 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:04 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:04 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:04 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:04 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:04 DEBUG    plant capacity: 100 	 iteration: 22 	 rank: 3
23:14:04 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:04 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:04 INFO     found plant 
23:14:04 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:04 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:05 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:05 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:05 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:05 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:05 DEBUG    plant capacity: 100 	 iteration: 23 	 rank: 3
23:14:05 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:05 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:05 INFO     found plant 
23:14:05 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:05 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:05 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:05 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:05 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:05 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:05 DEBUG    plant capacity: 100 	 iteration: 24 	 rank: 3
23:14:05 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:06 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:06 INFO     found plant 
23:14:06 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:06 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:06 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:06 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:06 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:06 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:06 DEBUG    plant capacity: 100 	 iteration: 25 	 rank: 3
23:14:06 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:06 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:06 INFO     found plant 
23:14:06 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:06 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:06 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:06 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:06 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:07 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:07 DEBUG    plant capacity: 100 	 iteration: 26 	 rank: 3
23:14:07 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:07 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:07 INFO     found plant 
23:14:07 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:07 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:07 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:07 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:07 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:07 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:07 DEBUG    plant capacity: 100 	 iteration: 27 	 rank: 3
23:14:07 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:07 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:07 INFO     found plant 
23:14:07 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:07 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:08 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:08 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:08 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:08 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:08 DEBUG    plant capacity: 100 	 iteration: 28 	 rank: 3
23:14:08 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:08 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:08 INFO     found plant 
23:14:08 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:08 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:08 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:08 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:08 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:08 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:09 DEBUG    plant capacity: 100 	 iteration: 29 	 rank: 3
23:14:09 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:09 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:09 INFO     found plant 
23:14:09 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:09 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:09 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:09 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:09 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:09 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:09 DEBUG    plant capacity: 100 	 iteration: 30 	 rank: 3
23:14:09 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:09 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:09 INFO     found plant 
23:14:09 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:09 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:09 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:09 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:10 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:10 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:10 DEBUG    plant capacity: 100 	 iteration: 31 	 rank: 3
23:14:10 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:10 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:10 INFO     found plant 
23:14:10 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:10 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:10 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:10 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:10 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:10 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:10 DEBUG    plant capacity: 100 	 iteration: 32 	 rank: 3
23:14:10 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:10 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:10 INFO     found plant 
23:14:10 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:11 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:11 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:11 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:11 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:11 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:11 DEBUG    plant capacity: 100 	 iteration: 33 	 rank: 3
23:14:11 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:11 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:11 INFO     found plant 
23:14:11 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:11 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:11 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:11 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:11 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:11 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:12 DEBUG    plant capacity: 100 	 iteration: 34 	 rank: 3
23:14:12 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:12 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:12 INFO     found plant 
23:14:12 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:12 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:12 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:12 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:12 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:12 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:12 DEBUG    plant capacity: 100 	 iteration: 35 	 rank: 3
23:14:12 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:12 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:12 INFO     found plant 
23:14:12 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:12 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:12 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:12 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:12 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:12 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:13 DEBUG    plant capacity: 100 	 iteration: 36 	 rank: 3
23:14:13 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:13 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:13 INFO     found plant 
23:14:13 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:13 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:13 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:13 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:13 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:13 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:13 DEBUG    plant capacity: 100 	 iteration: 37 	 rank: 3
23:14:13 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:13 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 3
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:13 DEBUG    no more plants for the rank 3
23:14:13 DEBUG    plant capacity: 100 	 iteration: 38 	 rank: 2
23:14:13 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:13 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:13 INFO     found plant 
23:14:13 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:13 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:13 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:13 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:13 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:14 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:14 DEBUG    plant capacity: 100 	 iteration: 39 	 rank: 2
23:14:14 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:14 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:14 INFO     found plant 
23:14:14 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:14 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:14 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:14 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:14 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:14 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:14 DEBUG    plant capacity: 100 	 iteration: 40 	 rank: 2
23:14:14 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:14 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:14 INFO     found plant 
23:14:14 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:14 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:14 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:14 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:14 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:14 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:15 DEBUG    plant capacity: 100 	 iteration: 41 	 rank: 2
23:14:15 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:15 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:15 INFO     found plant 
23:14:15 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:15 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:15 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:15 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:15 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:15 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:15 DEBUG    plant capacity: 100 	 iteration: 42 	 rank: 2
23:14:15 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:15 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:15 INFO     found plant 
23:14:15 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:15 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:15 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:15 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:15 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:16 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:16 DEBUG    plant capacity: 100 	 iteration: 43 	 rank: 2
23:14:16 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:16 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:16 INFO     found plant 
23:14:16 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:16 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:16 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:16 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:16 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:16 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:16 DEBUG    plant capacity: 100 	 iteration: 44 	 rank: 2
23:14:16 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:16 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:16 INFO     found plant 
23:14:16 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:16 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:16 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:16 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:16 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:16 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:17 DEBUG    plant capacity: 100 	 iteration: 45 	 rank: 2
23:14:17 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:17 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:17 INFO     found plant 
23:14:17 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:17 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:17 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:17 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:17 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:17 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:17 DEBUG    plant capacity: 100 	 iteration: 46 	 rank: 2
23:14:17 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:17 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:17 INFO     found plant 
23:14:17 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:17 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:17 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:17 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:17 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:17 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:18 DEBUG    plant capacity: 100 	 iteration: 47 	 rank: 2
23:14:18 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:18 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:18 INFO     found plant 
23:14:18 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:18 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:18 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:18 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:18 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:18 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:18 DEBUG    plant capacity: 100 	 iteration: 48 	 rank: 2
23:14:18 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:18 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:18 INFO     found plant 
23:14:18 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:18 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:18 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:18 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:18 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:18 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:18 DEBUG    plant capacity: 100 	 iteration: 49 	 rank: 2
23:14:18 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:18 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:18 INFO     found plant 
23:14:18 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:18 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:19 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:19 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:19 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:19 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:19 DEBUG    plant capacity: 100 	 iteration: 50 	 rank: 2
23:14:19 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:19 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:19 INFO     found plant 
23:14:19 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:19 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:19 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:19 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:19 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:19 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:19 DEBUG    plant capacity: 100 	 iteration: 51 	 rank: 2
23:14:19 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:19 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:19 INFO     found plant 
23:14:19 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:19 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:19 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:19 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:19 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:19 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:20 DEBUG    plant capacity: 100 	 iteration: 52 	 rank: 2
23:14:20 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:20 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:20 INFO     found plant 
23:14:20 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:20 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:20 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:20 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:20 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:20 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:20 DEBUG    plant capacity: 100 	 iteration: 53 	 rank: 2
23:14:20 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:20 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:20 INFO     found plant 
23:14:20 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:20 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:20 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:20 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:20 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:20 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:20 DEBUG    plant capacity: 100 	 iteration: 54 	 rank: 2
23:14:20 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:20 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:20 INFO     found plant 
23:14:20 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:20 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:20 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:20 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:20 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:20 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:21 DEBUG    plant capacity: 100 	 iteration: 55 	 rank: 2
23:14:21 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:21 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:21 INFO     found plant 
23:14:21 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:21 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:21 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:21 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:21 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:21 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:21 DEBUG    plant capacity: 100 	 iteration: 56 	 rank: 2
23:14:21 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:21 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:21 INFO     found plant 
23:14:21 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:21 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:21 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:21 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:21 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:21 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:21 DEBUG    plant capacity: 100 	 iteration: 57 	 rank: 2
23:14:21 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:21 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:21 INFO     found plant 
23:14:21 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:21 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:21 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:21 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:21 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:21 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:22 DEBUG    plant capacity: 100 	 iteration: 58 	 rank: 2
23:14:22 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:22 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:22 INFO     found plant 
23:14:22 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:22 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:22 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:22 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:22 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:22 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:22 DEBUG    plant capacity: 100 	 iteration: 59 	 rank: 2
23:14:22 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:22 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:22 INFO     found plant 
23:14:22 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:22 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:22 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:22 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:22 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:22 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:22 DEBUG    plant capacity: 100 	 iteration: 60 	 rank: 2
23:14:22 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:22 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:22 INFO     found plant 
23:14:22 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:22 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:22 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:22 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:22 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:22 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:22 DEBUG    plant capacity: 100 	 iteration: 61 	 rank: 2
23:14:22 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:22 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:22 INFO     found plant 
23:14:22 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:22 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:22 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:22 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:22 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:22 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:23 DEBUG    plant capacity: 100 	 iteration: 62 	 rank: 2
23:14:23 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:23 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:23 INFO     found plant 
23:14:23 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:23 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:23 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:23 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:23 DEBUG    plant capacity: 100 	 iteration: 63 	 rank: 2
23:14:23 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:23 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:23 INFO     found plant 
23:14:23 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:23 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:23 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:23 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:23 DEBUG    plant capacity: 100 	 iteration: 64 	 rank: 2
23:14:23 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:23 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:23 INFO     found plant 
23:14:23 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:23 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:23 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:23 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:23 DEBUG    plant capacity: 100 	 iteration: 65 	 rank: 2
23:14:23 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:23 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:23 INFO     found plant 
23:14:23 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:23 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:23 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:23 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:23 DEBUG    plant capacity: 100 	 iteration: 66 	 rank: 2
23:14:23 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:23 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:23 INFO     found plant 
23:14:23 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:23 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:23 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:23 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:23 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:23 DEBUG    plant capacity: 100 	 iteration: 67 	 rank: 2
23:14:23 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:23 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:23 INFO     found plant 
23:14:23 INFO     
            INSERT INTO optimal_plant_location_100kw (
                id_target, plant_capacity, rank,
                live_required, live_aggr, live_demand,
                crop_required, crop_aggr, crop_demand,
                total_required, methane_available, methane_demand,
                cost_harvest, cost_ensiling, cost_manure, cost_total,
                geom
                )

    		


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
                ;
        
23:14:23 INFO     
        WITH
        last_record AS (
            SELECT id_target, live_required, crop_required
            FROM optimal_plant_location_100kw
            ORDER BY id_order DESC
            LIMIT 1
        ),
        live_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT live_row,
                -- calculate if the available methane from livestock reachs the minimum amount, otherwise grep the remaining from crops
                CASE
                    WHEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0) > 0 THEN COALESCE(live_required,0) - COALESCE(live_methane_aggregated,0)
                    ELSE 0
                    END AS livestock_demand
            FROM (
                SELECT b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f
            WHERE live_methane_aggregated <= (live_required)
            ORDER BY  live_row DESC
            LIMIT 1
        ),
        crop_columns AS (
            -- it get the last row of the sequence of farms
            -- this is necessary to grab the next value of the query, not retrieve without it
            SELECT crop_row
            FROM (
                SELECT b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, live_columns AS g
            WHERE crop_methane_aggregated <= (crop_required) + g.livestock_demand -- this is necessary for the situation where manure does not reach the minimum required amount
            ORDER BY  crop_row DESC
            LIMIT 1
        ),
        manure AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.manure, a.live_methane, b.live_required,
                SUM (a.live_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS live_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS live_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.live_methane > 0
                ) AS f, live_columns AS g
            WHERE f.live_row <= g.live_row + 1 -- grab the next value of the sequence
        ),
        crop AS (
            SELECT *
            FROM (
                SELECT a.id_aggregate, a.id_building, a.id_target, a.length, a.crop_production, a.crop_methane, b.crop_required,
                SUM (a.crop_methane) OVER (PARTITION BY a.id_target ORDER BY a.length ASC) AS crop_methane_aggregated,
                row_number () OVER (ORDER BY a.length ASC) AS crop_row
                FROM optimal_plant_resources_residual_100kw AS a, last_record AS b
                WHERE a.id_target = b.id_target AND a.crop_production > 0
                ) AS f, crop_columns AS g
            WHERE f.crop_row <= g.crop_row + 1 -- grab the next value of the sequence
        ),
        cost_total AS (
            SELECT a.id_aggregate, a.cost_harvest, a.cost_ensiling, a.cost_manure, a.cost_total
            FROM optimal_plant_resources_residual_100kw AS a, crop AS b
            WHERE a.id_aggregate = b.id_aggregate
        )
        INSERT INTO optimal_plant_links_100kw (
            id_aggregate, id_target, id_building, length,
            manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total
            )
        SELECT
            p.id_aggregate, p.id_target, p.id_building, p.length,
            r.manure AS manure_used, p.crop_production AS crop_used,
            r.live_methane AS live_methane_used, p.crop_methane AS crop_methane_used,
            COALESCE(r.live_methane,0) + COALESCE(p.crop_methane,0) AS methane_used,
            s.cost_harvest, s.cost_ensiling, s.cost_manure, s.cost_total
        FROM crop AS p
        LEFT JOIN manure AS r ON p.id_aggregate = r.id_aggregate
        LEFT JOIN cost_total AS s ON p.id_aggregate = s.id_aggregate

        ;
    
23:14:23 INFO     
        WITH
        aggretate AS (
            SELECT id_target,
            SUM (live_methane_used) AS live_methane_used,
            SUM (crop_methane_used) AS crop_methane_used,
            SUM (methane_used) AS methane_used,
            SUM (cost_harvest) AS cost_harvest,
            SUM (cost_ensiling) AS cost_ensiling,
            SUM (cost_manure) AS cost_manure,
            SUM (cost_total) AS cost_total
            FROM optimal_plant_links_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        UPDATE optimal_plant_location_100kw AS a
        SET live_methane_used = b.live_methane_used,
            crop_methane_used = b.crop_methane_used,
            methane_used = b.methane_used,
            cost_harvest = b.cost_harvest,
            cost_ensiling = b.cost_ensiling,
            cost_manure = b.cost_manure,
            cost_total = b.cost_total
        FROM aggretate AS b
        WHERE a.id_target = b.id_target
        ;
    
23:14:24 INFO     
        INSERT INTO optimal_plant_resources_allocated_100kw
        SELECT a.*
        FROM optimal_plant_resources_residual_100kw AS a, optimal_plant_links_100kw AS b
        WHERE a.id_building = b.id_building AND a.id_target = b.id_target
        ;
    
23:14:24 INFO     
        WITH
        costs AS
        (
            SELECT *,
            (crop_production * 5) AS cost_harvest,
            ((length / 1000) * crop_production * 6) AS cost_ensiling,
            ((length / 1000) * manure * 0.2) AS cost_manure
            FROM optimal_plant_resources_allocated_100kw
        )
        UPDATE optimal_plant_resources_residual_100kw AS a
        SET
            manure = a.manure - b.manure,
            crop_production = a.crop_production - b.crop_production,
            live_methane = a.live_methane - b.live_methane,
            crop_methane = a.crop_methane - b.crop_methane,
            methane_total = a.methane_total - b.methane_total,
            cost_harvest = a.cost_harvest,
            cost_ensiling = a.cost_ensiling,
            cost_manure = a.cost_manure,
            cost_total = COALESCE(a.cost_harvest,0) + COALESCE(a.cost_ensiling,0) +  COALESCE(a.cost_manure,0)
        FROM optimal_plant_resources_allocated_100kw AS b
        WHERE a.id_building = b.id_building
        ;
    
23:14:24 INFO     
        DELETE FROM optimal_plant_resources_residual_100kw
        WHERE methane_total = 0 or methane_total is null
        ;
    
23:14:24 DEBUG    plant capacity: 100 	 iteration: 68 	 rank: 2
23:14:24 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:24 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 2
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:24 DEBUG    no more plants for the rank 2
23:14:24 DEBUG    plant capacity: 100 	 iteration: 69 	 rank: 1
23:14:24 INFO     
        DROP TABLE IF EXISTS optimal_plant_residual_aggr_100kw;
CREATE TABLE optimal_plant_residual_aggr_100kw AS
        WITH
        requirements AS (
            SELECT
            224000 AS  total_required,
            224000 * 0.3 AS live_required,
            224000 * 0.7 AS crop_required
        ),
        total AS (
            SELECT id_target,
                SUM (live_methane) AS live_aggr,
                SUM (crop_methane) AS crop_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        ),
        demand AS (
            SELECT a.id_target, b.*, a.live_aggr, a.crop_aggr,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN live_aggr > live_required THEN  live_required
                    ELSE live_aggr
                END AS live_demand,
                CASE
                    -- manure not reach the minimin ratio amount
                    WHEN crop_aggr > crop_required AND live_aggr > live_required THEN  crop_required
                    WHEN crop_aggr > crop_required AND live_aggr < live_required AND crop_aggr + live_aggr > total_required THEN  crop_required + (live_required - live_aggr)
                    ELSE 0
                END AS crop_demand
        FROM total AS a, requirements AS b
        ),
        aggregation AS (
            SELECT
                id_target,
                SUM (methane_total) AS methane_available,
                SUM (cost_harvest) AS cost_harvest_aggr,
                SUM (cost_ensiling) AS cost_ensiling_aggr,
                SUM (cost_manure) AS cost_manure_aggr,
                SUM (cost_total) AS cost_total_aggr
            FROM optimal_plant_resources_residual_100kw
            GROUP BY id_target
            ORDER BY id_target
        )
        SELECT
            a.id_target, 100 AS plant_capacity, c.rank,
            a.live_required, a.live_aggr, a.live_demand,
            a.crop_required, a.crop_aggr, a.crop_demand,
            a.total_required, b.methane_available,  a.live_demand + a.crop_demand AS methane_demand,
            b.cost_harvest_aggr, b.cost_ensiling_aggr, b.cost_manure_aggr, b.cost_total_aggr,
            c.geom
        FROM demand AS a
        LEFT JOIN aggregation AS b ON a.id_target = b.id_target
        LEFT JOIN site_clean AS c ON a.id_target = c.id_target
        WHERE a.id_target = b.id_target AND a.id_target = c.id_target
        ORDER BY rank DESC, cost_total_aggr ASC
            ;
    
23:14:24 INFO     


		SELECT *
        FROM optimal_plant_residual_aggr_100kw
        WHERE methane_demand >= 224000 AND cost_total_aggr > 0  AND rank = 1
        
        ORDER BY cost_total_aggr ASC
        LIMIT 1
            ;
        
23:14:24 DEBUG    no more plants for the rank 1
23:14:24 DEBUG    plant capacity: 100 	 iteration: 70 	 rank: 0
23:14:24 INFO     
        DROP TABLE IF EXISTS optimal_plant_map_100kw;
CREATE TABLE optimal_plant_map_100kw AS
        SELECT a.*, b.geom AS farms, c.geom AS route
        FROM optimal_plant_links_100kw AS a
        LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
        LEFT JOIN route_distance_50km_250__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
        WHERE a.id_building = b.id_building AND a.id_building = c.id_building
        ;
    
23:14:24 INFO     
            INSERT INTO optimal_plant_map_100kw (
                id_aggregate, id_target, id_building, plant_capacity, length,
                manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total,
                farms, route)
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_100kw AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
23:14:24 INFO     
            INSERT INTO optimal_plant_map_100kw (
                id_aggregate, id_target, id_building, plant_capacity, length,
                manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total,
                farms, route)
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_100kw AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_750__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
23:14:24 INFO     
            INSERT INTO optimal_plant_map_100kw (
                id_aggregate, id_target, id_building, plant_capacity, length,
                manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total,
                farms, route)
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_100kw AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_1500__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
23:14:25 INFO     
            INSERT INTO optimal_plant_map_100kw (
                id_aggregate, id_target, id_building, plant_capacity, length,
                manure_used, crop_used, live_methane_used, crop_methane_used, methane_used, cost_harvest, cost_ensiling, cost_manure, cost_total,
                farms, route)
            SELECT a.*, b.geom AS farms, c.geom AS route
            FROM optimal_plant_links_100kw AS a
            LEFT JOIN farm_buildings_biomass AS b  ON a.id_building = b.id_building
            LEFT JOIN route_distance_50km_2000__ AS c  ON a.id_building = c.id_building AND a.id_target = c.id_target
            WHERE a.id_building = b.id_building AND a.id_building = c.id_building
            ;
        
